// https://fiveko.com/gaussian-filter-in-opengl-webgl/

#include "preamble"

// our texture
uniform sampler2D u_image;

#define KERNEL_SIZE 15
uniform vec2 u_textureSize;
uniform int u_direction;
uniform float u_kernel[KERNEL_SIZE];

varying vec2 mPos; // Pixel coordinates [0,1]

void main() {
	// vec2 textCoord = gl_FragCoord.xy / u_textureSize;
	vec2 onePixel = ((u_direction == 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0)) / u_textureSize;
	vec4 meanColor = vec4(0);
	int ms = KERNEL_SIZE / 2;
	for (int i = 0; i < KERNEL_SIZE; i++) {
		// meanColor += texture2D(u_image, textCoord  + onePixel*vec2(i - ms))*u_kernel[i];
		vec2 coord = mPos + onePixel*vec2(i - ms);
		bool inx = coord.x > 0.0 && coord.x < 1.0;
		bool iny = coord.y > 0.0 && coord.y < 1.0;
		meanColor += texture2D(u_image, coord)*u_kernel[i] * vec4(inx && iny);
	}
	gl_FragColor = meanColor;
}