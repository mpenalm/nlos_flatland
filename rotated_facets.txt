#include "trace-frag"

#include "bsdf"
#include "intersect"

void intersect(Ray ray, inout Intersection isect) {
    bboxIntersect(ray, vec2(0.0), vec2(1.79, 1.0), 0.0, isect);
    lineIntersect(ray, vec2(1.2, -1.0), vec2(1.2, 1.0), 1.0, isect);
    lineIntersect(ray, vec2(0.6, 0.3), vec2(0.5755971499970933, 0.28485071250072663), 2.0, isect);
lineIntersect(ray, vec2(0.5755971499970933, 0.28485071250072663), vec2(0.59, 0.25999999999999995), 2.0, isect);
lineIntersect(ray, vec2(0.59, 0.25999999999999995), vec2(0.5655971499970933, 0.24485071250072662), 2.0, isect);
lineIntersect(ray, vec2(0.5655971499970933, 0.24485071250072662), vec2(0.58, 0.21999999999999997), 2.0, isect);
lineIntersect(ray, vec2(0.58, 0.21999999999999997), vec2(0.5555971499970933, 0.20485071250072664), 2.0, isect);
lineIntersect(ray, vec2(0.5555971499970933, 0.20485071250072664), vec2(0.57, 0.18), 2.0, isect);
lineIntersect(ray, vec2(0.57, 0.18), vec2(0.5455971499970933, 0.16485071250072666), 2.0, isect);
lineIntersect(ray, vec2(0.5455971499970933, 0.16485071250072666), vec2(0.5599999999999999, 0.14), 2.0, isect);
lineIntersect(ray, vec2(0.5599999999999999, 0.14), vec2(0.5355971499970933, 0.12485071250072667), 2.0, isect);
lineIntersect(ray, vec2(0.5355971499970933, 0.12485071250072667), vec2(0.5499999999999999, 0.1), 2.0, isect);
lineIntersect(ray, vec2(0.5499999999999999, 0.1), vec2(0.5255971499970933, 0.08485071250072666), 2.0, isect);
lineIntersect(ray, vec2(0.5255971499970933, 0.08485071250072666), vec2(0.5399999999999999, 0.06), 2.0, isect);
lineIntersect(ray, vec2(0.5399999999999999, 0.06), vec2(0.5155971499970933, 0.044850712500726655), 2.0, isect);
lineIntersect(ray, vec2(0.5155971499970933, 0.044850712500726655), vec2(0.5299999999999999, 0.019999999999999993), 2.0, isect);
lineIntersect(ray, vec2(0.5299999999999999, 0.019999999999999993), vec2(0.5055971499970933, 0.004850712500726651), 2.0, isect);
lineIntersect(ray, vec2(0.5055971499970933, 0.004850712500726651), vec2(0.5199999999999999, -0.020000000000000007), 2.0, isect);
lineIntersect(ray, vec2(0.5199999999999999, -0.020000000000000007), vec2(0.49559714999709326, -0.035149287499273346), 2.0, isect);
lineIntersect(ray, vec2(0.49559714999709326, -0.035149287499273346), vec2(0.5099999999999999, -0.06000000000000001), 2.0, isect);
lineIntersect(ray, vec2(0.5099999999999999, -0.06000000000000001), vec2(0.48559714999709325, -0.07514928749927335), 2.0, isect);
lineIntersect(ray, vec2(0.48559714999709325, -0.07514928749927335), vec2(0.4999999999999999, -0.10000000000000002), 2.0, isect);
lineIntersect(ray, vec2(0.4999999999999999, -0.10000000000000002), vec2(0.47559714999709324, -0.11514928749927336), 2.0, isect);
lineIntersect(ray, vec2(0.47559714999709324, -0.11514928749927336), vec2(0.4899999999999999, -0.14), 2.0, isect);
lineIntersect(ray, vec2(0.4899999999999999, -0.14), vec2(0.46559714999709323, -0.15514928749927334), 2.0, isect);
lineIntersect(ray, vec2(0.46559714999709323, -0.15514928749927334), vec2(0.47999999999999987, -0.18), 2.0, isect);
lineIntersect(ray, vec2(0.47999999999999987, -0.18), vec2(0.4555971499970932, -0.19514928749927332), 2.0, isect);
lineIntersect(ray, vec2(0.4555971499970932, -0.19514928749927332), vec2(0.46999999999999986, -0.21999999999999997), 2.0, isect);
lineIntersect(ray, vec2(0.46999999999999986, -0.21999999999999997), vec2(0.4455971499970932, -0.2351492874992733), 2.0, isect);
lineIntersect(ray, vec2(0.4455971499970932, -0.2351492874992733), vec2(0.45999999999999985, -0.25999999999999995), 2.0, isect);
lineIntersect(ray, vec2(0.45999999999999985, -0.25999999999999995), vec2(0.4355971499970932, -0.2751492874992733), 2.0, isect);
lineIntersect(ray, vec2(0.4355971499970932, -0.2751492874992733), vec2(0.44999999999999984, -0.3), 2.0, isect);
}

vec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput, out float tMult) {
    tMult = 1.0;
    if (isect.mat == 0.0) {
        // Bounding box
        throughput = vec3(0.0);
        return sampleDiffuse(state, wiLocal);
    } else if (isect.mat == 1.0) {
        // Relay wall
throughput *= vec3(0.5);
return sampleDiffuse(state, wiLocal);
        throughput *= vec3(0.5);
        return sampleDiffuse(state, wiLocal);
    } else {
        throughput *= vec3(0.5);
return sampleDiffuse(state, wiLocal);
    }
}
