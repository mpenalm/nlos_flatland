(function (exports) {
    var LAMBDA_MIN = 360.0;
    var LAMBDA_MAX = 750.0;

    function intermediatePositions(start, end, n) {
        if (n == 1) {
            return [(start + end) / 2.0];
        } else {
            var step = (end - start) / n;
            if (n == 2) {
                return [start + step / 2, end - step / 2];
            } else {
                var result = [start + step / 2];
                var accum = result[0] + step;
                while (result.length < n) {
                    result.push(accum);
                    accum += step;
                }
                return result;
            }
        }
    }

    function linspace(start, end, n) {
        if (n == 1) {
            return [(start + end) / 2.0];
        } else if (n == 2) {
            return [start, end];
        } else {
            var step = (end - start) / (n - 1);
            var result = [start];
            var accum = start + step;
            while (result.length < n) {
                result.push(accum);
                accum += step;
            }
            return result;
        }
    }

    function nextPowerOfTwo(n) {
        // http://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2Float
        v = n - 1;
        v |= v >> 1;
        v |= v >> 2;
        v |= v >> 4;
        v |= v >> 8;
        v |= v >> 16;
        return v + 1;
    }

    var SpadData = function (pos, radius, deltaT, maxTime) {
        this.pos = pos;
        this.radius = radius;
        this.deltaT = deltaT;
        this.maxTime = maxTime;
    }

    var Renderer = function (gl, width, height, scenes, filterCanvas) {
        this.gl = gl;
        this.filterCanvas = filterCanvas;
        this.glFilter = this.filterCanvas.getContext("webgl") || this.filterCanvas.getContext("experimental-webgl");
        pgl.init(this.glFilter)
        this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
        this.quadVbo = this.createQuadVbo();
        this.quadVbo2 = this.createQuadVbo2();

        this.maxSampleCount = 100000;
        this.spreadType = tcore.Renderer.SPREAD_LASER;
        this.emissionSpectrumType = tcore.Renderer.SPECTRUM_WHITE;
        this.emitterTemperature = 5000.0;
        this.emitterGas = 0;
        this.currentScene = 0;
        this.currentSceneName = "";
        this.needsReset = true;
        this.currentCall = 0;

        // Shader programs to simulate and render the scene
        this.compositeProgram = new tgl.Shader(Shaders, "compose-vert", "compose-frag");
        this.passProgram = new tgl.Shader(Shaders, "compose-vert", "pass-frag");
        this.initProgram = new tgl.Shader(Shaders, "init-vert", "init-frag");
        this.rayProgram = new tgl.Shader(Shaders, "ray-vert", "ray-frag");
        this.hConfProgram = new tgl.Shader(Shaders, "h-conf-vert", "h-frag"); // hProgram added in setSpadPositions
        this.geometryProgram = new tgl.Shader(Shaders, "geometry-vert", "geometry-frag");
        this.rwallProgram = new tgl.Shader(Shaders, "bp-vert", "rwall-frag");
        this.tracePrograms = [];
        for (var i = 0; i < scenes.length; ++i)
            this.tracePrograms.push(new tgl.Shader(Shaders, "trace-vert", scenes[i]));

        this.maxPathLength = 12;
        this.minPathLength = 2;

        this.deltaT = 0.003;
        this.maxTime = 10; // approximate max instant we want to store
        this.numIntervals = parseInt(this.maxTime / this.deltaT + 0.05); // make sure it is an int

        this.maxTime = this.numIntervals * this.deltaT; // fix the maxTime to a value that corresponds with integer numIntervals
        this.spadRadius = 0.0035;
        this.captureMethod = "single";
        this.setSpadPos([0, -0.6]);
        this.bboxCorners = [-1.78, 1.0, 1.78, -1.0]; // upper left, bottom right
        this.isVirtualConf = true;
        this.isConvCamera = false;

        // Shader programs to reconstruct the hidden scene
        this.lapProgram = new tgl.Shader(Shaders, "bp-vert", "lap-frag");
        this.logProgram = new tgl.Shader(Shaders, "bp-vert", "log-frag");
        this.pfKernelProgram = new tgl.Shader(Shaders, "bp-vert", "pf-filter-frag");
        this.maxProgram = new tgl.Shader(Shaders, "max-vert", "max-frag");
        this.sumProgram = new tgl.Shader(Shaders, "bp-vert", "sum-frag");
        this.showProgram = new tgl.Shader(Shaders, "show-vert", "show-frag");
        this.plotProgram = new pgl.Shader(Shaders, "show-vert", "plot-frag");

        this.spectrumTable = wavelengthToRgbTable();
        this.spectrum = new tgl.Texture(this.spectrumTable.length / 4, 1, 4, true, true, true, this.spectrumTable);
        this.emission = new tgl.Texture(tcore.Renderer.SPECTRUM_SAMPLES, 1, 1, true, false, true, null);
        this.emissionIcdf = new tgl.Texture(tcore.Renderer.ICDF_SAMPLES, 1, 1, true, false, true, null);
        this.emissionPdf = new tgl.Texture(tcore.Renderer.SPECTRUM_SAMPLES, 1, 1, true, false, true, null);

        this.raySize = 512;
        this.resetActiveBlock();
        this.rayCount = this.raySize * this.raySize;
        this.currentState = 0;
        this.rayStates = [new tcore.RayState(this.raySize), new tcore.RayState(this.raySize)];

        this.createVBOs();
        this.glFilter.clearColor(0.0, 0.0, 0.0, 1.0);
        this.glFilter.blendFunc(gl.ONE, gl.ONE);

        this.createNLOSBuffers(ModifiedAttributes.All);

        this.separationWidth = 10;
        this.changeResolution(width, height);
        this.setEmitterPos([width / 2, height / 2], [width / 2, height / 2]);
        this.computeEmissionSpectrum();
        this.quadVbo3 = this.createQuadVbo3();

        // hot colormap for reconstruction (from matlab)
        var colormap = [
            0.0104, 0, 0, 1.0, 0.0208, 0, 0, 1.0, 0.0312, 0, 0, 1.0, 0.0417, 0, 0, 1.0, 0.0521, 0, 0, 1.0, 0.0625, 0, 0, 1.0, 0.0729, 0, 0, 1.0, 0.0833, 0, 0, 1.0, 0.0938, 0, 0, 1.0, 0.1042, 0, 0, 1.0, 0.1146, 0, 0, 1.0, 0.1250, 0, 0, 1.0, 0.1354, 0, 0, 1.0, 0.1458, 0, 0, 1.0, 0.1562, 0, 0, 1.0, 0.1667, 0, 0, 1.0, 0.1771, 0, 0, 1.0, 0.1875, 0, 0, 1.0, 0.1979, 0, 0, 1.0, 0.2083, 0, 0, 1.0, 0.2188, 0, 0, 1.0, 0.2292, 0, 0, 1.0, 0.2396, 0, 0, 1.0, 0.2500, 0, 0, 1.0, 0.2604, 0, 0, 1.0, 0.2708, 0, 0, 1.0, 0.2812, 0, 0, 1.0, 0.2917, 0, 0, 1.0, 0.3021, 0, 0, 1.0, 0.3125, 0, 0, 1.0, 0.3229, 0, 0, 1.0, 0.3333, 0, 0, 1.0, 0.3438, 0, 0, 1.0, 0.3542, 0, 0, 1.0, 0.3646, 0, 0, 1.0, 0.3750, 0, 0, 1.0, 0.3854, 0, 0, 1.0, 0.3958, 0, 0, 1.0, 0.4062, 0, 0, 1.0, 0.4167, 0, 0, 1.0, 0.4271, 0, 0, 1.0, 0.4375, 0, 0, 1.0, 0.4479, 0, 0, 1.0, 0.4583, 0, 0, 1.0, 0.4688, 0, 0, 1.0, 0.4792, 0, 0, 1.0, 0.4896, 0, 0, 1.0, 0.5000, 0, 0, 1.0, 0.5104, 0, 0, 1.0, 0.5208, 0, 0, 1.0, 0.5312, 0, 0, 1.0, 0.5417, 0, 0, 1.0, 0.5521, 0, 0, 1.0, 0.5625, 0, 0, 1.0, 0.5729, 0, 0, 1.0, 0.5833, 0, 0, 1.0, 0.5938, 0, 0, 1.0, 0.6042, 0, 0, 1.0, 0.6146, 0, 0, 1.0, 0.6250, 0, 0, 1.0, 0.6354, 0, 0, 1.0, 0.6458, 0, 0, 1.0, 0.6562, 0, 0, 1.0, 0.6667, 0, 0, 1.0, 0.6771, 0, 0, 1.0, 0.6875, 0, 0, 1.0, 0.6979, 0, 0, 1.0, 0.7083, 0, 0, 1.0, 0.7188, 0, 0, 1.0, 0.7292, 0, 0, 1.0, 0.7396, 0, 0, 1.0, 0.7500, 0, 0, 1.0, 0.7604, 0, 0, 1.0, 0.7708, 0, 0, 1.0, 0.7812, 0, 0, 1.0, 0.7917, 0, 0, 1.0, 0.8021, 0, 0, 1.0, 0.8125, 0, 0, 1.0, 0.8229, 0, 0, 1.0, 0.8333, 0, 0, 1.0, 0.8438, 0, 0, 1.0, 0.8542, 0, 0, 1.0, 0.8646, 0, 0, 1.0, 0.8750, 0, 0, 1.0, 0.8854, 0, 0, 1.0, 0.8958, 0, 0, 1.0, 0.9062, 0, 0, 1.0, 0.9167, 0, 0, 1.0, 0.9271, 0, 0, 1.0, 0.9375, 0, 0, 1.0, 0.9479, 0, 0, 1.0, 0.9583, 0, 0, 1.0, 0.9688, 0, 0, 1.0, 0.9792, 0, 0, 1.0, 0.9896, 0, 0, 1.0, 1.0000, 0, 0, 1.0, 1.0000, 0.0104, 0, 1.0, 1.0000, 0.0208, 0, 1.0, 1.0000, 0.0312, 0, 1.0, 1.0000, 0.0417, 0, 1.0, 1.0000, 0.0521, 0, 1.0, 1.0000, 0.0625, 0, 1.0, 1.0000, 0.0729, 0, 1.0, 1.0000, 0.0833, 0, 1.0, 1.0000, 0.0938, 0, 1.0, 1.0000, 0.1042, 0, 1.0, 1.0000, 0.1146, 0, 1.0, 1.0000, 0.1250, 0, 1.0, 1.0000, 0.1354, 0, 1.0, 1.0000, 0.1458, 0, 1.0, 1.0000, 0.1562, 0, 1.0, 1.0000, 0.1667, 0, 1.0, 1.0000, 0.1771, 0, 1.0, 1.0000, 0.1875, 0, 1.0, 1.0000, 0.1979, 0, 1.0, 1.0000, 0.2083, 0, 1.0, 1.0000, 0.2188, 0, 1.0, 1.0000, 0.2292, 0, 1.0, 1.0000, 0.2396, 0, 1.0, 1.0000, 0.2500, 0, 1.0, 1.0000, 0.2604, 0, 1.0, 1.0000, 0.2708, 0, 1.0, 1.0000, 0.2812, 0, 1.0, 1.0000, 0.2917, 0, 1.0, 1.0000, 0.3021, 0, 1.0, 1.0000, 0.3125, 0, 1.0, 1.0000, 0.3229, 0, 1.0, 1.0000, 0.3333, 0, 1.0, 1.0000, 0.3438, 0, 1.0, 1.0000, 0.3542, 0, 1.0, 1.0000, 0.3646, 0, 1.0, 1.0000, 0.3750, 0, 1.0, 1.0000, 0.3854, 0, 1.0, 1.0000, 0.3958, 0, 1.0, 1.0000, 0.4062, 0, 1.0, 1.0000, 0.4167, 0, 1.0, 1.0000, 0.4271, 0, 1.0, 1.0000, 0.4375, 0, 1.0, 1.0000, 0.4479, 0, 1.0, 1.0000, 0.4583, 0, 1.0, 1.0000, 0.4688, 0, 1.0, 1.0000, 0.4792, 0, 1.0, 1.0000, 0.4896, 0, 1.0, 1.0000, 0.5000, 0, 1.0, 1.0000, 0.5104, 0, 1.0, 1.0000, 0.5208, 0, 1.0, 1.0000, 0.5312, 0, 1.0, 1.0000, 0.5417, 0, 1.0, 1.0000, 0.5521, 0, 1.0, 1.0000, 0.5625, 0, 1.0, 1.0000, 0.5729, 0, 1.0, 1.0000, 0.5833, 0, 1.0, 1.0000, 0.5938, 0, 1.0, 1.0000, 0.6042, 0, 1.0, 1.0000, 0.6146, 0, 1.0, 1.0000, 0.6250, 0, 1.0, 1.0000, 0.6354, 0, 1.0, 1.0000, 0.6458, 0, 1.0, 1.0000, 0.6562, 0, 1.0, 1.0000, 0.6667, 0, 1.0, 1.0000, 0.6771, 0, 1.0, 1.0000, 0.6875, 0, 1.0, 1.0000, 0.6979, 0, 1.0, 1.0000, 0.7083, 0, 1.0, 1.0000, 0.7188, 0, 1.0, 1.0000, 0.7292, 0, 1.0, 1.0000, 0.7396, 0, 1.0, 1.0000, 0.7500, 0, 1.0, 1.0000, 0.7604, 0, 1.0, 1.0000, 0.7708, 0, 1.0, 1.0000, 0.7812, 0, 1.0, 1.0000, 0.7917, 0, 1.0, 1.0000, 0.8021, 0, 1.0, 1.0000, 0.8125, 0, 1.0, 1.0000, 0.8229, 0, 1.0, 1.0000, 0.8333, 0, 1.0, 1.0000, 0.8438, 0, 1.0, 1.0000, 0.8542, 0, 1.0, 1.0000, 0.8646, 0, 1.0, 1.0000, 0.8750, 0, 1.0, 1.0000, 0.8854, 0, 1.0, 1.0000, 0.8958, 0, 1.0, 1.0000, 0.9062, 0, 1.0, 1.0000, 0.9167, 0, 1.0, 1.0000, 0.9271, 0, 1.0, 1.0000, 0.9375, 0, 1.0, 1.0000, 0.9479, 0, 1.0, 1.0000, 0.9583, 0, 1.0, 1.0000, 0.9688, 0, 1.0, 1.0000, 0.9792, 0, 1.0, 1.0000, 0.9896, 0, 1.0, 1.0000, 1.0000, 0, 1.0, 1.0000, 1.0000, 0.0156, 1.0, 1.0000, 1.0000, 0.0312, 1.0, 1.0000, 1.0000, 0.0469, 1.0, 1.0000, 1.0000, 0.0625, 1.0, 1.0000, 1.0000, 0.0781, 1.0, 1.0000, 1.0000, 0.0938, 1.0, 1.0000, 1.0000, 0.1094, 1.0, 1.0000, 1.0000, 0.1250, 1.0, 1.0000, 1.0000, 0.1406, 1.0, 1.0000, 1.0000, 0.1562, 1.0, 1.0000, 1.0000, 0.1719, 1.0, 1.0000, 1.0000, 0.1875, 1.0, 1.0000, 1.0000, 0.2031, 1.0, 1.0000, 1.0000, 0.2188, 1.0, 1.0000, 1.0000, 0.2344, 1.0, 1.0000, 1.0000, 0.2500, 1.0, 1.0000, 1.0000, 0.2656, 1.0, 1.0000, 1.0000, 0.2812, 1.0, 1.0000, 1.0000, 0.2969, 1.0, 1.0000, 1.0000, 0.3125, 1.0, 1.0000, 1.0000, 0.3281, 1.0, 1.0000, 1.0000, 0.3438, 1.0, 1.0000, 1.0000, 0.3594, 1.0, 1.0000, 1.0000, 0.3750, 1.0, 1.0000, 1.0000, 0.3906, 1.0, 1.0000, 1.0000, 0.4062, 1.0, 1.0000, 1.0000, 0.4219, 1.0, 1.0000, 1.0000, 0.4375, 1.0, 1.0000, 1.0000, 0.4531, 1.0, 1.0000, 1.0000, 0.4688, 1.0, 1.0000, 1.0000, 0.4844, 1.0, 1.0000, 1.0000, 0.5000, 1.0, 1.0000, 1.0000, 0.5156, 1.0, 1.0000, 1.0000, 0.5312, 1.0, 1.0000, 1.0000, 0.5469, 1.0, 1.0000, 1.0000, 0.5625, 1.0, 1.0000, 1.0000, 0.5781, 1.0, 1.0000, 1.0000, 0.5938, 1.0, 1.0000, 1.0000, 0.6094, 1.0, 1.0000, 1.0000, 0.6250, 1.0, 1.0000, 1.0000, 0.6406, 1.0, 1.0000, 1.0000, 0.6562, 1.0, 1.0000, 1.0000, 0.6719, 1.0, 1.0000, 1.0000, 0.6875, 1.0, 1.0000, 1.0000, 0.7031, 1.0, 1.0000, 1.0000, 0.7188, 1.0, 1.0000, 1.0000, 0.7344, 1.0, 1.0000, 1.0000, 0.7500, 1.0, 1.0000, 1.0000, 0.7656, 1.0, 1.0000, 1.0000, 0.7812, 1.0, 1.0000, 1.0000, 0.7969, 1.0, 1.0000, 1.0000, 0.8125, 1.0, 1.0000, 1.0000, 0.8281, 1.0, 1.0000, 1.0000, 0.8438, 1.0, 1.0000, 1.0000, 0.8594, 1.0, 1.0000, 1.0000, 0.8750, 1.0, 1.0000, 1.0000, 0.8906, 1.0, 1.0000, 1.0000, 0.9062, 1.0, 1.0000, 1.0000, 0.9219, 1.0, 1.0000, 1.0000, 0.9375, 1.0, 1.0000, 1.0000, 0.9531, 1.0, 1.0000, 1.0000, 0.9688, 1.0, 1.0000, 1.0000, 0.9844, 1.0, 1.0000, 1.0000, 1.0000, 1.0
        ];
        this.colormapHot = new Float32Array(colormap);
        this.colormapHotTex = new tgl.Texture(colormap.length / 4, 1, 4, true, false, true, this.colormapHot);
        // seismic colormap for phase (from python matplotlib)
        colormap = [
            0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.31098039215686274, 1.0, 0.0, 0.0, 0.3219607843137255, 1.0, 0.0, 0.0, 0.33294117647058824, 1.0, 0.0, 0.0, 0.34392156862745094, 1.0, 0.0, 0.0, 0.3549019607843137, 1.0, 0.0, 0.0, 0.36588235294117644, 1.0, 0.0, 0.0, 0.3768627450980392, 1.0, 0.0, 0.0, 0.38784313725490194, 1.0, 0.0, 0.0, 0.3988235294117647, 1.0, 0.0, 0.0, 0.40980392156862744, 1.0, 0.0, 0.0, 0.4207843137254902, 1.0, 0.0, 0.0, 0.43176470588235294, 1.0, 0.0, 0.0, 0.4427450980392157, 1.0, 0.0, 0.0, 0.45372549019607844, 1.0, 0.0, 0.0, 0.4647058823529412, 1.0, 0.0, 0.0, 0.4756862745098039, 1.0, 0.0, 0.0, 0.48666666666666664, 1.0, 0.0, 0.0, 0.4976470588235294, 1.0, 0.0, 0.0, 0.5086274509803921, 1.0, 0.0, 0.0, 0.5196078431372548, 1.0, 0.0, 0.0, 0.5305882352941176, 1.0, 0.0, 0.0, 0.5415686274509803, 1.0, 0.0, 0.0, 0.5525490196078431, 1.0, 0.0, 0.0, 0.5635294117647058, 1.0, 0.0, 0.0, 0.5745098039215686, 1.0, 0.0, 0.0, 0.5854901960784313, 1.0, 0.0, 0.0, 0.5964705882352941, 1.0, 0.0, 0.0, 0.6074509803921568, 1.0, 0.0, 0.0, 0.6184313725490196, 1.0, 0.0, 0.0, 0.6294117647058823, 1.0, 0.0, 0.0, 0.6403921568627451, 1.0, 0.0, 0.0, 0.6513725490196078, 1.0, 0.0, 0.0, 0.6623529411764706, 1.0, 0.0, 0.0, 0.6733333333333333, 1.0, 0.0, 0.0, 0.6843137254901961, 1.0, 0.0, 0.0, 0.6952941176470588, 1.0, 0.0, 0.0, 0.7062745098039215, 1.0, 0.0, 0.0, 0.7172549019607843, 1.0, 0.0, 0.0, 0.7282352941176471, 1.0, 0.0, 0.0, 0.7392156862745097, 1.0, 0.0, 0.0, 0.7501960784313725, 1.0, 0.0, 0.0, 0.7611764705882352, 1.0, 0.0, 0.0, 0.7721568627450981, 1.0, 0.0, 0.0, 0.7831372549019607, 1.0, 0.0, 0.0, 0.7941176470588234, 1.0, 0.0, 0.0, 0.8050980392156861, 1.0, 0.0, 0.0, 0.8160784313725491, 1.0, 0.0, 0.0, 0.8270588235294116, 1.0, 0.0, 0.0, 0.8380392156862744, 1.0, 0.0, 0.0, 0.8490196078431371, 1.0, 0.0, 0.0, 0.8599999999999999, 1.0, 0.0, 0.0, 0.8709803921568626, 1.0, 0.0, 0.0, 0.8819607843137254, 1.0, 0.0, 0.0, 0.8929411764705881, 1.0, 0.0, 0.0, 0.9039215686274509, 1.0, 0.0, 0.0, 0.9149019607843136, 1.0, 0.0, 0.0, 0.9258823529411764, 1.0, 0.0, 0.0, 0.9368627450980391, 1.0, 0.0, 0.0, 0.9478431372549019, 1.0, 0.0, 0.0, 0.9588235294117646, 1.0, 0.0, 0.0, 0.9698039215686274, 1.0, 0.0, 0.0, 0.9807843137254901, 1.0, 0.0, 0.0, 0.9917647058823529, 1.0, 0.00392156862745098, 0.00392156862745098, 1.0, 1.0, 0.0196078431372549, 0.0196078431372549, 1.0, 1.0, 0.0352941176470586, 0.0352941176470586, 1.0, 1.0, 0.050980392156862744, 0.050980392156862744, 1.0, 1.0, 0.06666666666666667, 0.06666666666666667, 1.0, 1.0, 0.08235294117647059, 0.08235294117647059, 1.0, 1.0, 0.09803921568627451, 0.09803921568627451, 1.0, 1.0, 0.11372549019607843, 0.11372549019607843, 1.0, 1.0, 0.12941176470588237, 0.12941176470588237, 1.0, 1.0, 0.1450980392156863, 0.1450980392156863, 1.0, 1.0, 0.16078431372548999, 0.16078431372548999, 1.0, 1.0, 0.17647058823529413, 0.17647058823529413, 1.0, 1.0, 0.19215686274509805, 0.19215686274509805, 1.0, 1.0, 0.20784313725490197, 0.20784313725490197, 1.0, 1.0, 0.2235294117647059, 0.2235294117647059, 1.0, 1.0, 0.23921568627450981, 0.23921568627450981, 1.0, 1.0, 0.2549019607843137, 0.2549019607843137, 1.0, 1.0, 0.27058823529411763, 0.27058823529411763, 1.0, 1.0, 0.28627450980392133, 0.28627450980392133, 1.0, 1.0, 0.30196078431372547, 0.30196078431372547, 1.0, 1.0, 0.3176470588235294, 0.3176470588235294, 1.0, 1.0, 0.3333333333333333, 0.3333333333333333, 1.0, 1.0, 0.34901960784313724, 0.34901960784313724, 1.0, 1.0, 0.36470588235294116, 0.36470588235294116, 1.0, 1.0, 0.3803921568627451, 0.3803921568627451, 1.0, 1.0, 0.396078431372549, 0.396078431372549, 1.0, 1.0, 0.4117647058823527, 0.4117647058823527, 1.0, 1.0, 0.42745098039215684, 0.42745098039215684, 1.0, 1.0, 0.44313725490196076, 0.44313725490196076, 1.0, 1.0, 0.4588235294117647, 0.4588235294117647, 1.0, 1.0, 0.4745098039215686, 0.4745098039215686, 1.0, 1.0, 0.49019607843137253, 0.49019607843137253, 1.0, 1.0, 0.5058823529411764, 0.5058823529411764, 1.0, 1.0, 0.5215686274509804, 0.5215686274509804, 1.0, 1.0, 0.5372549019607841, 0.5372549019607841, 1.0, 1.0, 0.5529411764705883, 0.5529411764705883, 1.0, 1.0, 0.5686274509803921, 0.5686274509803921, 1.0, 1.0, 0.5843137254901961, 0.5843137254901961, 1.0, 1.0, 0.6, 0.6, 1.0, 1.0, 0.615686274509804, 0.615686274509804, 1.0, 1.0, 0.6313725490196078, 0.6313725490196078, 1.0, 1.0, 0.6470588235294118, 0.6470588235294118, 1.0, 1.0, 0.6627450980392154, 0.6627450980392154, 1.0, 1.0, 0.6784313725490196, 0.6784313725490196, 1.0, 1.0, 0.6941176470588235, 0.6941176470588235, 1.0, 1.0, 0.7098039215686275, 0.7098039215686275, 1.0, 1.0, 0.7254901960784313, 0.7254901960784313, 1.0, 1.0, 0.7411764705882353, 0.7411764705882353, 1.0, 1.0, 0.7568627450980392, 0.7568627450980392, 1.0, 1.0, 0.7725490196078432, 0.7725490196078432, 1.0, 1.0, 0.7882352941176468, 0.7882352941176468, 1.0, 1.0, 0.803921568627451, 0.803921568627451, 1.0, 1.0, 0.8196078431372549, 0.8196078431372549, 1.0, 1.0, 0.8352941176470589, 0.8352941176470589, 1.0, 1.0, 0.8509803921568627, 0.8509803921568627, 1.0, 1.0, 0.8666666666666667, 0.8666666666666667, 1.0, 1.0, 0.8823529411764706, 0.8823529411764706, 1.0, 1.0, 0.8980392156862745, 0.8980392156862745, 1.0, 1.0, 0.9137254901960782, 0.9137254901960782, 1.0, 1.0, 0.9294117647058824, 0.9294117647058824, 1.0, 1.0, 0.9450980392156862, 0.9450980392156862, 1.0, 1.0, 0.9607843137254902, 0.9607843137254902, 1.0, 1.0, 0.9764705882352941, 0.9764705882352941, 1.0, 1.0, 0.9921568627450981, 0.9921568627450981, 1.0, 1.0, 1.0, 0.9921568627450981, 0.9921568627450981, 1.0, 1.0, 0.9764705882352941, 0.9764705882352941, 1.0, 1.0, 0.9607843137254902, 0.9607843137254902, 1.0, 1.0, 0.9450980392156862, 0.9450980392156862, 1.0, 1.0, 0.9294117647058828, 0.9294117647058828, 1.0, 1.0, 0.9137254901960784, 0.9137254901960784, 1.0, 1.0, 0.8980392156862745, 0.8980392156862745, 1.0, 1.0, 0.8823529411764706, 0.8823529411764706, 1.0, 1.0, 0.8666666666666667, 0.8666666666666667, 1.0, 1.0, 0.8509803921568627, 0.8509803921568627, 1.0, 1.0, 0.8352941176470589, 0.8352941176470589, 1.0, 1.0, 0.8196078431372549, 0.8196078431372549, 1.0, 1.0, 0.803921568627451, 0.803921568627451, 1.0, 1.0, 0.788235294117647, 0.788235294117647, 1.0, 1.0, 0.7725490196078432, 0.7725490196078432, 1.0, 1.0, 0.7568627450980392, 0.7568627450980392, 1.0, 1.0, 0.7411764705882353, 0.7411764705882353, 1.0, 1.0, 0.7254901960784313, 0.7254901960784313, 1.0, 1.0, 0.7098039215686274, 0.7098039215686274, 1.0, 1.0, 0.6941176470588235, 0.6941176470588235, 1.0, 1.0, 0.6784313725490201, 0.6784313725490201, 1.0, 1.0, 0.6627450980392157, 0.6627450980392157, 1.0, 1.0, 0.6470588235294117, 0.6470588235294117, 1.0, 1.0, 0.6313725490196078, 0.6313725490196078, 1.0, 1.0, 0.615686274509804, 0.615686274509804, 1.0, 1.0, 0.6, 0.6, 1.0, 1.0, 0.584313725490196, 0.584313725490196, 1.0, 1.0, 0.5686274509803921, 0.5686274509803921, 1.0, 1.0, 0.5529411764705883, 0.5529411764705883, 1.0, 1.0, 0.5372549019607843, 0.5372549019607843, 1.0, 1.0, 0.5215686274509803, 0.5215686274509803, 1.0, 1.0, 0.5058823529411764, 0.5058823529411764, 1.0, 1.0, 0.4901960784313726, 0.4901960784313726, 1.0, 1.0, 0.4745098039215686, 0.4745098039215686, 1.0, 1.0, 0.45882352941176474, 0.45882352941176474, 1.0, 1.0, 0.44313725490196076, 0.44313725490196076, 1.0, 1.0, 0.42745098039215734, 0.42745098039215734, 1.0, 1.0, 0.4117647058823529, 0.4117647058823529, 1.0, 1.0, 0.39607843137254906, 0.39607843137254906, 1.0, 1.0, 0.3803921568627451, 0.3803921568627451, 1.0, 1.0, 0.3647058823529412, 0.3647058823529412, 1.0, 1.0, 0.34901960784313724, 0.34901960784313724, 1.0, 1.0, 0.33333333333333337, 0.33333333333333337, 1.0, 1.0, 0.3176470588235294, 0.3176470588235294, 1.0, 1.0, 0.3019607843137255, 0.3019607843137255, 1.0, 1.0, 0.28627450980392155, 0.28627450980392155, 1.0, 1.0, 0.2705882352941177, 0.2705882352941177, 1.0, 1.0, 0.2549019607843137, 0.2549019607843137, 1.0, 1.0, 0.23921568627450984, 0.23921568627450984, 1.0, 1.0, 0.22352941176470587, 0.22352941176470587, 1.0, 1.0, 0.207843137254902, 0.207843137254902, 1.0, 1.0, 0.19215686274509802, 0.19215686274509802, 1.0, 1.0, 0.1764705882352946, 0.1764705882352946, 1.0, 1.0, 0.16078431372549018, 0.16078431372549018, 1.0, 1.0, 0.14509803921568631, 0.14509803921568631, 1.0, 1.0, 0.12941176470588234, 0.12941176470588234, 1.0, 1.0, 0.11372549019607847, 0.11372549019607847, 1.0, 1.0, 0.0980392156862745, 0.0980392156862745, 1.0, 1.0, 0.08235294117647063, 0.08235294117647063, 1.0, 1.0, 0.06666666666666665, 0.06666666666666665, 1.0, 1.0, 0.050980392156862786, 0.050980392156862786, 1.0, 1.0, 0.03529411764705881, 0.03529411764705881, 1.0, 1.0, 0.019607843137254943, 0.019607843137254943, 1.0, 1.0, 0.0039215686274509665, 0.0039215686274509665, 1.0, 0.9941176470588236, 0.0, 0.0, 1.0, 0.9862745098039216, 0.0, 0.0, 1.0, 0.9784313725490196, 0.0, 0.0, 1.0, 0.9705882352941176, 0.0, 0.0, 1.0, 0.9627450980392159, 0.0, 0.0, 1.0, 0.9549019607843138, 0.0, 0.0, 1.0, 0.9470588235294117, 0.0, 0.0, 1.0, 0.9392156862745098, 0.0, 0.0, 1.0, 0.9313725490196079, 0.0, 0.0, 1.0, 0.9235294117647059, 0.0, 0.0, 1.0, 0.9156862745098039, 0.0, 0.0, 1.0, 0.907843137254902, 0.0, 0.0, 1.0, 0.9, 0.0, 0.0, 1.0, 0.892156862745098, 0.0, 0.0, 1.0, 0.884313725490196, 0.0, 0.0, 1.0, 0.8764705882352941, 0.0, 0.0, 1.0, 0.8686274509803922, 0.0, 0.0, 1.0, 0.8607843137254902, 0.0, 0.0, 1.0, 0.8529411764705882, 0.0, 0.0, 1.0, 0.8450980392156863, 0.0, 0.0, 1.0, 0.8372549019607846, 0.0, 0.0, 1.0, 0.8294117647058823, 0.0, 0.0, 1.0, 0.8215686274509804, 0.0, 0.0, 1.0, 0.8137254901960784, 0.0, 0.0, 1.0, 0.8058823529411765, 0.0, 0.0, 1.0, 0.7980392156862746, 0.0, 0.0, 1.0, 0.7901960784313725, 0.0, 0.0, 1.0, 0.7823529411764706, 0.0, 0.0, 1.0, 0.7745098039215687, 0.0, 0.0, 1.0, 0.7666666666666666, 0.0, 0.0, 1.0, 0.7588235294117647, 0.0, 0.0, 1.0, 0.7509803921568627, 0.0, 0.0, 1.0, 0.7431372549019608, 0.0, 0.0, 1.0, 0.7352941176470589, 0.0, 0.0, 1.0, 0.7274509803921569, 0.0, 0.0, 1.0, 0.7196078431372549, 0.0, 0.0, 1.0, 0.7117647058823532, 0.0, 0.0, 1.0, 0.7039215686274509, 0.0, 0.0, 1.0, 0.696078431372549, 0.0, 0.0, 1.0, 0.6882352941176471, 0.0, 0.0, 1.0, 0.6803921568627451, 0.0, 0.0, 1.0, 0.6725490196078432, 0.0, 0.0, 1.0, 0.6647058823529413, 0.0, 0.0, 1.0, 0.6568627450980392, 0.0, 0.0, 1.0, 0.6490196078431373, 0.0, 0.0, 1.0, 0.6411764705882352, 0.0, 0.0, 1.0, 0.6333333333333333, 0.0, 0.0, 1.0, 0.6254901960784314, 0.0, 0.0, 1.0, 0.6176470588235294, 0.0, 0.0, 1.0, 0.6098039215686275, 0.0, 0.0, 1.0, 0.6019607843137256, 0.0, 0.0, 1.0, 0.5941176470588235, 0.0, 0.0, 1.0, 0.5862745098039218, 0.0, 0.0, 1.0, 0.5784313725490196, 0.0, 0.0, 1.0, 0.5705882352941176, 0.0, 0.0, 1.0, 0.5627450980392157, 0.0, 0.0, 1.0, 0.5549019607843138, 0.0, 0.0, 1.0, 0.5470588235294118, 0.0, 0.0, 1.0, 0.5392156862745099, 0.0, 0.0, 1.0, 0.5313725490196078, 0.0, 0.0, 1.0, 0.5235294117647059, 0.0, 0.0, 1.0, 0.5156862745098039, 0.0, 0.0, 1.0, 0.5078431372549019, 0.0, 0.0, 1.0, 0.5, 0.0, 0.0, 1.0
        ];
        this.colormapSeismic = new Float32Array(colormap);
        this.colormapSeismicTex = new tgl.Texture(colormap.length / 4, 1, 4, true, false, true, this.colormapSeismic);

        // Laplacian filter
        this.lapKernel = new Float32Array(9);
        this.lapKernel[0] = this.lapKernel[1] = this.lapKernel[2] = this.lapKernel[3] = -1.0;
        this.lapKernel[4] = 8.0;
        this.lapKernel[5] = this.lapKernel[6] = this.lapKernel[7] = this.lapKernel[8] = -1.0;

        // LoG filter
        var dim = 45;
        // var logKernel = [
        // 6.93859534369387e-10, 6.95161307407246e-10, 6.98479384160607e-10, 7.06511386476401e-10, 7.24974003325432e-10, 7.65267106158951e-10, 8.48742570013430e-10, 1.01287031941811e-09, 1.31905212676454e-09, 1.86079730785587e-09, 2.76950476384493e-09, 4.21358788977445e-09, 6.38591807167264e-09, 9.47555303272212e-09, 1.36232195872986e-08, 1.88659213046240e-08, 2.50828745322092e-08, 3.19600285887441e-08, 3.89906488916959e-08, 4.55229473316947e-08, 5.08531891127888e-08, 5.43477017991462e-08, 5.55652721178737e-08, 5.43477017991462e-08, 5.08531891127888e-08, 4.55229473316947e-08, 3.89906488916959e-08, 3.19600285887441e-08, 2.50828745322092e-08, 1.88659213046240e-08, 1.36232195872986e-08, 9.47555303272212e-09, 6.38591807167264e-09, 4.21358788977445e-09, 2.76950476384493e-09, 1.86079730785587e-09, 1.31905212676454e-09, 1.01287031941811e-09, 8.48742570013430e-10, 7.65267106158951e-10, 7.24974003325432e-10, 7.06511386476401e-10, 6.98479384160607e-10, 6.95161307407246e-10, 6.93859534369387e-10, 6.95161307407246e-10, 6.98737397699556e-10, 7.07828138471761e-10, 7.29772000047663e-10, 7.80063578263050e-10, 8.89480015348196e-10, 1.11542338335337e-09, 1.55816904933725e-09, 2.38122892523348e-09, 3.83228069763623e-09, 6.25729514887803e-09, 1.00967088601294e-08, 1.58508146828878e-08, 2.40045259469479e-08, 3.49110986268380e-08, 4.86496930458638e-08, 6.48888087751350e-08, 8.27996516564894e-08, 1.01062914377729e-07, 1.17995055836862e-07, 1.31788202857858e-07, 1.40820624538199e-07, 1.43965897210943e-07, 1.40820624538199e-07, 1.31788202857858e-07, 1.17995055836862e-07, 1.01062914377729e-07, 8.27996516564894e-08, 6.48888087751350e-08, 4.86496930458638e-08, 3.49110986268380e-08, 2.40045259469479e-08, 1.58508146828878e-08, 1.00967088601294e-08, 6.25729514887803e-09, 3.83228069763623e-09, 2.38122892523348e-09, 1.55816904933725e-09, 1.11542338335337e-09, 8.89480015348196e-10, 7.80063578263050e-10, 7.29772000047663e-10, 7.07828138471761e-10, 6.98737397699556e-10, 6.95161307407246e-10, 6.98479384160607e-10, 7.07828138471761e-10, 7.31526334533303e-10, 7.88559232542339e-10, 9.18854316108359e-10, 1.20138077063464e-09, 1.78273935739558e-09, 2.91773292876697e-09, 5.01955733629269e-09, 8.71028936010607e-09, 1.48529677550972e-08, 2.45376567211366e-08, 3.89906488916959e-08, 5.93844896659077e-08, 8.65506121184782e-08, 1.20633840882933e-07, 1.60768392527646e-07, 2.04881316326130e-07, 2.49724523044566e-07, 2.91192299679587e-07, 3.24904635488620e-07, 3.46950670044095e-07, 3.54622159971847e-07, 3.46950670044095e-07, 3.24904635488620e-07, 2.91192299679587e-07, 2.49724523044566e-07, 2.04881316326130e-07, 1.60768392527646e-07, 1.20633840882933e-07, 8.65506121184782e-08, 5.93844896659077e-08, 3.89906488916959e-08, 2.45376567211366e-08, 1.48529677550972e-08, 8.71028936010607e-09, 5.01955733629269e-09, 2.91773292876697e-09, 1.78273935739558e-09, 1.20138077063464e-09, 9.18854316108359e-10, 7.88559232542339e-10, 7.31526334533303e-10, 7.07828138471761e-10, 6.98479384160607e-10, 7.06511386476401e-10, 7.29772000047663e-10, 7.88559232542339e-10, 9.29587617665334e-10, 1.25068166668281e-09, 1.94441713363734e-09, 3.36647022652934e-09, 6.13155998481251e-09, 1.12303450288689e-08, 2.01439573859886e-08, 3.49110986268380e-08, 5.80830531773184e-08, 9.24969386023430e-08, 1.40820624538199e-07, 2.04881316326130e-07, 2.84876411646176e-07, 3.78653954558926e-07, 4.81302057799405e-07, 5.85266109870174e-07, 6.81105707287417e-07, 7.58831048414707e-07, 8.09573799155140e-07, 8.27215921702499e-07, 8.09573799155140e-07, 7.58831048414707e-07, 6.81105707287417e-07, 5.85266109870174e-07, 4.81302057799405e-07, 3.78653954558926e-07, 2.84876411646176e-07, 2.04881316326130e-07, 1.40820624538199e-07, 9.24969386023430e-08, 5.80830531773184e-08, 3.49110986268380e-08, 2.01439573859886e-08, 1.12303450288689e-08, 6.13155998481251e-09, 3.36647022652934e-09, 1.94441713363734e-09, 1.25068166668281e-09, 9.29587617665334e-10, 7.88559232542339e-10, 7.29772000047663e-10, 7.06511386476401e-10, 7.24974003325432e-10, 7.80063578263050e-10, 9.18854316108359e-10, 1.25068166668281e-09, 2.00344697737242e-09, 3.62350941634546e-09, 6.93062591263766e-09, 1.33327237474646e-08, 2.50828745322092e-08, 4.55229473316947e-08, 7.92108291995698e-08, 1.31788202857858e-07, 2.09441434532649e-07, 3.17867597522997e-07, 4.60792829571097e-07, 6.38278879150148e-07, 8.45234606585766e-07, 1.07063902357280e-06, 1.29791230698978e-06, 1.50662612326427e-06, 1.67538236989635e-06, 1.78532487292143e-06, 1.82350868732049e-06, 1.78532487292143e-06, 1.67538236989635e-06, 1.50662612326427e-06, 1.29791230698978e-06, 1.07063902357280e-06, 8.45234606585766e-07, 6.38278879150148e-07, 4.60792829571097e-07, 3.17867597522997e-07, 2.09441434532649e-07, 1.31788202857858e-07, 7.92108291995698e-08, 4.55229473316947e-08, 2.50828745322092e-08, 1.33327237474646e-08, 6.93062591263766e-09, 3.62350941634546e-09, 2.00344697737242e-09, 1.25068166668281e-09, 9.18854316108359e-10, 7.80063578263050e-10, 7.24974003325432e-10, 7.65267106158951e-10, 8.89480015348196e-10, 1.20138077063464e-09, 1.94441713363734e-09, 3.62350941634546e-09, 7.22208942482029e-09, 1.45350598653710e-08, 2.86236210918466e-08, 5.43477017991462e-08, 9.88500999733794e-08, 1.71768449431056e-07, 2.84876411646176e-07, 4.50863184752836e-07, 6.81105707287417e-07, 9.82584373492198e-07, 1.35447952365092e-06, 1.78532487292143e-06, 2.25171751613426e-06, 2.71937524908502e-06, 3.14679826715717e-06, 3.49108335567331e-06, 3.71478902779988e-06, 3.79237835875793e-06, 3.71478902779988e-06, 3.49108335567331e-06, 3.14679826715717e-06, 2.71937524908502e-06, 2.25171751613426e-06, 1.78532487292143e-06, 1.35447952365092e-06, 9.82584373492198e-07, 6.81105707287417e-07, 4.50863184752836e-07, 2.84876411646176e-07, 1.71768449431056e-07, 9.88500999733794e-08, 5.43477017991462e-08, 2.86236210918466e-08, 1.45350598653710e-08, 7.22208942482029e-09, 3.62350941634546e-09, 1.94441713363734e-09, 1.20138077063464e-09, 8.89480015348196e-10, 7.65267106158951e-10, 8.48742570013430e-10, 1.11542338335337e-09, 1.78273935739558e-09, 3.36647022652934e-09, 6.93062591263766e-09, 1.45350598653710e-08, 2.99135823201005e-08, 5.93844896659077e-08, 1.12888370228736e-07, 2.04881316326130e-07, 3.54622159971847e-07, 5.85266109870174e-07, 9.21233347070692e-07, 1.38365814265074e-06, 1.98434181133911e-06, 2.71937524908502e-06, 3.56416973011514e-06, 4.47172256295234e-06, 5.37538199596193e-06, 6.19627246368329e-06, 6.85426078796954e-06, 7.28033546919081e-06, 7.42785239064459e-06, 7.28033546919081e-06, 6.85426078796954e-06, 6.19627246368329e-06, 5.37538199596193e-06, 4.47172256295234e-06, 3.56416973011514e-06, 2.71937524908502e-06, 1.98434181133911e-06, 1.38365814265074e-06, 9.21233347070692e-07, 5.85266109870174e-07, 3.54622159971847e-07, 2.04881316326130e-07, 1.12888370228736e-07, 5.93844896659077e-08, 2.99135823201005e-08, 1.45350598653710e-08, 6.93062591263766e-09, 3.36647022652934e-09, 1.78273935739558e-09, 1.11542338335337e-09, 8.48742570013430e-10, 1.01287031941811e-09, 1.55816904933725e-09, 2.91773292876697e-09, 6.13155998481251e-09, 1.33327237474646e-08, 2.86236210918466e-08, 5.93844896659077e-08, 1.17995055836862e-07, 2.23732850786383e-07, 4.04288926318536e-07, 6.95998539972188e-07, 1.14169885732707e-06, 1.78532487292143e-06, 2.66309714351008e-06, 3.79237835875793e-06, 5.16060848031975e-06, 6.71757102075987e-06, 8.37404636787507e-06, 1.00085168578969e-05, 1.14814226042962e-05, 1.26543621795561e-05, 1.34103909866892e-05, 1.36715195691405e-05, 1.34103909866892e-05, 1.26543621795561e-05, 1.14814226042962e-05, 1.00085168578969e-05, 8.37404636787507e-06, 6.71757102075987e-06, 5.16060848031975e-06, 3.79237835875793e-06, 2.66309714351008e-06, 1.78532487292143e-06, 1.14169885732707e-06, 6.95998539972188e-07, 4.04288926318536e-07, 2.23732850786383e-07, 1.17995055836862e-07, 5.93844896659077e-08, 2.86236210918466e-08, 1.33327237474646e-08, 6.13155998481251e-09, 2.91773292876697e-09, 1.55816904933725e-09, 1.01287031941811e-09, 1.31905212676454e-09, 2.38122892523348e-09, 5.01955733629269e-09, 1.12303450288689e-08, 2.50828745322092e-08, 5.43477017991462e-08, 1.12888370228736e-07, 2.23732850786383e-07, 4.22320880156400e-07, 7.58831048414707e-07, 1.29791230698978e-06, 2.11392933729923e-06, 3.28038878219203e-06, 4.85376670480531e-06, 6.85426078796954e-06, 9.24821358281408e-06, 1.19379333532568e-05, 1.47634982776905e-05, 1.75179335520721e-05, 1.99731141473789e-05, 2.19106791379053e-05, 2.31514778429911e-05, 2.35785913357379e-05, 2.31514778429911e-05, 2.19106791379053e-05, 1.99731141473789e-05, 1.75179335520721e-05, 1.47634982776905e-05, 1.19379333532568e-05, 9.24821358281408e-06, 6.85426078796954e-06, 4.85376670480531e-06, 3.28038878219203e-06, 2.11392933729923e-06, 1.29791230698978e-06, 7.58831048414707e-07, 4.22320880156400e-07, 2.23732850786383e-07, 1.12888370228736e-07, 5.43477017991462e-08, 2.50828745322092e-08, 1.12303450288689e-08, 5.01955733629269e-09, 2.38122892523348e-09, 1.31905212676454e-09, 1.86079730785587e-09, 3.83228069763623e-09, 8.71028936010607e-09, 2.01439573859886e-08, 4.55229473316947e-08, 9.88500999733794e-08, 2.04881316326130e-07, 4.04288926318536e-07, 7.58831048414707e-07, 1.35447952365092e-06, 2.29955404452745e-06, 3.71478902779988e-06, 5.71361782286945e-06, 8.37404636787507e-06, 1.17076109206192e-05, 1.56343292877852e-05, 1.99731141473789e-05, 2.44535561988104e-05, 2.87481259721704e-05, 3.25166967294651e-05, 3.54515670568725e-05, 3.73128880532287e-05, 3.79503171324205e-05, 3.73128880532287e-05, 3.54515670568725e-05, 3.25166967294651e-05, 2.87481259721704e-05, 2.44535561988104e-05, 1.99731141473789e-05, 1.56343292877852e-05, 1.17076109206192e-05, 8.37404636787507e-06, 5.71361782286945e-06, 3.71478902779988e-06, 2.29955404452745e-06, 1.35447952365092e-06, 7.58831048414707e-07, 4.04288926318536e-07, 2.04881316326130e-07, 9.88500999733794e-08, 4.55229473316947e-08, 2.01439573859886e-08, 8.71028936010607e-09, 3.83228069763623e-09, 1.86079730785587e-09, 2.76950476384493e-09, 6.25729514887803e-09, 1.48529677550972e-08, 3.49110986268380e-08, 7.92108291995698e-08, 1.71768449431056e-07, 3.54622159971847e-07, 6.95998539972188e-07, 1.29791230698978e-06, 2.29955404452745e-06, 3.87152588556904e-06, 6.19627246368329e-06, 9.43303910821773e-06, 1.36715195691405e-05, 1.88853744216193e-05, 2.49015619454169e-05, 3.14001424341404e-05, 3.79503171324205e-05, 4.40746598962355e-05, 4.93214804590313e-05, 5.33222161100502e-05, 5.58194722333390e-05, 5.66673658478765e-05, 5.58194722333390e-05, 5.33222161100502e-05, 4.93214804590313e-05, 4.40746598962355e-05, 3.79503171324205e-05, 3.14001424341404e-05, 2.49015619454169e-05, 1.88853744216193e-05, 1.36715195691405e-05, 9.43303910821773e-06, 6.19627246368329e-06, 3.87152588556904e-06, 2.29955404452745e-06, 1.29791230698978e-06, 6.95998539972188e-07, 3.54622159971847e-07, 1.71768449431056e-07, 7.92108291995698e-08, 3.49110986268380e-08, 1.48529677550972e-08, 6.25729514887803e-09, 2.76950476384493e-09, 4.21358788977445e-09, 1.00967088601294e-08, 2.45376567211366e-08, 5.80830531773184e-08, 1.31788202857858e-07, 2.84876411646176e-07, 5.85266109870174e-07, 1.14169885732707e-06, 2.11392933729923e-06, 3.71478902779988e-06, 6.19627246368329e-06, 9.81313281641988e-06, 1.47634982776905e-05, 2.11164813882201e-05, 2.87481259721704e-05, 3.73128880532287e-05, 4.62718248240169e-05, 5.49792304937719e-05, 6.28033360310301e-05, 6.92374769940431e-05, 7.39590344345512e-05, 7.68178136928210e-05, 7.77720392471942e-05, 7.68178136928210e-05, 7.39590344345512e-05, 6.92374769940431e-05, 6.28033360310301e-05, 5.49792304937719e-05, 4.62718248240169e-05, 3.73128880532287e-05, 2.87481259721704e-05, 2.11164813882201e-05, 1.47634982776905e-05, 9.81313281641988e-06, 6.19627246368329e-06, 3.71478902779988e-06, 2.11392933729923e-06, 1.14169885732707e-06, 5.85266109870174e-07, 2.84876411646176e-07, 1.31788202857858e-07, 5.80830531773184e-08, 2.45376567211366e-08, 1.00967088601294e-08, 4.21358788977445e-09, 6.38591807167264e-09, 1.58508146828878e-08, 3.89906488916959e-08, 9.24969386023430e-08, 2.09441434532649e-07, 4.50863184752836e-07, 9.21233347070692e-07, 1.78532487292143e-06, 3.28038878219203e-06, 5.71361782286945e-06, 9.43303910821773e-06, 1.47634982776905e-05, 2.19106791379053e-05, 3.08539366784052e-05, 4.12662689837223e-05, 5.25056732907879e-05, 6.37062474764760e-05, 7.39590344345512e-05, 8.25260270047090e-05, 8.90015429892788e-05, 9.33463057307625e-05, 9.57742289383148e-05, 9.65458367203462e-05, 9.57742289383148e-05, 9.33463057307625e-05, 8.90015429892788e-05, 8.25260270047090e-05, 7.39590344345512e-05, 6.37062474764760e-05, 5.25056732907879e-05, 4.12662689837223e-05, 3.08539366784052e-05, 2.19106791379053e-05, 1.47634982776905e-05, 9.43303910821773e-06, 5.71361782286945e-06, 3.28038878219203e-06, 1.78532487292143e-06, 9.21233347070692e-07, 4.50863184752836e-07, 2.09441434532649e-07, 9.24969386023430e-08, 3.89906488916959e-08, 1.58508146828878e-08, 6.38591807167264e-09, 9.47555303272212e-09, 2.40045259469479e-08, 5.93844896659077e-08, 1.40820624538199e-07, 3.17867597522997e-07, 6.81105707287417e-07, 1.38365814265074e-06, 2.66309714351008e-06, 4.85376670480531e-06, 8.37404636787507e-06, 1.36715195691405e-05, 2.11164813882201e-05, 3.08539366784052e-05, 4.26531322165941e-05, 5.58194722333390e-05, 6.92374769940431e-05, 8.15797073340935e-05, 9.16469736665011e-05, 9.87267693062337e-05, 0.000102814602133570, 0.000104574588599453, 0.000105022946790112, 0.000105054448202131, 0.000105022946790112, 0.000104574588599453, 0.000102814602133570, 9.87267693062337e-05, 9.16469736665011e-05, 8.15797073340935e-05, 6.92374769940431e-05, 5.58194722333390e-05, 4.26531322165941e-05, 3.08539366784052e-05, 2.11164813882201e-05, 1.36715195691405e-05, 8.37404636787507e-06, 4.85376670480531e-06, 2.66309714351008e-06, 1.38365814265074e-06, 6.81105707287417e-07, 3.17867597522997e-07, 1.40820624538199e-07, 5.93844896659077e-08, 2.40045259469479e-08, 9.47555303272212e-09, 1.36232195872986e-08, 3.49110986268380e-08, 8.65506121184782e-08, 2.04881316326130e-07, 4.60792829571097e-07, 9.82584373492198e-07, 1.98434181133911e-06, 3.79237835875793e-06, 6.85426078796954e-06, 1.17076109206192e-05, 1.88853744216193e-05, 2.87481259721704e-05, 4.12662689837223e-05, 5.58194722333390e-05, 7.11168935072488e-05, 8.53398419015077e-05, 9.65458367203462e-05, 0.000103255845434848, 0.000105021892447574, 0.000102713945849314, 9.83321374415217e-05, 9.43406710720994e-05, 9.27521775293707e-05, 9.43406710720994e-05, 9.83321374415217e-05, 0.000102713945849314, 0.000105021892447574, 0.000103255845434848, 9.65458367203462e-05, 8.53398419015077e-05, 7.11168935072488e-05, 5.58194722333390e-05, 4.12662689837223e-05, 2.87481259721704e-05, 1.88853744216193e-05, 1.17076109206192e-05, 6.85426078796954e-06, 3.79237835875793e-06, 1.98434181133911e-06, 9.82584373492198e-07, 4.60792829571097e-07, 2.04881316326130e-07, 8.65506121184782e-08, 3.49110986268380e-08, 1.36232195872986e-08, 1.88659213046240e-08, 4.86496930458638e-08, 1.20633840882933e-07, 2.84876411646176e-07, 6.38278879150148e-07, 1.35447952365092e-06, 2.71937524908502e-06, 5.16060848031975e-06, 9.24821358281408e-06, 1.56343292877852e-05, 2.49015619454169e-05, 3.73128880532287e-05, 5.25056732907879e-05, 6.92374769940431e-05, 8.53398419015077e-05, 9.80236847464596e-05, 0.000104574588599453, 0.000103292198808928, 9.43406710720994e-05, 8.01004095364049e-05, 6.47327706393677e-05, 5.29796129600051e-05, 4.85878783857328e-05, 5.29796129600051e-05, 6.47327706393677e-05, 8.01004095364049e-05, 9.43406710720994e-05, 0.000103292198808928, 0.000104574588599453, 9.80236847464596e-05, 8.53398419015077e-05, 6.92374769940431e-05, 5.25056732907879e-05, 3.73128880532287e-05, 2.49015619454169e-05, 1.56343292877852e-05, 9.24821358281408e-06, 5.16060848031975e-06, 2.71937524908502e-06, 1.35447952365092e-06, 6.38278879150148e-07, 2.84876411646176e-07, 1.20633840882933e-07, 4.86496930458638e-08, 1.88659213046240e-08, 2.50828745322092e-08, 6.48888087751350e-08, 1.60768392527646e-07, 3.78653954558926e-07, 8.45234606585766e-07, 1.78532487292143e-06, 3.56416973011514e-06, 6.71757102075987e-06, 1.19379333532568e-05, 1.99731141473789e-05, 3.14001424341404e-05, 4.62718248240169e-05, 6.37062474764760e-05, 8.15797073340935e-05, 9.65458367203462e-05, 0.000104574588599453, 0.000102042231178953, 8.71325218756865e-05, 6.10429656391050e-05, 2.83935184446772e-05, -3.56860402056998e-06, -2.69054040049465e-05, -3.54576546772710e-05, -2.69054040049465e-05, -3.56860402056998e-06, 2.83935184446772e-05, 6.10429656391050e-05, 8.71325218756865e-05, 0.000102042231178953, 0.000104574588599453, 9.65458367203462e-05, 8.15797073340935e-05, 6.37062474764760e-05, 4.62718248240169e-05, 3.14001424341404e-05, 1.99731141473789e-05, 1.19379333532568e-05, 6.71757102075987e-06, 3.56416973011514e-06, 1.78532487292143e-06, 8.45234606585766e-07, 3.78653954558926e-07, 1.60768392527646e-07, 6.48888087751350e-08, 2.50828745322092e-08, 3.19600285887441e-08, 8.27996516564894e-08, 2.04881316326130e-07, 4.81302057799405e-07, 1.07063902357280e-06, 2.25171751613426e-06, 4.47172256295234e-06, 8.37404636787507e-06, 1.47634982776905e-05, 2.44535561988104e-05, 3.79503171324205e-05, 5.49792304937719e-05, 7.39590344345512e-05, 9.16469736665011e-05, 0.000103255845434848, 0.000103292198808928, 8.71325218756865e-05, 5.29796129600051e-05, 3.48293859900704e-06, -5.38096770295247e-05, -0.000107712044958864, -0.000146253117165926, -0.000160247892797217, -0.000146253117165926, -0.000107712044958864, -5.38096770295247e-05, 3.48293859900704e-06, 5.29796129600051e-05, 8.71325218756865e-05, 0.000103292198808928, 0.000103255845434848, 9.16469736665011e-05, 7.39590344345512e-05, 5.49792304937719e-05, 3.79503171324205e-05, 2.44535561988104e-05, 1.47634982776905e-05, 8.37404636787507e-06, 4.47172256295234e-06, 2.25171751613426e-06, 1.07063902357280e-06, 4.81302057799405e-07, 2.04881316326130e-07, 8.27996516564894e-08, 3.19600285887441e-08, 3.89906488916959e-08, 1.01062914377729e-07, 2.49724523044566e-07, 5.85266109870174e-07, 1.29791230698978e-06, 2.71937524908502e-06, 5.37538199596193e-06, 1.00085168578969e-05, 1.75179335520721e-05, 2.87481259721704e-05, 4.40746598962355e-05, 6.28033360310301e-05, 8.25260270047090e-05, 9.87267693062337e-05, 0.000105021892447574, 9.43406710720994e-05, 6.10429656391050e-05, 3.48293859900704e-06, -7.39288784842864e-05, -0.000160247892797217, -0.000239790358017673, -0.000296016498652868, -0.000316327919743630, -0.000296016498652868, -0.000239790358017673, -0.000160247892797217, -7.39288784842864e-05, 3.48293859900704e-06, 6.10429656391050e-05, 9.43406710720994e-05, 0.000105021892447574, 9.87267693062337e-05, 8.25260270047090e-05, 6.28033360310301e-05, 4.40746598962355e-05, 2.87481259721704e-05, 1.75179335520721e-05, 1.00085168578969e-05, 5.37538199596193e-06, 2.71937524908502e-06, 1.29791230698978e-06, 5.85266109870174e-07, 2.49724523044566e-07, 1.01062914377729e-07, 3.89906488916959e-08, 4.55229473316947e-08, 1.17995055836862e-07, 2.91192299679587e-07, 6.81105707287417e-07, 1.50662612326427e-06, 3.14679826715717e-06, 6.19627246368329e-06, 1.14814226042962e-05, 1.99731141473789e-05, 3.25166967294651e-05, 4.93214804590313e-05, 6.92374769940431e-05, 8.90015429892788e-05, 0.000102814602133570, 0.000102713945849314, 8.01004095364049e-05, 2.83935184446772e-05, -5.38096770295247e-05, -0.000160247892797217, -0.000276507668926267, -0.000382361591631547, -0.000456679478033513, -0.000483443324174456, -0.000456679478033513, -0.000382361591631547, -0.000276507668926267, -0.000160247892797217, -5.38096770295247e-05, 2.83935184446772e-05, 8.01004095364049e-05, 0.000102713945849314, 0.000102814602133570, 8.90015429892788e-05, 6.92374769940431e-05, 4.93214804590313e-05, 3.25166967294651e-05, 1.99731141473789e-05, 1.14814226042962e-05, 6.19627246368329e-06, 3.14679826715717e-06, 1.50662612326427e-06, 6.81105707287417e-07, 2.91192299679587e-07, 1.17995055836862e-07, 4.55229473316947e-08, 5.08531891127888e-08, 1.31788202857858e-07, 3.24904635488620e-07, 7.58831048414707e-07, 1.67538236989635e-06, 3.49108335567331e-06, 6.85426078796954e-06, 1.26543621795561e-05, 2.19106791379053e-05, 3.54515670568725e-05, 5.33222161100502e-05, 7.39590344345512e-05, 9.33463057307625e-05, 0.000104574588599453, 9.83321374415217e-05, 6.47327706393677e-05, -3.56860402056998e-06, -0.000107712044958864, -0.000239790358017673, -0.000382361591631547, -0.000511259898044823, -0.000601390787521298, -0.000633788899621793, -0.000601390787521298, -0.000511259898044823, -0.000382361591631547, -0.000239790358017673, -0.000107712044958864, -3.56860402056998e-06, 6.47327706393677e-05, 9.83321374415217e-05, 0.000104574588599453, 9.33463057307625e-05, 7.39590344345512e-05, 5.33222161100502e-05, 3.54515670568725e-05, 2.19106791379053e-05, 1.26543621795561e-05, 6.85426078796954e-06, 3.49108335567331e-06, 1.67538236989635e-06, 7.58831048414707e-07, 3.24904635488620e-07, 1.31788202857858e-07, 5.08531891127888e-08, 5.43477017991462e-08, 1.40820624538199e-07, 3.46950670044095e-07, 8.09573799155140e-07, 1.78532487292143e-06, 3.71478902779988e-06, 7.28033546919081e-06, 1.34103909866892e-05, 2.31514778429911e-05, 3.73128880532287e-05, 5.58194722333390e-05, 7.68178136928210e-05, 9.57742289383148e-05, 0.000105022946790112, 9.43406710720994e-05, 5.29796129600051e-05, -2.69054040049465e-05, -0.000146253117165926, -0.000296016498652868, -0.000456679478033513, -0.000601390787521298, -0.000702359047267882, -0.000738616302026845, -0.000702359047267882, -0.000601390787521298, -0.000456679478033513, -0.000296016498652868, -0.000146253117165926, -2.69054040049465e-05, 5.29796129600051e-05, 9.43406710720994e-05, 0.000105022946790112, 9.57742289383148e-05, 7.68178136928210e-05, 5.58194722333390e-05, 3.73128880532287e-05, 2.31514778429911e-05, 1.34103909866892e-05, 7.28033546919081e-06, 3.71478902779988e-06, 1.78532487292143e-06, 8.09573799155140e-07, 3.46950670044095e-07, 1.40820624538199e-07, 5.43477017991462e-08, 5.55652721178737e-08, 1.43965897210943e-07, 3.54622159971847e-07, 8.27215921702499e-07, 1.82350868732049e-06, 3.79237835875793e-06, 7.42785239064459e-06, 1.36715195691405e-05, 2.35785913357379e-05, 3.79503171324205e-05, 5.66673658478765e-05, 7.77720392471942e-05, 9.65458367203462e-05, 0.000105054448202131, 9.27521775293707e-05, 4.85878783857328e-05, -3.54576546772710e-05, -0.000160247892797217, -0.000316327919743630, -0.000483443324174456, -0.000633788899621793, -0.000738616302026845, -0.000776247396595579, -0.000738616302026845, -0.000633788899621793, -0.000483443324174456, -0.000316327919743630, -0.000160247892797217, -3.54576546772710e-05, 4.85878783857328e-05, 9.27521775293707e-05, 0.000105054448202131, 9.65458367203462e-05, 7.77720392471942e-05, 5.66673658478765e-05, 3.79503171324205e-05, 2.35785913357379e-05, 1.36715195691405e-05, 7.42785239064459e-06, 3.79237835875793e-06, 1.82350868732049e-06, 8.27215921702499e-07, 3.54622159971847e-07, 1.43965897210943e-07, 5.55652721178737e-08, 5.43477017991462e-08, 1.40820624538199e-07, 3.46950670044095e-07, 8.09573799155140e-07, 1.78532487292143e-06, 3.71478902779988e-06, 7.28033546919081e-06, 1.34103909866892e-05, 2.31514778429911e-05, 3.73128880532287e-05, 5.58194722333390e-05, 7.68178136928210e-05, 9.57742289383148e-05, 0.000105022946790112, 9.43406710720994e-05, 5.29796129600051e-05, -2.69054040049465e-05, -0.000146253117165926, -0.000296016498652868, -0.000456679478033513, -0.000601390787521298, -0.000702359047267882, -0.000738616302026845, -0.000702359047267882, -0.000601390787521298, -0.000456679478033513, -0.000296016498652868, -0.000146253117165926, -2.69054040049465e-05, 5.29796129600051e-05, 9.43406710720994e-05, 0.000105022946790112, 9.57742289383148e-05, 7.68178136928210e-05, 5.58194722333390e-05, 3.73128880532287e-05, 2.31514778429911e-05, 1.34103909866892e-05, 7.28033546919081e-06, 3.71478902779988e-06, 1.78532487292143e-06, 8.09573799155140e-07, 3.46950670044095e-07, 1.40820624538199e-07, 5.43477017991462e-08, 5.08531891127888e-08, 1.31788202857858e-07, 3.24904635488620e-07, 7.58831048414707e-07, 1.67538236989635e-06, 3.49108335567331e-06, 6.85426078796954e-06, 1.26543621795561e-05, 2.19106791379053e-05, 3.54515670568725e-05, 5.33222161100502e-05, 7.39590344345512e-05, 9.33463057307625e-05, 0.000104574588599453, 9.83321374415217e-05, 6.47327706393677e-05, -3.56860402056998e-06, -0.000107712044958864, -0.000239790358017673, -0.000382361591631547, -0.000511259898044823, -0.000601390787521298, -0.000633788899621793, -0.000601390787521298, -0.000511259898044823, -0.000382361591631547, -0.000239790358017673, -0.000107712044958864, -3.56860402056998e-06, 6.47327706393677e-05, 9.83321374415217e-05, 0.000104574588599453, 9.33463057307625e-05, 7.39590344345512e-05, 5.33222161100502e-05, 3.54515670568725e-05, 2.19106791379053e-05, 1.26543621795561e-05, 6.85426078796954e-06, 3.49108335567331e-06, 1.67538236989635e-06, 7.58831048414707e-07, 3.24904635488620e-07, 1.31788202857858e-07, 5.08531891127888e-08, 4.55229473316947e-08, 1.17995055836862e-07, 2.91192299679587e-07, 6.81105707287417e-07, 1.50662612326427e-06, 3.14679826715717e-06, 6.19627246368329e-06, 1.14814226042962e-05, 1.99731141473789e-05, 3.25166967294651e-05, 4.93214804590313e-05, 6.92374769940431e-05, 8.90015429892788e-05, 0.000102814602133570, 0.000102713945849314, 8.01004095364049e-05, 2.83935184446772e-05, -5.38096770295247e-05, -0.000160247892797217, -0.000276507668926267, -0.000382361591631547, -0.000456679478033513, -0.000483443324174456, -0.000456679478033513, -0.000382361591631547, -0.000276507668926267, -0.000160247892797217, -5.38096770295247e-05, 2.83935184446772e-05, 8.01004095364049e-05, 0.000102713945849314, 0.000102814602133570, 8.90015429892788e-05, 6.92374769940431e-05, 4.93214804590313e-05, 3.25166967294651e-05, 1.99731141473789e-05, 1.14814226042962e-05, 6.19627246368329e-06, 3.14679826715717e-06, 1.50662612326427e-06, 6.81105707287417e-07, 2.91192299679587e-07, 1.17995055836862e-07, 4.55229473316947e-08, 3.89906488916959e-08, 1.01062914377729e-07, 2.49724523044566e-07, 5.85266109870174e-07, 1.29791230698978e-06, 2.71937524908502e-06, 5.37538199596193e-06, 1.00085168578969e-05, 1.75179335520721e-05, 2.87481259721704e-05, 4.40746598962355e-05, 6.28033360310301e-05, 8.25260270047090e-05, 9.87267693062337e-05, 0.000105021892447574, 9.43406710720994e-05, 6.10429656391050e-05, 3.48293859900704e-06, -7.39288784842864e-05, -0.000160247892797217, -0.000239790358017673, -0.000296016498652868, -0.000316327919743630, -0.000296016498652868, -0.000239790358017673, -0.000160247892797217, -7.39288784842864e-05, 3.48293859900704e-06, 6.10429656391050e-05, 9.43406710720994e-05, 0.000105021892447574, 9.87267693062337e-05, 8.25260270047090e-05, 6.28033360310301e-05, 4.40746598962355e-05, 2.87481259721704e-05, 1.75179335520721e-05, 1.00085168578969e-05, 5.37538199596193e-06, 2.71937524908502e-06, 1.29791230698978e-06, 5.85266109870174e-07, 2.49724523044566e-07, 1.01062914377729e-07, 3.89906488916959e-08, 3.19600285887441e-08, 8.27996516564894e-08, 2.04881316326130e-07, 4.81302057799405e-07, 1.07063902357280e-06, 2.25171751613426e-06, 4.47172256295234e-06, 8.37404636787507e-06, 1.47634982776905e-05, 2.44535561988104e-05, 3.79503171324205e-05, 5.49792304937719e-05, 7.39590344345512e-05, 9.16469736665011e-05, 0.000103255845434848, 0.000103292198808928, 8.71325218756865e-05, 5.29796129600051e-05, 3.48293859900704e-06, -5.38096770295247e-05, -0.000107712044958864, -0.000146253117165926, -0.000160247892797217, -0.000146253117165926, -0.000107712044958864, -5.38096770295247e-05, 3.48293859900704e-06, 5.29796129600051e-05, 8.71325218756865e-05, 0.000103292198808928, 0.000103255845434848, 9.16469736665011e-05, 7.39590344345512e-05, 5.49792304937719e-05, 3.79503171324205e-05, 2.44535561988104e-05, 1.47634982776905e-05, 8.37404636787507e-06, 4.47172256295234e-06, 2.25171751613426e-06, 1.07063902357280e-06, 4.81302057799405e-07, 2.04881316326130e-07, 8.27996516564894e-08, 3.19600285887441e-08, 2.50828745322092e-08, 6.48888087751350e-08, 1.60768392527646e-07, 3.78653954558926e-07, 8.45234606585766e-07, 1.78532487292143e-06, 3.56416973011514e-06, 6.71757102075987e-06, 1.19379333532568e-05, 1.99731141473789e-05, 3.14001424341404e-05, 4.62718248240169e-05, 6.37062474764760e-05, 8.15797073340935e-05, 9.65458367203462e-05, 0.000104574588599453, 0.000102042231178953, 8.71325218756865e-05, 6.10429656391050e-05, 2.83935184446772e-05, -3.56860402056998e-06, -2.69054040049465e-05, -3.54576546772710e-05, -2.69054040049465e-05, -3.56860402056998e-06, 2.83935184446772e-05, 6.10429656391050e-05, 8.71325218756865e-05, 0.000102042231178953, 0.000104574588599453, 9.65458367203462e-05, 8.15797073340935e-05, 6.37062474764760e-05, 4.62718248240169e-05, 3.14001424341404e-05, 1.99731141473789e-05, 1.19379333532568e-05, 6.71757102075987e-06, 3.56416973011514e-06, 1.78532487292143e-06, 8.45234606585766e-07, 3.78653954558926e-07, 1.60768392527646e-07, 6.48888087751350e-08, 2.50828745322092e-08, 1.88659213046240e-08, 4.86496930458638e-08, 1.20633840882933e-07, 2.84876411646176e-07, 6.38278879150148e-07, 1.35447952365092e-06, 2.71937524908502e-06, 5.16060848031975e-06, 9.24821358281408e-06, 1.56343292877852e-05, 2.49015619454169e-05, 3.73128880532287e-05, 5.25056732907879e-05, 6.92374769940431e-05, 8.53398419015077e-05, 9.80236847464596e-05, 0.000104574588599453, 0.000103292198808928, 9.43406710720994e-05, 8.01004095364049e-05, 6.47327706393677e-05, 5.29796129600051e-05, 4.85878783857328e-05, 5.29796129600051e-05, 6.47327706393677e-05, 8.01004095364049e-05, 9.43406710720994e-05, 0.000103292198808928, 0.000104574588599453, 9.80236847464596e-05, 8.53398419015077e-05, 6.92374769940431e-05, 5.25056732907879e-05, 3.73128880532287e-05, 2.49015619454169e-05, 1.56343292877852e-05, 9.24821358281408e-06, 5.16060848031975e-06, 2.71937524908502e-06, 1.35447952365092e-06, 6.38278879150148e-07, 2.84876411646176e-07, 1.20633840882933e-07, 4.86496930458638e-08, 1.88659213046240e-08, 1.36232195872986e-08, 3.49110986268380e-08, 8.65506121184782e-08, 2.04881316326130e-07, 4.60792829571097e-07, 9.82584373492198e-07, 1.98434181133911e-06, 3.79237835875793e-06, 6.85426078796954e-06, 1.17076109206192e-05, 1.88853744216193e-05, 2.87481259721704e-05, 4.12662689837223e-05, 5.58194722333390e-05, 7.11168935072488e-05, 8.53398419015077e-05, 9.65458367203462e-05, 0.000103255845434848, 0.000105021892447574, 0.000102713945849314, 9.83321374415217e-05, 9.43406710720994e-05, 9.27521775293707e-05, 9.43406710720994e-05, 9.83321374415217e-05, 0.000102713945849314, 0.000105021892447574, 0.000103255845434848, 9.65458367203462e-05, 8.53398419015077e-05, 7.11168935072488e-05, 5.58194722333390e-05, 4.12662689837223e-05, 2.87481259721704e-05, 1.88853744216193e-05, 1.17076109206192e-05, 6.85426078796954e-06, 3.79237835875793e-06, 1.98434181133911e-06, 9.82584373492198e-07, 4.60792829571097e-07, 2.04881316326130e-07, 8.65506121184782e-08, 3.49110986268380e-08, 1.36232195872986e-08, 9.47555303272212e-09, 2.40045259469479e-08, 5.93844896659077e-08, 1.40820624538199e-07, 3.17867597522997e-07, 6.81105707287417e-07, 1.38365814265074e-06, 2.66309714351008e-06, 4.85376670480531e-06, 8.37404636787507e-06, 1.36715195691405e-05, 2.11164813882201e-05, 3.08539366784052e-05, 4.26531322165941e-05, 5.58194722333390e-05, 6.92374769940431e-05, 8.15797073340935e-05, 9.16469736665011e-05, 9.87267693062337e-05, 0.000102814602133570, 0.000104574588599453, 0.000105022946790112, 0.000105054448202131, 0.000105022946790112, 0.000104574588599453, 0.000102814602133570, 9.87267693062337e-05, 9.16469736665011e-05, 8.15797073340935e-05, 6.92374769940431e-05, 5.58194722333390e-05, 4.26531322165941e-05, 3.08539366784052e-05, 2.11164813882201e-05, 1.36715195691405e-05, 8.37404636787507e-06, 4.85376670480531e-06, 2.66309714351008e-06, 1.38365814265074e-06, 6.81105707287417e-07, 3.17867597522997e-07, 1.40820624538199e-07, 5.93844896659077e-08, 2.40045259469479e-08, 9.47555303272212e-09, 6.38591807167264e-09, 1.58508146828878e-08, 3.89906488916959e-08, 9.24969386023430e-08, 2.09441434532649e-07, 4.50863184752836e-07, 9.21233347070692e-07, 1.78532487292143e-06, 3.28038878219203e-06, 5.71361782286945e-06, 9.43303910821773e-06, 1.47634982776905e-05, 2.19106791379053e-05, 3.08539366784052e-05, 4.12662689837223e-05, 5.25056732907879e-05, 6.37062474764760e-05, 7.39590344345512e-05, 8.25260270047090e-05, 8.90015429892788e-05, 9.33463057307625e-05, 9.57742289383148e-05, 9.65458367203462e-05, 9.57742289383148e-05, 9.33463057307625e-05, 8.90015429892788e-05, 8.25260270047090e-05, 7.39590344345512e-05, 6.37062474764760e-05, 5.25056732907879e-05, 4.12662689837223e-05, 3.08539366784052e-05, 2.19106791379053e-05, 1.47634982776905e-05, 9.43303910821773e-06, 5.71361782286945e-06, 3.28038878219203e-06, 1.78532487292143e-06, 9.21233347070692e-07, 4.50863184752836e-07, 2.09441434532649e-07, 9.24969386023430e-08, 3.89906488916959e-08, 1.58508146828878e-08, 6.38591807167264e-09, 4.21358788977445e-09, 1.00967088601294e-08, 2.45376567211366e-08, 5.80830531773184e-08, 1.31788202857858e-07, 2.84876411646176e-07, 5.85266109870174e-07, 1.14169885732707e-06, 2.11392933729923e-06, 3.71478902779988e-06, 6.19627246368329e-06, 9.81313281641988e-06, 1.47634982776905e-05, 2.11164813882201e-05, 2.87481259721704e-05, 3.73128880532287e-05, 4.62718248240169e-05, 5.49792304937719e-05, 6.28033360310301e-05, 6.92374769940431e-05, 7.39590344345512e-05, 7.68178136928210e-05, 7.77720392471942e-05, 7.68178136928210e-05, 7.39590344345512e-05, 6.92374769940431e-05, 6.28033360310301e-05, 5.49792304937719e-05, 4.62718248240169e-05, 3.73128880532287e-05, 2.87481259721704e-05, 2.11164813882201e-05, 1.47634982776905e-05, 9.81313281641988e-06, 6.19627246368329e-06, 3.71478902779988e-06, 2.11392933729923e-06, 1.14169885732707e-06, 5.85266109870174e-07, 2.84876411646176e-07, 1.31788202857858e-07, 5.80830531773184e-08, 2.45376567211366e-08, 1.00967088601294e-08, 4.21358788977445e-09, 2.76950476384493e-09, 6.25729514887803e-09, 1.48529677550972e-08, 3.49110986268380e-08, 7.92108291995698e-08, 1.71768449431056e-07, 3.54622159971847e-07, 6.95998539972188e-07, 1.29791230698978e-06, 2.29955404452745e-06, 3.87152588556904e-06, 6.19627246368329e-06, 9.43303910821773e-06, 1.36715195691405e-05, 1.88853744216193e-05, 2.49015619454169e-05, 3.14001424341404e-05, 3.79503171324205e-05, 4.40746598962355e-05, 4.93214804590313e-05, 5.33222161100502e-05, 5.58194722333390e-05, 5.66673658478765e-05, 5.58194722333390e-05, 5.33222161100502e-05, 4.93214804590313e-05, 4.40746598962355e-05, 3.79503171324205e-05, 3.14001424341404e-05, 2.49015619454169e-05, 1.88853744216193e-05, 1.36715195691405e-05, 9.43303910821773e-06, 6.19627246368329e-06, 3.87152588556904e-06, 2.29955404452745e-06, 1.29791230698978e-06, 6.95998539972188e-07, 3.54622159971847e-07, 1.71768449431056e-07, 7.92108291995698e-08, 3.49110986268380e-08, 1.48529677550972e-08, 6.25729514887803e-09, 2.76950476384493e-09, 1.86079730785587e-09, 3.83228069763623e-09, 8.71028936010607e-09, 2.01439573859886e-08, 4.55229473316947e-08, 9.88500999733794e-08, 2.04881316326130e-07, 4.04288926318536e-07, 7.58831048414707e-07, 1.35447952365092e-06, 2.29955404452745e-06, 3.71478902779988e-06, 5.71361782286945e-06, 8.37404636787507e-06, 1.17076109206192e-05, 1.56343292877852e-05, 1.99731141473789e-05, 2.44535561988104e-05, 2.87481259721704e-05, 3.25166967294651e-05, 3.54515670568725e-05, 3.73128880532287e-05, 3.79503171324205e-05, 3.73128880532287e-05, 3.54515670568725e-05, 3.25166967294651e-05, 2.87481259721704e-05, 2.44535561988104e-05, 1.99731141473789e-05, 1.56343292877852e-05, 1.17076109206192e-05, 8.37404636787507e-06, 5.71361782286945e-06, 3.71478902779988e-06, 2.29955404452745e-06, 1.35447952365092e-06, 7.58831048414707e-07, 4.04288926318536e-07, 2.04881316326130e-07, 9.88500999733794e-08, 4.55229473316947e-08, 2.01439573859886e-08, 8.71028936010607e-09, 3.83228069763623e-09, 1.86079730785587e-09, 1.31905212676454e-09, 2.38122892523348e-09, 5.01955733629269e-09, 1.12303450288689e-08, 2.50828745322092e-08, 5.43477017991462e-08, 1.12888370228736e-07, 2.23732850786383e-07, 4.22320880156400e-07, 7.58831048414707e-07, 1.29791230698978e-06, 2.11392933729923e-06, 3.28038878219203e-06, 4.85376670480531e-06, 6.85426078796954e-06, 9.24821358281408e-06, 1.19379333532568e-05, 1.47634982776905e-05, 1.75179335520721e-05, 1.99731141473789e-05, 2.19106791379053e-05, 2.31514778429911e-05, 2.35785913357379e-05, 2.31514778429911e-05, 2.19106791379053e-05, 1.99731141473789e-05, 1.75179335520721e-05, 1.47634982776905e-05, 1.19379333532568e-05, 9.24821358281408e-06, 6.85426078796954e-06, 4.85376670480531e-06, 3.28038878219203e-06, 2.11392933729923e-06, 1.29791230698978e-06, 7.58831048414707e-07, 4.22320880156400e-07, 2.23732850786383e-07, 1.12888370228736e-07, 5.43477017991462e-08, 2.50828745322092e-08, 1.12303450288689e-08, 5.01955733629269e-09, 2.38122892523348e-09, 1.31905212676454e-09, 1.01287031941811e-09, 1.55816904933725e-09, 2.91773292876697e-09, 6.13155998481251e-09, 1.33327237474646e-08, 2.86236210918466e-08, 5.93844896659077e-08, 1.17995055836862e-07, 2.23732850786383e-07, 4.04288926318536e-07, 6.95998539972188e-07, 1.14169885732707e-06, 1.78532487292143e-06, 2.66309714351008e-06, 3.79237835875793e-06, 5.16060848031975e-06, 6.71757102075987e-06, 8.37404636787507e-06, 1.00085168578969e-05, 1.14814226042962e-05, 1.26543621795561e-05, 1.34103909866892e-05, 1.36715195691405e-05, 1.34103909866892e-05, 1.26543621795561e-05, 1.14814226042962e-05, 1.00085168578969e-05, 8.37404636787507e-06, 6.71757102075987e-06, 5.16060848031975e-06, 3.79237835875793e-06, 2.66309714351008e-06, 1.78532487292143e-06, 1.14169885732707e-06, 6.95998539972188e-07, 4.04288926318536e-07, 2.23732850786383e-07, 1.17995055836862e-07, 5.93844896659077e-08, 2.86236210918466e-08, 1.33327237474646e-08, 6.13155998481251e-09, 2.91773292876697e-09, 1.55816904933725e-09, 1.01287031941811e-09, 8.48742570013430e-10, 1.11542338335337e-09, 1.78273935739558e-09, 3.36647022652934e-09, 6.93062591263766e-09, 1.45350598653710e-08, 2.99135823201005e-08, 5.93844896659077e-08, 1.12888370228736e-07, 2.04881316326130e-07, 3.54622159971847e-07, 5.85266109870174e-07, 9.21233347070692e-07, 1.38365814265074e-06, 1.98434181133911e-06, 2.71937524908502e-06, 3.56416973011514e-06, 4.47172256295234e-06, 5.37538199596193e-06, 6.19627246368329e-06, 6.85426078796954e-06, 7.28033546919081e-06, 7.42785239064459e-06, 7.28033546919081e-06, 6.85426078796954e-06, 6.19627246368329e-06, 5.37538199596193e-06, 4.47172256295234e-06, 3.56416973011514e-06, 2.71937524908502e-06, 1.98434181133911e-06, 1.38365814265074e-06, 9.21233347070692e-07, 5.85266109870174e-07, 3.54622159971847e-07, 2.04881316326130e-07, 1.12888370228736e-07, 5.93844896659077e-08, 2.99135823201005e-08, 1.45350598653710e-08, 6.93062591263766e-09, 3.36647022652934e-09, 1.78273935739558e-09, 1.11542338335337e-09, 8.48742570013430e-10, 7.65267106158951e-10, 8.89480015348196e-10, 1.20138077063464e-09, 1.94441713363734e-09, 3.62350941634546e-09, 7.22208942482029e-09, 1.45350598653710e-08, 2.86236210918466e-08, 5.43477017991462e-08, 9.88500999733794e-08, 1.71768449431056e-07, 2.84876411646176e-07, 4.50863184752836e-07, 6.81105707287417e-07, 9.82584373492198e-07, 1.35447952365092e-06, 1.78532487292143e-06, 2.25171751613426e-06, 2.71937524908502e-06, 3.14679826715717e-06, 3.49108335567331e-06, 3.71478902779988e-06, 3.79237835875793e-06, 3.71478902779988e-06, 3.49108335567331e-06, 3.14679826715717e-06, 2.71937524908502e-06, 2.25171751613426e-06, 1.78532487292143e-06, 1.35447952365092e-06, 9.82584373492198e-07, 6.81105707287417e-07, 4.50863184752836e-07, 2.84876411646176e-07, 1.71768449431056e-07, 9.88500999733794e-08, 5.43477017991462e-08, 2.86236210918466e-08, 1.45350598653710e-08, 7.22208942482029e-09, 3.62350941634546e-09, 1.94441713363734e-09, 1.20138077063464e-09, 8.89480015348196e-10, 7.65267106158951e-10, 7.24974003325432e-10, 7.80063578263050e-10, 9.18854316108359e-10, 1.25068166668281e-09, 2.00344697737242e-09, 3.62350941634546e-09, 6.93062591263766e-09, 1.33327237474646e-08, 2.50828745322092e-08, 4.55229473316947e-08, 7.92108291995698e-08, 1.31788202857858e-07, 2.09441434532649e-07, 3.17867597522997e-07, 4.60792829571097e-07, 6.38278879150148e-07, 8.45234606585766e-07, 1.07063902357280e-06, 1.29791230698978e-06, 1.50662612326427e-06, 1.67538236989635e-06, 1.78532487292143e-06, 1.82350868732049e-06, 1.78532487292143e-06, 1.67538236989635e-06, 1.50662612326427e-06, 1.29791230698978e-06, 1.07063902357280e-06, 8.45234606585766e-07, 6.38278879150148e-07, 4.60792829571097e-07, 3.17867597522997e-07, 2.09441434532649e-07, 1.31788202857858e-07, 7.92108291995698e-08, 4.55229473316947e-08, 2.50828745322092e-08, 1.33327237474646e-08, 6.93062591263766e-09, 3.62350941634546e-09, 2.00344697737242e-09, 1.25068166668281e-09, 9.18854316108359e-10, 7.80063578263050e-10, 7.24974003325432e-10, 7.06511386476401e-10, 7.29772000047663e-10, 7.88559232542339e-10, 9.29587617665334e-10, 1.25068166668281e-09, 1.94441713363734e-09, 3.36647022652934e-09, 6.13155998481251e-09, 1.12303450288689e-08, 2.01439573859886e-08, 3.49110986268380e-08, 5.80830531773184e-08, 9.24969386023430e-08, 1.40820624538199e-07, 2.04881316326130e-07, 2.84876411646176e-07, 3.78653954558926e-07, 4.81302057799405e-07, 5.85266109870174e-07, 6.81105707287417e-07, 7.58831048414707e-07, 8.09573799155140e-07, 8.27215921702499e-07, 8.09573799155140e-07, 7.58831048414707e-07, 6.81105707287417e-07, 5.85266109870174e-07, 4.81302057799405e-07, 3.78653954558926e-07, 2.84876411646176e-07, 2.04881316326130e-07, 1.40820624538199e-07, 9.24969386023430e-08, 5.80830531773184e-08, 3.49110986268380e-08, 2.01439573859886e-08, 1.12303450288689e-08, 6.13155998481251e-09, 3.36647022652934e-09, 1.94441713363734e-09, 1.25068166668281e-09, 9.29587617665334e-10, 7.88559232542339e-10, 7.29772000047663e-10, 7.06511386476401e-10, 6.98479384160607e-10, 7.07828138471761e-10, 7.31526334533303e-10, 7.88559232542339e-10, 9.18854316108359e-10, 1.20138077063464e-09, 1.78273935739558e-09, 2.91773292876697e-09, 5.01955733629269e-09, 8.71028936010607e-09, 1.48529677550972e-08, 2.45376567211366e-08, 3.89906488916959e-08, 5.93844896659077e-08, 8.65506121184782e-08, 1.20633840882933e-07, 1.60768392527646e-07, 2.04881316326130e-07, 2.49724523044566e-07, 2.91192299679587e-07, 3.24904635488620e-07, 3.46950670044095e-07, 3.54622159971847e-07, 3.46950670044095e-07, 3.24904635488620e-07, 2.91192299679587e-07, 2.49724523044566e-07, 2.04881316326130e-07, 1.60768392527646e-07, 1.20633840882933e-07, 8.65506121184782e-08, 5.93844896659077e-08, 3.89906488916959e-08, 2.45376567211366e-08, 1.48529677550972e-08, 8.71028936010607e-09, 5.01955733629269e-09, 2.91773292876697e-09, 1.78273935739558e-09, 1.20138077063464e-09, 9.18854316108359e-10, 7.88559232542339e-10, 7.31526334533303e-10, 7.07828138471761e-10, 6.98479384160607e-10, 6.95161307407246e-10, 6.98737397699556e-10, 7.07828138471761e-10, 7.29772000047663e-10, 7.80063578263050e-10, 8.89480015348196e-10, 1.11542338335337e-09, 1.55816904933725e-09, 2.38122892523348e-09, 3.83228069763623e-09, 6.25729514887803e-09, 1.00967088601294e-08, 1.58508146828878e-08, 2.40045259469479e-08, 3.49110986268380e-08, 4.86496930458638e-08, 6.48888087751350e-08, 8.27996516564894e-08, 1.01062914377729e-07, 1.17995055836862e-07, 1.31788202857858e-07, 1.40820624538199e-07, 1.43965897210943e-07, 1.40820624538199e-07, 1.31788202857858e-07, 1.17995055836862e-07, 1.01062914377729e-07, 8.27996516564894e-08, 6.48888087751350e-08, 4.86496930458638e-08, 3.49110986268380e-08, 2.40045259469479e-08, 1.58508146828878e-08, 1.00967088601294e-08, 6.25729514887803e-09, 3.83228069763623e-09, 2.38122892523348e-09, 1.55816904933725e-09, 1.11542338335337e-09, 8.89480015348196e-10, 7.80063578263050e-10, 7.29772000047663e-10, 7.07828138471761e-10, 6.98737397699556e-10, 6.95161307407246e-10, 6.93859534369387e-10, 6.95161307407246e-10, 6.98479384160607e-10, 7.06511386476401e-10, 7.24974003325432e-10, 7.65267106158951e-10, 8.48742570013430e-10, 1.01287031941811e-09, 1.31905212676454e-09, 1.86079730785587e-09, 2.76950476384493e-09, 4.21358788977445e-09, 6.38591807167264e-09, 9.47555303272212e-09, 1.36232195872986e-08, 1.88659213046240e-08, 2.50828745322092e-08, 3.19600285887441e-08, 3.89906488916959e-08, 4.55229473316947e-08, 5.08531891127888e-08, 5.43477017991462e-08, 5.55652721178737e-08, 5.43477017991462e-08, 5.08531891127888e-08, 4.55229473316947e-08, 3.89906488916959e-08, 3.19600285887441e-08, 2.50828745322092e-08, 1.88659213046240e-08, 1.36232195872986e-08, 9.47555303272212e-09, 6.38591807167264e-09, 4.21358788977445e-09, 2.76950476384493e-09, 1.86079730785587e-09, 1.31905212676454e-09, 1.01287031941811e-09, 8.48742570013430e-10, 7.65267106158951e-10, 7.24974003325432e-10, 7.06511386476401e-10, 6.98479384160607e-10, 6.95161307407246e-10, 6.93859534369387e-10
        // ];
        var logKernel = [
            3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 7.89043545250869e-16, 3.55924947140632e-15, 1.04421086204378e-14, 1.99104938996080e-14, 2.46874904599223e-14, 1.99104938996080e-14, 1.04421086204378e-14, 3.55924947140632e-15, 7.89043545250869e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.50442518642114e-15, 1.60571405581474e-14, 1.11082625574244e-13, 4.98464144278520e-13, 1.45386782543190e-12, 2.76124516943131e-12, 3.41902928426874e-12, 2.76124516943131e-12, 1.45386782543190e-12, 4.98464144278520e-13, 1.11082625574244e-13, 1.60571405581474e-14, 1.50442518642114e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 8.42024432865574e-15, 1.37677697881142e-13, 1.45386782543190e-12, 9.94033299275190e-12, 4.41378777215618e-11, 1.27663763210872e-10, 2.41157917297869e-10, 2.98048861059931e-10, 2.41157917297869e-10, 1.27663763210872e-10, 4.41378777215618e-11, 9.94033299275190e-12, 1.45386782543190e-12, 1.37677697881142e-13, 8.42024432865574e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 5.13493963614977e-16, 1.99104938996080e-14, 4.98464144278520e-13, 8.03098352477328e-12, 8.35008390467833e-11, 5.62283682263459e-10, 2.46234586464539e-09, 7.04252251552669e-09, 1.32057697485752e-08, 1.62792104771307e-08, 1.32057697485752e-08, 7.04252251552669e-09, 2.46234586464539e-09, 5.62283682263459e-10, 8.35008390467833e-11, 8.03098352477328e-12, 4.98464144278520e-13, 1.99104938996080e-14, 5.13493963614977e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.99104938996080e-14, 7.65025657570040e-13, 1.88401950938749e-11, 2.98048861059931e-10, 3.03913179073640e-09, 2.00645183815359e-08, 8.62465146266664e-08, 2.42870144732111e-07, 4.50697797340099e-07, 5.53550071915819e-07, 4.50697797340099e-07, 2.42870144732111e-07, 8.62465146266664e-08, 2.00645183815359e-08, 3.03913179073640e-09, 2.98048861059931e-10, 1.88401950938749e-11, 7.65025657570040e-13, 1.99104938996080e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 8.42024432865574e-15, 4.98464144278520e-13, 1.88401950938749e-11, 4.55109052509882e-10, 7.04252251552669e-09, 7.00689971425924e-08, 4.50697797340099e-07, 1.88822192893507e-06, 5.19984523722407e-06, 9.50144657200695e-06, 1.16050824359822e-05, 9.50144657200695e-06, 5.19984523722407e-06, 1.88822192893507e-06, 4.50697797340099e-07, 7.00689971425924e-08, 7.04252251552669e-09, 4.55109052509882e-10, 1.88401950938749e-11, 4.98464144278520e-13, 8.42024432865574e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.50442518642114e-15, 1.37677697881142e-13, 8.03098352477328e-12, 2.98048861059931e-10, 7.04252251552669e-09, 1.06136470096558e-07, 1.02380689067265e-06, 6.35992763022253e-06, 2.56911048452451e-05, 6.84077861326287e-05, 0.000121980440732971, 0.000147647900512783, 0.000121980440732971, 6.84077861326287e-05, 2.56911048452451e-05, 6.35992763022253e-06, 1.02380689067265e-06, 1.06136470096558e-07, 7.04252251552669e-09, 2.98048861059931e-10, 8.03098352477328e-12, 1.37677697881142e-13, 1.50442518642114e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.60571405581474e-14, 1.45386782543190e-12, 8.35008390467833e-11, 3.03913179073640e-09, 7.00689971425924e-08, 1.02380689067265e-06, 9.50144657200695e-06, 5.63196778805704e-05, 0.000215654491519215, 0.000544066518487493, 0.000929938077188085, 0.00110733573845245, 0.000929938077188085, 0.000544066518487493, 0.000215654491519215, 5.63196778805704e-05, 9.50144657200695e-06, 1.02380689067265e-06, 7.00689971425924e-08, 3.03913179073640e-09, 8.35008390467833e-11, 1.45386782543190e-12, 1.60571405581474e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 7.89043545250869e-16, 1.11082625574244e-13, 9.94033299275190e-12, 5.62283682263459e-10, 2.00645183815359e-08, 4.50697797340099e-07, 6.35992763022253e-06, 5.63196778805704e-05, 0.000313537113196262, 0.00110733573845245, 0.00254335262910760, 0.00399497943074096, 0.00458999550026456, 0.00399497943074096, 0.00254335262910760, 0.00110733573845245, 0.000313537113196262, 5.63196778805704e-05, 6.35992763022253e-06, 4.50697797340099e-07, 2.00645183815359e-08, 5.62283682263459e-10, 9.94033299275190e-12, 1.11082625574244e-13, 7.89043545250869e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.55924947140632e-15, 4.98464144278520e-13, 4.41378777215618e-11, 2.46234586464539e-09, 8.62465146266664e-08, 1.88822192893507e-06, 2.56911048452451e-05, 0.000215654491519215, 0.00110733573845245, 0.00345484381040379, 0.00660789296654792, 0.00832791757508839, 0.00850934490937230, 0.00832791757508839, 0.00660789296654792, 0.00345484381040379, 0.00110733573845245, 0.000215654491519215, 2.56911048452451e-05, 1.88822192893507e-06, 8.62465146266664e-08, 2.46234586464539e-09, 4.41378777215618e-11, 4.98464144278520e-13, 3.55924947140632e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.04421086204378e-14, 1.45386782543190e-12, 1.27663763210872e-10, 7.04252251552669e-09, 2.42870144732111e-07, 5.19984523722407e-06, 6.84077861326287e-05, 0.000544066518487493, 0.00254335262910760, 0.00660789296654792, 0.00826535559578931, 0.00229981635076294, -0.00287212304856187, 0.00229981635076294, 0.00826535559578931, 0.00660789296654792, 0.00254335262910760, 0.000544066518487493, 6.84077861326287e-05, 5.19984523722407e-06, 2.42870144732111e-07, 7.04252251552669e-09, 1.27663763210872e-10, 1.45386782543190e-12, 1.04421086204378e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.99104938996080e-14, 2.76124516943131e-12, 2.41157917297869e-10, 1.32057697485752e-08, 4.50697797340099e-07, 9.50144657200695e-06, 0.000121980440732971, 0.000929938077188085, 0.00399497943074096, 0.00832791757508839, 0.00229981635076294, -0.0223971529727756, -0.0391589228224718, -0.0223971529727756, 0.00229981635076294, 0.00832791757508839, 0.00399497943074096, 0.000929938077188085, 0.000121980440732971, 9.50144657200695e-06, 4.50697797340099e-07, 1.32057697485752e-08, 2.41157917297869e-10, 2.76124516943131e-12, 1.99104938996080e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 2.46874904599223e-14, 3.41902928426874e-12, 2.98048861059931e-10, 1.62792104771307e-08, 5.53550071915819e-07, 1.16050824359822e-05, 0.000147647900512783, 0.00110733573845245, 0.00458999550026456, 0.00850934490937230, -0.00287212304856187, -0.0391589228224718, -0.0628760269005019, -0.0391589228224718, -0.00287212304856187, 0.00850934490937230, 0.00458999550026456, 0.00110733573845245, 0.000147647900512783, 1.16050824359822e-05, 5.53550071915819e-07, 1.62792104771307e-08, 2.98048861059931e-10, 3.41902928426874e-12, 2.46874904599223e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.99104938996080e-14, 2.76124516943131e-12, 2.41157917297869e-10, 1.32057697485752e-08, 4.50697797340099e-07, 9.50144657200695e-06, 0.000121980440732971, 0.000929938077188085, 0.00399497943074096, 0.00832791757508839, 0.00229981635076294, -0.0223971529727756, -0.0391589228224718, -0.0223971529727756, 0.00229981635076294, 0.00832791757508839, 0.00399497943074096, 0.000929938077188085, 0.000121980440732971, 9.50144657200695e-06, 4.50697797340099e-07, 1.32057697485752e-08, 2.41157917297869e-10, 2.76124516943131e-12, 1.99104938996080e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.04421086204378e-14, 1.45386782543190e-12, 1.27663763210872e-10, 7.04252251552669e-09, 2.42870144732111e-07, 5.19984523722407e-06, 6.84077861326287e-05, 0.000544066518487493, 0.00254335262910760, 0.00660789296654792, 0.00826535559578931, 0.00229981635076294, -0.00287212304856187, 0.00229981635076294, 0.00826535559578931, 0.00660789296654792, 0.00254335262910760, 0.000544066518487493, 6.84077861326287e-05, 5.19984523722407e-06, 2.42870144732111e-07, 7.04252251552669e-09, 1.27663763210872e-10, 1.45386782543190e-12, 1.04421086204378e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.55924947140632e-15, 4.98464144278520e-13, 4.41378777215618e-11, 2.46234586464539e-09, 8.62465146266664e-08, 1.88822192893507e-06, 2.56911048452451e-05, 0.000215654491519215, 0.00110733573845245, 0.00345484381040379, 0.00660789296654792, 0.00832791757508839, 0.00850934490937230, 0.00832791757508839, 0.00660789296654792, 0.00345484381040379, 0.00110733573845245, 0.000215654491519215, 2.56911048452451e-05, 1.88822192893507e-06, 8.62465146266664e-08, 2.46234586464539e-09, 4.41378777215618e-11, 4.98464144278520e-13, 3.55924947140632e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 7.89043545250869e-16, 1.11082625574244e-13, 9.94033299275190e-12, 5.62283682263459e-10, 2.00645183815359e-08, 4.50697797340099e-07, 6.35992763022253e-06, 5.63196778805704e-05, 0.000313537113196262, 0.00110733573845245, 0.00254335262910760, 0.00399497943074096, 0.00458999550026456, 0.00399497943074096, 0.00254335262910760, 0.00110733573845245, 0.000313537113196262, 5.63196778805704e-05, 6.35992763022253e-06, 4.50697797340099e-07, 2.00645183815359e-08, 5.62283682263459e-10, 9.94033299275190e-12, 1.11082625574244e-13, 7.89043545250869e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.60571405581474e-14, 1.45386782543190e-12, 8.35008390467833e-11, 3.03913179073640e-09, 7.00689971425924e-08, 1.02380689067265e-06, 9.50144657200695e-06, 5.63196778805704e-05, 0.000215654491519215, 0.000544066518487493, 0.000929938077188085, 0.00110733573845245, 0.000929938077188085, 0.000544066518487493, 0.000215654491519215, 5.63196778805704e-05, 9.50144657200695e-06, 1.02380689067265e-06, 7.00689971425924e-08, 3.03913179073640e-09, 8.35008390467833e-11, 1.45386782543190e-12, 1.60571405581474e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.50442518642114e-15, 1.37677697881142e-13, 8.03098352477328e-12, 2.98048861059931e-10, 7.04252251552669e-09, 1.06136470096558e-07, 1.02380689067265e-06, 6.35992763022253e-06, 2.56911048452451e-05, 6.84077861326287e-05, 0.000121980440732971, 0.000147647900512783, 0.000121980440732971, 6.84077861326287e-05, 2.56911048452451e-05, 6.35992763022253e-06, 1.02380689067265e-06, 1.06136470096558e-07, 7.04252251552669e-09, 2.98048861059931e-10, 8.03098352477328e-12, 1.37677697881142e-13, 1.50442518642114e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 8.42024432865574e-15, 4.98464144278520e-13, 1.88401950938749e-11, 4.55109052509882e-10, 7.04252251552669e-09, 7.00689971425924e-08, 4.50697797340099e-07, 1.88822192893507e-06, 5.19984523722407e-06, 9.50144657200695e-06, 1.16050824359822e-05, 9.50144657200695e-06, 5.19984523722407e-06, 1.88822192893507e-06, 4.50697797340099e-07, 7.00689971425924e-08, 7.04252251552669e-09, 4.55109052509882e-10, 1.88401950938749e-11, 4.98464144278520e-13, 8.42024432865574e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.99104938996080e-14, 7.65025657570040e-13, 1.88401950938749e-11, 2.98048861059931e-10, 3.03913179073640e-09, 2.00645183815359e-08, 8.62465146266664e-08, 2.42870144732111e-07, 4.50697797340099e-07, 5.53550071915819e-07, 4.50697797340099e-07, 2.42870144732111e-07, 8.62465146266664e-08, 2.00645183815359e-08, 3.03913179073640e-09, 2.98048861059931e-10, 1.88401950938749e-11, 7.65025657570040e-13, 1.99104938996080e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 5.13493963614977e-16, 1.99104938996080e-14, 4.98464144278520e-13, 8.03098352477328e-12, 8.35008390467833e-11, 5.62283682263459e-10, 2.46234586464539e-09, 7.04252251552669e-09, 1.32057697485752e-08, 1.62792104771307e-08, 1.32057697485752e-08, 7.04252251552669e-09, 2.46234586464539e-09, 5.62283682263459e-10, 8.35008390467833e-11, 8.03098352477328e-12, 4.98464144278520e-13, 1.99104938996080e-14, 5.13493963614977e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 8.42024432865574e-15, 1.37677697881142e-13, 1.45386782543190e-12, 9.94033299275190e-12, 4.41378777215618e-11, 1.27663763210872e-10, 2.41157917297869e-10, 2.98048861059931e-10, 2.41157917297869e-10, 1.27663763210872e-10, 4.41378777215618e-11, 9.94033299275190e-12, 1.45386782543190e-12, 1.37677697881142e-13, 8.42024432865574e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.50442518642114e-15, 1.60571405581474e-14, 1.11082625574244e-13, 4.98464144278520e-13, 1.45386782543190e-12, 2.76124516943131e-12, 3.41902928426874e-12, 2.76124516943131e-12, 1.45386782543190e-12, 4.98464144278520e-13, 1.11082625574244e-13, 1.60571405581474e-14, 1.50442518642114e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 7.89043545250869e-16, 3.55924947140632e-15, 1.04421086204378e-14, 1.99104938996080e-14, 2.46874904599223e-14, 1.99104938996080e-14, 1.04421086204378e-14, 3.55924947140632e-15, 7.89043545250869e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18
        ];
        this.logKernel = new Float32Array(logKernel);
        this.logKernelTex = new tgl.Texture(dim, dim, 1, true, false, true, this.logKernel);

        this.timeVector = new Float32Array(linspace(0.0, this.numIntervals * this.deltaT, this.numIntervals));
        this.timeVectorTex = new tgl.Texture(this.numIntervals, 1, 1, true, false, true, this.timeVector);
        this.wl = 0.02;
        this.sigma = 0.02;

        this.filterType = 'none';
        this.computePFFilter();

        this.instant = 0;
        this.playing = false;
        this.usePhase = false;
        this.addModules = true;
        this.showGeometry = false;
        this.createSceneVBOs();
    }

    Renderer.prototype.scene2canvas = function (pos) {
        var result = [0, 0];
        result[0] = pos[0] / (2 * this.aspect) + 0.5;
        result[1] = 0.5 - pos[1] / 2;
        result[0] *= this.width;
        result[1] *= this.height;
        return result;
    }

    Renderer.prototype.createSceneVBOs = function () {
        createSceneVBOs(this, this.gl, tgl);
    } 

    Renderer.prototype.createVBOs = function () {
        var gl = this.gl;

        this.rayVbo = new tgl.VertexBuffer();
        this.rayVbo.addAttribute("TexCoord", 3, gl.FLOAT, false);
        this.rayVbo.init(this.rayCount * 2);

        var vboData = new Float32Array(this.rayCount * 2 * 3);
        for (var i = 0; i < this.rayCount; ++i) {
            var u = ((i % this.raySize) + 0.5) / this.raySize;
            var v = (Math.floor(i / this.raySize) + 0.5) / this.raySize;
            vboData[i * 6 + 0] = vboData[i * 6 + 3] = u;
            vboData[i * 6 + 1] = vboData[i * 6 + 4] = v;
            vboData[i * 6 + 2] = 0.0;
            vboData[i * 6 + 5] = 1.0;
        }
        this.rayVbo.copy(vboData);

        this.rayVbo2 = new tgl.VertexBuffer();
        this.rayVbo2.addAttribute("TexCoord", 2, gl.FLOAT, false);
        this.rayVbo2.init(this.rayCount);

        var vboData2 = new Float32Array(this.rayCount * 2);
        for (var i = 0; i < this.rayCount; ++i) {
            var u = ((i % this.raySize) + 0.5) / this.raySize;
            var v = (Math.floor(i / this.raySize) + 0.5) / this.raySize;
            vboData2[i * 2 + 0] = u;
            vboData2[i * 2 + 1] = v;
        }
        this.rayVbo2.copy(vboData2);

        this.fbo = new tgl.RenderTarget();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.blendFunc(gl.ONE, gl.ONE);
    }

    Renderer.prototype.setCameraModel = function (id) {
        this.isVirtualConf = (id == 0);
        this.isConvCamera = (id == 2);
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.setAddModules = function (addModules) {
        this.addModules = addModules;
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.replaceNumSpads = function (shaderName) {
        var pattern = new RegExp('{numSpads}');
        var shaderSource = Shaders[shaderName];
        return shaderSource.replace(pattern, this.numSpads);
    }

    Renderer.prototype.replaceNumIntervals = function (shaderName) {
        this.timeVector = new Float32Array(linspace(0.0, this.numIntervals * this.deltaT, this.numIntervals));
        this.timeVectorTex = new tgl.Texture(this.numIntervals, 1, 1, true, false, true, this.timeVector);
        var pattern = new RegExp('{numIntervals}', 'g');
        var shaderSource = Shaders[shaderName];
        return shaderSource.replace(pattern, this.numIntervals);
    }

    Renderer.prototype.changeSpadResolution = function (numSpads) {
        if (this.spadHeights === undefined || this.spadHeights.length != numSpads) {
            this.numSpads = numSpads;
            this.setSpadPositions(false/*, this.currentScene == SECOND_CORNER_SCENE*/);
            this.createNLOSBuffers(ModifiedAttributes.NumSpads);
            this.resetActiveBlock();
            this.reset();
        }
    }

    Renderer.prototype.setSpadBoundaries = function (low, high) {
        if (this.spadBoundaries === undefined || this.spadBoundaries[0] != low || this.spadBoundaries != high) {
            var realLow = low, realHigh = high;
            // if (this.currentScene == SECOND_CORNER_SCENE) {
            //     realLow = (low - 1) / 2;
            //     realHigh = (high - 1) / 2;
            // }
            this.spadBoundaries = [realLow, realHigh];
            this.sbVbo = this.createSBVbo();
            this.setSpadPositions(true/*, this.currentScene == SECOND_CORNER_SCENE*/);
            this.resetActiveBlock();
            this.reset();
        }
    }

    Renderer.prototype.setSpadPos = function (spadPos) {
        this.spadPos = spadPos;
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setDeltaT = function (deltaT) {
        this.deltaT = deltaT;
        this.numIntervals = parseInt(this.maxTime / this.deltaT + 0.05);
        if (this.numIntervals > this.maxTextureSize) {
            this.numIntervals = this.maxTextureSize;
        }
        this.maxTime = this.deltaT * this.numIntervals;
        var pfConvFrag = this.replaceNumIntervals("pf-conv-frag");
        Shaders["replacedPf"] = pfConvFrag;
        this.pfProgram = new tgl.Shader(Shaders, "bp-vert", "replacedPf");
        this.createNLOSBuffers(ModifiedAttributes.NumIntervals);
        this.computePFFilter();
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setMaxTime = function (maxTime) {
        this.numIntervals = parseInt(maxTime / this.deltaT + 0.05);
        if (this.numIntervals > this.maxTextureSize) {
            this.numIntervals = this.maxTextureSize;
        }
        this.maxTime = this.deltaT * this.numIntervals;
        var pfConvFrag = this.replaceNumIntervals("pf-conv-frag");
        Shaders["replacedPf"] = pfConvFrag;
        this.pfProgram = new tgl.Shader(Shaders, "bp-vert", "replacedPf");
        this.createNLOSBuffers(ModifiedAttributes.NumIntervals);
        this.computePFFilter();
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setCaptureMethod = function (captureMethod) {
        // Will have to change if we add more capture methods
        if (this.captureMethod != captureMethod) {
            this.captureMethod = captureMethod;
            if (captureMethod == "single") {
                this.laserGrid = [1.2, (this.spadBoundaries[0] + this.spadBoundaries[1]) / 2];
                this.setEmitterPos(this.emitterPos, this.scene2canvas(this.laserGrid), false);
            } else if (captureMethod == "confocal" || captureMethod == "exhaustive") {
                this.hExhaustive = new Float32Array(this.numSpads * this.numSpads * this.numIntervals);
                this.spreadType = tcore.Renderer.SPREAD_LASER;
                this.laserGrid = [this.spadPoints[2 * this.laserPointedAtSensorIdx], this.spadPoints[2 * this.laserPointedAtSensorIdx + 1]];
                this.setEmitterPos(this.emitterPos, this.scene2canvas(this.laserGrid), false);
            }
            this.createNLOSBuffers(ModifiedAttributes.CaptureMethod);
        }
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setUsePhase = function (usePhase) {
        this.usePhase = usePhase;
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.setInstant = function (instant) {
        this.instant = instant;
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.addInstantSlider = function (slider) {
        this.instantSlider = slider;
    }

    Renderer.prototype.updateSlider = function () {
        if (this.instantSlider != undefined && this.instantSlider != null) {
            this.instantSlider.setValue(this.instant, false);
            this.instantSlider.updateLabel();
        }
    }

    Renderer.prototype.addScene = function (fragName, vertices) {
        this.tracePrograms.push(new tgl.Shader(Shaders, "trace-vert", fragName));

        // Add vertex buffer to show the geometry
        this.sceneVBOs.push(new tgl.VertexBuffer());
        this.sceneVBOs[this.sceneVBOs.length - 1].addAttribute("Position", 2, this.gl.FLOAT, false);
        var numSegments = 0;
        vertices.forEach(vertexList => {
            numSegments += (vertexList.length / 2 - 1);
        });
        this.sceneVBOs[this.sceneVBOs.length - 1].init(numSegments * 2 + 2);
        var vboData = new Float32Array((numSegments * 2 + 2) * 2);
        addRelayWallVertices(vboData, this.aspect);
        var j = 4;
        vertices.forEach(vertexList => {
            for (var i = 0; i < vertexList.length / 2 - 1; i++) {
                vboData[j] = vertexList[2 * i] / this.aspect; j++;
                vboData[j] = vertexList[2 * i + 1]; j++;
                vboData[j] = vertexList[2 * i + 2] / this.aspect; j++;
                vboData[j] = vertexList[2 * i + 3]; j++;
            }
        });
        this.sceneVBOs[this.sceneVBOs.length - 1].copy(vboData);
    }

    Renderer.prototype.setSpadPositions = function (changedBounds = false, horizontal = false) {
        var changeNumSpads = (this.spadHeights === undefined || this.spadHeights.length != this.numSpads);
        var changePos = (changeNumSpads || changedBounds);

        if (changePos && this.spadBoundaries != undefined && this.numSpads != undefined) {
            this.spadHeights = intermediatePositions(this.spadBoundaries[1], this.spadBoundaries[0], this.numSpads);
            this.spadPoints = [];

            this.spads = [];
            if (horizontal) {
                for (var i = 0; i < this.spadHeights.length; i++) {
                    var h = this.spadHeights[i];
                    this.spads.push(new SpadData([h, 0.0], this.spadRadius, this.deltaT, this.maxTextureSize));
                    this.spadPoints.push(h);
                    this.spadPoints.push(0.0);
                }
            } else {
                for (var i = 0; i < this.spadHeights.length; i++) {
                    var h = this.spadHeights[i];
                    this.spads.push(new SpadData([1.2, h], this.spadRadius, this.deltaT, this.maxTime));
                    this.spadPoints.push(1.2);
                    this.spadPoints.push(h);
                }
            }

            var spadGridData = new Float32Array(this.numSpads * 4);
            for (var i = 0; i < this.numSpads; i++) {
                spadGridData[i * 4] = this.spadPoints[i * 2];
                spadGridData[i * 4 + 1] = this.spadPoints[i * 2 + 1];
                spadGridData[i * 4 + 2] = 0.0;
                spadGridData[i * 4 + 3] = 0.0;
            }
            this.spadGridTex = new tgl.Texture(this.numSpads, 1, 4, true, false, true, spadGridData);
            this.spadNormalsData = spadGridData;
            if (horizontal) {
                for (var i = 0; i < this.numSpads; i++) {
                    this.spadNormalsData[i * 4] = 0.0;
                    this.spadNormalsData[i * 4 + 1] = 1.0;
                }
            } else {
                for (var i = 0; i < this.numSpads; i++) {
                    this.spadNormalsData[i * 4] = -1.0;
                    this.spadNormalsData[i * 4 + 1] = 0.0;
                }
            }
            this.spadNormalsTex = new tgl.Texture(this.numSpads, 1, 4, true, false, true, this.spadNormalsData);

            var dist = Math.abs(this.spadHeights[1] - this.spadHeights[0]);
            if (this.spadRadius > dist / 2) {
                this.spadRadius = dist / 2;
            } else if (dist / 2 >= 0.0035) {
                this.spadRadius = 0.0035;
            }

            // Recompile shaders only if necessary
            if (changeNumSpads) {
                var bpSumFrag = this.replaceNumSpads("bp-sum-frag");
                Shaders["replacedSum"] = bpSumFrag;
                this.bpSumProgram = new tgl.Shader(Shaders, "bp-vert", "replacedSum");
                var bpFrag = this.replaceNumSpads("bp-frag");
                Shaders["replacedBp"] = bpFrag;
                this.bpProgram = new tgl.Shader(Shaders, "bp-vert", "replacedBp");
                var bpConf = this.replaceNumSpads("bp-conf-frag");
                Shaders["replacedConfBp"] = bpConf;
                this.bpConfProgram = new tgl.Shader(Shaders, "bp-vert", "replacedConfBp");
                var hVert = this.replaceNumSpads("h-vert");
                Shaders["replacedH"] = hVert;
                this.hProgram = new tgl.Shader(Shaders, "replacedH", "h-frag");
            }
        }
    }

    Renderer.prototype.setSigma = function (sigma) {
        this.sigma = sigma;
        this.computePFFilter();
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.setWavelength = function (wl) {
        this.wl = wl;
        this.computePFFilter();
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.resetActiveBlock = function () {
        this.activeBlock = 4;
    }

    Renderer.prototype.computeEmissionSpectrum = function () {
        if (!this.emissionSpectrum)
            this.emissionSpectrum = new Float32Array(tcore.Renderer.SPECTRUM_SAMPLES);

        switch (this.emissionSpectrumType) {
            case tcore.Renderer.SPECTRUM_WHITE:
                for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i)
                    this.emissionSpectrum[i] = 1.0;
                break;
            case tcore.Renderer.SPECTRUM_INCANDESCENT:
                var h = 6.626070040e-34;
                var c = 299792458.0;
                var kB = 1.3806488e-23;
                var T = this.emitterTemperature;

                for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i) {
                    var l = (LAMBDA_MIN + (LAMBDA_MAX - LAMBDA_MIN) * (i + 0.5) / tcore.Renderer.SPECTRUM_SAMPLES) * 1e-9;
                    var power = 1e-12 * (2.0 * h * c * c) / (l * l * l * l * l * (Math.exp(h * c / (l * kB * T)) - 1.0));

                    this.emissionSpectrum[i] = power;
                }
                break;
            case tcore.Renderer.SPECTRUM_GAS_DISCHARGE:
                var wavelengths = GasDischargeLines[this.emitterGas].wavelengths;
                var strengths = GasDischargeLines[this.emitterGas].strengths;

                for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i)
                    this.emissionSpectrum[i] = 0.0;

                for (var i = 0; i < wavelengths.length; ++i) {
                    var idx = Math.floor((wavelengths[i] - LAMBDA_MIN) / (LAMBDA_MAX - LAMBDA_MIN) * tcore.Renderer.SPECTRUM_SAMPLES);
                    if (idx < 0 || idx >= tcore.Renderer.SPECTRUM_SAMPLES)
                        continue;

                    this.emissionSpectrum[idx] += strengths[i];
                }
        }

        this.computeSpectrumIcdf();

        this.emission.bind(0);
        this.emission.copy(this.emissionSpectrum);
        this.reset();
    }

    Renderer.prototype.computeSpectrumIcdf = function () {
        if (!this.cdf) {
            this.cdf = new Float32Array(tcore.Renderer.SPECTRUM_SAMPLES + 1);
            this.pdf = new Float32Array(tcore.Renderer.SPECTRUM_SAMPLES);
            this.icdf = new Float32Array(tcore.Renderer.ICDF_SAMPLES);
        }

        var sum = 0.0;
        for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i)
            sum += this.emissionSpectrum[i];

        /* Mix in 10% of a uniform sample distribution to stay on the safe side.
           Especially gas emission spectra with lots of emission lines
           tend to have small peaks that fall through the cracks otherwise */
        var safetyPadding = 0.1;
        var normalization = tcore.Renderer.SPECTRUM_SAMPLES / sum;

        /* Precompute cdf and pdf (unnormalized for now) */
        this.cdf[0] = 0.0;
        for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i) {
            this.emissionSpectrum[i] *= normalization;

            /* Also take into account the observer response when distributing samples.
               Otherwise tends to prioritize peaks just barely outside the visible spectrum */
            var observerResponse = (1.0 / 3.0) * (
                Math.abs(this.spectrumTable[i * 4]) +
                Math.abs(this.spectrumTable[i * 4 + 1]) +
                Math.abs(this.spectrumTable[i * 4 + 2]));

            this.pdf[i] = observerResponse * (this.emissionSpectrum[i] + safetyPadding) / (1.0 + safetyPadding);
            this.cdf[i + 1] = this.pdf[i] + this.cdf[i];
        }

        /* All done! Time to normalize */
        var cdfSum = this.cdf[tcore.Renderer.SPECTRUM_SAMPLES];
        for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i) {
            this.pdf[i] *= tcore.Renderer.SPECTRUM_SAMPLES / cdfSum;
            this.cdf[i + 1] /= cdfSum;
        }
        /* Make sure we don't fall into any floating point pits */
        this.cdf[tcore.Renderer.SPECTRUM_SAMPLES] = 1.0;

        /* Precompute an inverted mapping of the cdf. This is biased!
           Unfortunately we can't really afford to do runtime bisection
           on the GPU, so this will have to do. For our purposes a small
           amount of bias is tolerable anyway. */
        var cdfIdx = 0;
        for (var i = 0; i < tcore.Renderer.ICDF_SAMPLES; ++i) {
            var target = Math.min((i + 1) / tcore.Renderer.ICDF_SAMPLES, 1.0);
            while (this.cdf[cdfIdx] < target)
                cdfIdx++;
            this.icdf[i] = (cdfIdx - 1.0) / tcore.Renderer.SPECTRUM_SAMPLES;
        }

        this.emissionIcdf.bind(0);
        this.emissionIcdf.copy(this.icdf);
        this.emissionPdf.bind(0);
        this.emissionPdf.copy(this.pdf);
    }

    Renderer.prototype.setMaxPathLength = function (length) {
        if (length != this.maxPathLength) {
            this.maxPathLength = length;
            this.reset();
        }
    }

    Renderer.prototype.setMinPathLength = function (length) {
        if (length != this.minPathLength) {
            this.minPathLength = length;
            this.reset();
        }
    }

    Renderer.prototype.setMaxSampleCount = function (count) {
        this.maxSampleCount = count;
    }

    Renderer.prototype.changeResolution = function (width, height) {
        if (this.width && this.height) {
            this.emitterPos[0] = (this.emitterPos[0] + 0.5) * width / this.width - 0.5;
            this.emitterPos[1] = (this.emitterPos[1] + 0.5) * height / this.height - 0.5;
        }

        this.width = width;
        this.height = height;
        this.aspect = this.width / this.height;

        this.screenBuffer = new tgl.Texture(this.width, this.height, 4, true, false, true, null);
        this.waveBuffer = new tgl.Texture(this.width, this.height, 4, true, false, true, null);

        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.changeReconstructionResolution = function (height) {
        if (this.numPixels === undefined || this.numPixels[1] != height) {
            this.numPixels = [parseInt(height * this.aspect), height];
            this.createNLOSBuffers(ModifiedAttributes.NumPixels);
            if (this.finished())
                this.redraw();
        }
    }

    Renderer.prototype.changeScene = function (idx, name, rwallMaterial = genScene.Diffuse) {
        this.resetActiveBlock();
        /*if (idx == SECOND_CORNER_SCENE + 1) {
            this.setSpadPos([0.4, -0.8]);
        } else {*/
        this.setSpadPos([0, -0.6]);
        // }

        /*if (this.currentScene == SECOND_CORNER_SCENE) {
            // Changing from the different relay wall
            this.setSpadPos([0, -0.6]);
            this.currentScene = idx;
            this.setSpadBoundaries(this.spadBoundaries[0] * 2 + 1, this.spadBoundaries[1] * 2 + 1);
            this.setSpadPositions(true, false);
        } else if (idx == SECOND_CORNER_SCENE) {
            // Changing to the different relay wall
            this.setSpadPos([[-1, 0.8]]);
            this.currentScene = idx;
            this.setSpadBoundaries(this.spadBoundaries[0], this.spadBoundaries[1]);
            this.setSpadPositions(true, true);
        } else*/
        this.currentScene = idx;
        this.currentSceneName = name;
        this.rwallMaterial = rwallMaterial;
        this.reset();
    }

    Renderer.prototype.computeBackprojection = function (inputTex, outputBuffer) {
        var gl = this.gl;
        // this.quadVbo.bind();

        // Clear previous result
        gl.viewport(0, 0, this.numPixels[0], this.numPixels[1]);
        this.fbo.attachTexture(outputBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        if (this.isConvCamera) gl.enable(gl.BLEND);

        var instant = (this.isConvCamera) ? 0 : this.instant;
        var n = (this.isConvCamera) ? this.numIntervals : 1;

        var start = Date.now();
        for (var i = 0; i < n; i++) {
            if (this.captureMethod == "single") {
                this.bpProgram.bind();
                inputTex.bind(0);
                this.spadGridTex.bind(1);
                this.planeGridTex.bind(2);
                this.bpProgram.uniformF("tmax", this.maxTime);
                this.bpProgram.uniformF("instant", instant * this.deltaT);
                this.bpProgram.uniformF("lightIsLaser", this.spreadType == tcore.Renderer.SPREAD_LASER);
                this.bpProgram.uniformF("isConfocalModel", this.isVirtualConf);
                this.bpProgram.uniformI("useAbsolute", this.isConvCamera && this.addModules);
                this.bpProgram.uniformTexture("radiance", inputTex);
                this.bpProgram.uniform2F("laserPos", this.laserPos[0], this.laserPos[1]);
                this.bpProgram.uniform2F("laserGrid", this.laserGrid[0], this.laserGrid[1]);
                this.bpProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
                this.bpProgram.uniformTexture("spadGrid", this.spadGridTex);
                this.bpProgram.uniformTexture("planeGrid", this.planeGridTex);
                this.quadVbo.draw(this.bpProgram, gl.TRIANGLE_FAN);
            } else if (this.captureMethod == "confocal") {
                this.bpConfProgram.bind();
                inputTex.bind(0);
                this.spadGridTex.bind(1);
                this.planeGridTex.bind(2);
                this.bpConfProgram.uniformF("tmax", this.maxTime);
                this.bpConfProgram.uniformF("instant", instant * this.deltaT);
                this.bpConfProgram.uniformF("isConfocalModel", this.isVirtualConf);
                this.bpConfProgram.uniformI("useAbsolute", this.isConvCamera && this.addModules);
                this.bpConfProgram.uniformTexture("radiance", inputTex);
                this.bpConfProgram.uniform2F("laserPos", this.laserPos[0], this.laserPos[1]);
                this.bpConfProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
                this.bpConfProgram.uniformTexture("wallGrid", this.spadGridTex);
                this.bpConfProgram.uniformTexture("planeGrid", this.planeGridTex);
                this.quadVbo.draw(this.bpConfProgram, gl.TRIANGLE_FAN);
            } else if (this.captureMethod == "exhaustive") {
                // TODO(diego) different camera models depending on what you want to do with this...
            }
            instant++;
        }
        var finish = Date.now();
        if (this.isConvCamera) console.log(`${finish - start} ms`);
        gl.disable(gl.BLEND);
    }

    Renderer.prototype.findMax = function (inputTex, isComplex = false) {
        // Find maximum value, dividing the area by 4 in each pass
        var width = inputTex.width;
        var height = inputTex.height;
        var maxBuffers = [inputTex];
        // this.quadVbo.bind();

        var gl = this.gl;
        this.fbo.bind();
        var current = 0;
        var useSameChannel = true;
        while (width > 1) {
            var numPixels = [width, height];
            width = parseInt(width / 2);
            height = (height > 1) ? parseInt(height / 2) : height;
            var next = 1 - current;
            maxBuffers[next] = new tgl.Texture(width, height, 4, true, false, true, null);

            gl.viewport(0, 0, width, height);
            this.fbo.attachTexture(maxBuffers[next], 0);
            gl.clear(gl.COLOR_BUFFER_BIT);

            this.maxProgram.bind();
            maxBuffers[current].bind(0);
            this.maxProgram.uniform2F("numPixels", numPixels[0], numPixels[1]);
            this.maxProgram.uniformI("useSameChannel", useSameChannel);
            this.maxProgram.uniformI("isComplex", useSameChannel && isComplex);
            // Only complex in the first pass, after that it's just modules
            // When using the conventional camera, we are using modules
            this.maxProgram.uniformTexture("tex", maxBuffers[current]);
            this.quadVbo.draw(this.maxProgram, gl.TRIANGLE_FAN);

            current = next;
            useSameChannel = false;
        }

        return maxBuffers[current];
    }

    /*Renderer.prototype.getCaptureSum = function () {
        // Find total sum, dividing the area by 4 in each pass or by 2 once height is 1
        var height = this.numSpads;
        var width = this.numIntervals;
        var sumBuffers = [this.capturedBuffer];
    
        var gl = this.gl;
    
        this.fbo.bind();
        this.quadVbo.bind();
        var current = 0;
        // Assuming width (temporal dimension) will always be greater (or equal) than height (spatial, spad dimension)
        while (width > 1) {
            var oneRow = (height == 1);
            width = width / 2;
            height = (height > 1) ? height / 2 : height;
            var next = 1 - current;
            sumBuffers[next] = new tgl.Texture(width, height, 4, true, false, true, null);
    
            gl.viewport(0, 0, width, height);
            this.fbo.attachTexture(sumBuffers[next], 0);
            gl.clear(gl.COLOR_BUFFER_BIT);
    
            this.sumProgram.bind();
            sumBuffers[current].bind(0);
            this.sumProgram.uniformI("oneRow", oneRow);
            this.sumProgram.uniform2F("numPixels", width, height);
            this.sumProgram.uniformTexture("tex", sumBuffers[current]);
            this.quadVbo.draw(this.sumProgram, gl.TRIANGLE_FAN);
    
            current = next;
        }
        this.fbo.unbind();
    
        return sumBuffers[current];
    }
    */

    Renderer.prototype.filterLap = function () {
        var gl = this.gl;

        this.fbo.attachTexture(this.filteredBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Filter the reconstruction with Laplacian
        this.lapProgram.bind();
        this.unfilteredBuffer.bind(0);
        this.lapProgram.uniformF("Aspect", this.aspect);
        this.lapProgram.uniform2F("numPixels", this.numPixels[0], this.numPixels[1]);
        this.lapProgram.uniformFV("kernel", this.lapKernel);
        this.lapProgram.uniformTexture("radiance", this.unfilteredBuffer);
        this.quadVbo.draw(this.lapProgram, gl.TRIANGLE_FAN);
    }

    Renderer.prototype.filterLoG = function () {
        var gl = this.gl;

        this.fbo.attachTexture(this.filteredBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Filter the reconstruction with LoG (Laplacian of Gaussian)
        this.logProgram.bind();
        this.unfilteredBuffer.bind(0);
        this.logKernelTex.bind(1);
        this.logProgram.uniform2F("u_textureSize", this.numPixels[0], this.numPixels[1]);
        this.logProgram.uniformTexture("u_kernel", this.logKernelTex);
        this.logProgram.uniformTexture("u_image", this.unfilteredBuffer);
        this.quadVbo.draw(this.logProgram, gl.TRIANGLE_FAN);
    }

    Renderer.prototype.computePFFilter = function () {
        var gl = this.gl;

        this.fbo.bind();
        this.fbo.drawBuffers(1);

        gl.viewport(0, 0, this.numIntervals, 1);
        this.fbo.attachTexture(this.filterBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Create the phasor fields filter
        this.pfKernelProgram.bind();
        this.timeVectorTex.bind(0);
        this.pfKernelProgram.uniformI("numIntervals", this.numIntervals);
        this.pfKernelProgram.uniformF("deltaT", this.deltaT);
        this.pfKernelProgram.uniformF("wl", this.wl);
        this.pfKernelProgram.uniformF("sigma", this.sigma);
        this.pfKernelProgram.uniformTexture("timeTex", this.timeVectorTex);
        this.quadVbo.bind();
        this.quadVbo.draw(this.pfKernelProgram, gl.TRIANGLE_FAN);

        this.pfFilterValues = this.filterBuffer.getArray(this.numIntervals);
        this.fbo.unbind();

        gl = this.glFilter;
        var values = [];
        var j = 0;
        for (var i = Math.floor(7 * this.numIntervals / 16); i < Math.floor(9 * this.numIntervals / 16); i++) {
            values[2 * j] = (j + 0.5) / this.numIntervals * 16 - 1;
            values[2 * j + 1] = this.pfFilterValues[4 * i];
            j++;
        }

        var vbo = new pgl.VertexBuffer();
        vbo.addAttribute("Position", 2, gl.FLOAT, false);
        vbo.init(values.length / 2);
        vbo.copy(new Float32Array(values));

        gl.viewport(0, 0, this.filterCanvas.width, this.filterCanvas.height);
        gl.clear(gl.COLOR_BUFFER_BIT);

        this.plotProgram.bind();
        vbo.bind();
        vbo.draw(this.plotProgram, gl.LINE_STRIP);
    }

    Renderer.prototype.filterPF = function () {
        var gl = this.gl;

        gl.viewport(0, 0, this.numIntervals, this.numSpads);
        this.fbo.attachTexture(this.interFiltBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Convolute the filter with the captured signal
        this.pfProgram.bind();
        this.capturedBuffer.bind(0);
        this.filterBuffer.bind(1);
        this.pfProgram.uniformTexture("u_image", this.capturedBuffer);
        this.pfProgram.uniformTexture("u_kernel", this.filterBuffer);
        this.quadVbo.draw(this.pfProgram, gl.TRIANGLE_FAN);
    }

    const ModifiedAttributes = {
        All: 0,
        NumPixels: 1,
        NumSpads: 2,
        BboxCorners: 3,
        NumIntervals: 4,
        CaptureMethod: 5,
        FilterType: 6,
    }

    Renderer.prototype.createNLOSBuffers = function (modifiedAttr) {
        if ((modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumPixels) && this.numPixels != undefined) {
            var w = this.numPixels[0] * this.numPixels[1];
            var h = 1;
            while (w > this.maxTextureSize) {
                w /= 2;
                h *= 2;
            }
            this.numRows = h;
        }
        // Common buffers for NLOS reconstruction
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumPixels || modifiedAttr == ModifiedAttributes.FilterType) {
            if (this.numPixels != undefined) {
                this.unfilteredBuffer = new tgl.Texture(this.numPixels[0], this.numPixels[1], 4, true, false, true, null);
                if (this.filterType === 'none')
                    this.filteredBuffer = this.unfilteredBuffer;
                else
                    this.filteredBuffer = new tgl.Texture(this.numPixels[0], this.numPixels[1], 4, true, false, true, null);
            }
        }
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumIntervals || modifiedAttr == ModifiedAttributes.NumSpads)
            if (this.numIntervals != undefined && this.numSpads != undefined) {
                this.capturedBuffer = new tgl.Texture(this.numIntervals, this.numSpads, 4, true, false, true, null);
                // this.capturedBuffer3D = new tgl.Texture3D(this.numIntervals, this.numSpads, this.numSpads, 4, null);
                if (this.DEBUG) {
                    this.h = new Float32Array(this.numIntervals * this.numSpads);
                    this.hFilt = new Float32Array(2 * this.h.length);
                }
            }
        // PF buffers
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumIntervals || modifiedAttr == ModifiedAttributes.NumSpads)
            if (this.numIntervals != undefined && this.numSpads != undefined) {
                this.interFiltBuffer = new tgl.Texture(this.numIntervals, this.numSpads, 4, true, false, true, null);
            }
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumIntervals)
            if (this.numIntervals != undefined)
                this.filterBuffer = new tgl.Texture(this.numIntervals, 1, 4, true, false, true, null);

        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumPixels || modifiedAttr == ModifiedAttributes.BboxCorners) {
            if (this.numPixels != undefined && this.bboxCorners != undefined) {
                var xValues = linspace(this.bboxCorners[0], this.bboxCorners[2], this.numPixels[0]);
                var yValues = linspace(this.bboxCorners[1], this.bboxCorners[3], this.numPixels[1]);
                xv = xValues;
                yv = yValues;
                var planeGridData = new Float32Array(this.numPixels[0] * this.numPixels[1] * 4);
                var k = 0;
                for (var i = 0; i < this.numPixels[1]; i++) {
                    for (var j = 0; j < this.numPixels[0]; j++) {
                        planeGridData[k] = xValues[j];
                        planeGridData[k + 1] = yValues[i];
                        planeGridData[k + 2] = 0.0;
                        planeGridData[k + 3] = 0.0;
                        k += 4;
                    }
                }
                var w = this.numPixels[0] * this.numPixels[1] / this.numRows;
                var h = this.numRows;
                // this.planeGridTex = new tgl.Texture(w, h, 4, true, false, true, planeGridData);
                this.planeGridTex = new tgl.Texture(this.numPixels[0], this.numPixels[1], 4, true, false, true, planeGridData);
                this.planeGridData = planeGridData;
            }
        }
    }

    Renderer.prototype.reset = function () {
        if (!this.needsReset)
            return;
        this.needsReset = false;
        this.wavesTraced = 0;
        this.raysTraced = 0;
        this.samplesTraced = 0;
        this.pathLength = 0;
        this.elapsedTimes = [];
        this.videoElapsedTimes = [];
        this.instant = 0;
        this.msPerFrame = 1000 / 100;
        this.currentCall = 0;
        this.nlosElapsedTimes = [];
        // this.setSpadPos([0, -0.6]);
        this.laserPointedAtSensorIdx = 0;
        if (this.captureMethod != "single") {
            this.laserGrid = [this.spadPoints[0], this.spadPoints[1]];
            this.setEmitterPos(this.emitterPos, this.scene2canvas(this.laserGrid), false);
        }
        if (this.h != undefined) {
            for (var i = 0; i < this.h.length; i++) {
                this.h[i] = 0;
                this.hFilt[2 * i] = 0;
                this.hFilt[2 * i + 1] = 0;
            }
        }

        if (this.fbo != undefined) {
            this.fbo.bind();
            this.fbo.drawBuffers(1);
            // Scene buffers
            if (this.screenBuffer != undefined) {
                this.fbo.attachTexture(this.screenBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            if (this.capturedBuffer != undefined) {
                this.fbo.attachTexture(this.capturedBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            // Reconstruction buffers
            if (this.unfilteredBuffer != undefined) {
                this.fbo.attachTexture(this.unfilteredBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            if (this.interFiltBuffer != undefined) {
                this.fbo.attachTexture(this.interFiltBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            if (this.filteredBuffer != undefined) {
                this.fbo.attachTexture(this.filteredBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            this.fbo.unbind();
        }
        this.updateSlider();
    }

    Renderer.prototype.setSpreadType = function (type) {
        this.resetActiveBlock();
        this.spreadType = type;
        this.computeSpread();
        this.reset();
    }

    Renderer.prototype.setNormalizedEmitterPos = function (posA, posB) {
        this.setEmitterPos(
            [posA[0] * this.width, posA[1] * this.height],
            [posB[0] * this.width, posB[1] * this.height]
        );
    }

    // Compute intersection point between a ray (origin, dir) and a segment from a to b
    function intersect(origin, dir, a, b) {
        var ba = (b[0] - a[0]) / (b[1] - a[1]);
        var t = (ba * (origin[1] - a[1]) - origin[0] + a[0]) / (dir[0] - ba * dir[1]);
        if (t >= 0) { // Intersects line
            var t2 = (origin[1] + t * dir[1] - a[1]) / (b[1] - a[1]);
            if (t2 >= 0 && t2 <= 1) { // Intersection inside the segment
                return [origin[0] + t * dir[0], origin[1] + t * dir[1]];
            }
        }
        return [];
    }

    Array.prototype.norm = function () {
        return Math.sqrt(this[0] * this[0] + this[1] * this[1])
    }

    Renderer.prototype.setEmitterPos = function (posA, posB, reset = true) {
        // this.emitterPos = this.spreadType == tcore.Renderer.SPREAD_POINT ? posB : posA;
        this.emitterPos = posA;
        this.emitterAngle = this.spreadType == tcore.Renderer.SPREAD_POINT ? 0.0 : Math.atan2(posB[1] - posA[1], posB[0] - posA[0]);
        this.computeSpread();

        this.laserPos = [((this.emitterPos[0] / this.width) * 2.0 - 1.0) * this.aspect, 1.0 - (this.emitterPos[1] / this.height) * 2.0];
        this.laserFocus = [((posB[0] / this.width) * 2.0 - 1.0) * this.aspect, 1.0 - (posB[1] / this.height) * 2.0];
        var dir = [this.laserFocus[0] - this.laserPos[0], this.laserFocus[1] - this.laserPos[1]];
        var mod = dir.norm();
        if (mod == 0) {
            dir = [1, 0];
            mod = 1;
        }
        dir = [dir[0] / mod, dir[1] / mod];
        this.laserGrid = intersect(this.laserPos, dir, [1.2, 1.0], [1.2, -1.0]);

        if (this.laserGrid.length == 0) {
            console.log("The light is not reaching the relay wall");
            this.laserGrid = [1.78, 0];
        }

        if (this.spreadType === tcore.Renderer.SPREAD_LASER && reset) {
            this.setSpadPos(this.laserPos);
        }

        if (reset)
            this.reset();
    }

    Renderer.prototype.setFilterType = function (type) {
        var prev = this.filterType;
        this.filterType = type;
        if (prev === 'none' || type === 'none') {
            this.createNLOSBuffers(ModifiedAttributes.FilterType);
        }
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.setToneMapper = function (type) {
        if (type === 'none') {
            this.showProgram = new tgl.Shader(Shaders, "show-vert", "show-frag");
        } else {
            var pattern = new RegExp('{func}', 'g');
            var shaderSource = Shaders["show-func-frag"];
            Shaders["show-replaced-frag"] = shaderSource.replace(pattern, type);
            this.showProgram = new tgl.Shader(Shaders, "show-vert", "show-replaced-frag");
        }
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.computeSpread = function () {
        switch (this.spreadType) {
            case tcore.Renderer.SPREAD_POINT:
                this.emitterPower = 0.1;
                this.spatialSpread = 0.0;
                this.angularSpread = [0.0, Math.PI * 2.0];
                break;
            case tcore.Renderer.SPREAD_CONE:
                this.emitterPower = 0.03;
                this.spatialSpread = 0.0;
                this.angularSpread = [this.emitterAngle, Math.PI * 0.3];
                break;
            case tcore.Renderer.SPREAD_BEAM:
                this.emitterPower = 0.03;
                this.spatialSpread = 0.4;
                this.angularSpread = [this.emitterAngle, 0.0];
                break;
            case tcore.Renderer.SPREAD_LASER:
                this.emitterPower = 0.05;
                this.spatialSpread = 0.0;
                this.angularSpread = [this.emitterAngle, 0.0];
                break;
            case tcore.Renderer.SPREAD_AREA:
                this.emitterPower = 0.1;
                this.spatialSpread = 0.4;
                this.angularSpread = [this.emitterAngle, Math.PI];
                break;
        }
    }

    Renderer.prototype.createQuadVbo = function () {
        var vbo = new tgl.VertexBuffer();
        vbo.addAttribute("Position", 3, this.gl.FLOAT, false);
        vbo.addAttribute("TexCoord", 2, this.gl.FLOAT, false);
        vbo.init(4);
        vbo.copy(new Float32Array([
            1.0, 1.0, 0.0, 1.0, 1.0,
            -1.0, 1.0, 0.0, 0.0, 1.0,
            -1.0, -1.0, 0.0, 0.0, 0.0,
            1.0, -1.0, 0.0, 1.0, 0.0
        ]));

        return vbo;
    }

    Renderer.prototype.createQuadVbo2 = function () {
        var vbo = new tgl.VertexBuffer();
        vbo.addAttribute("Position", 2, this.gl.FLOAT, false);
        vbo.init(4);
        vbo.copy(new Float32Array([
            -1.0, 1.0,
            1.0, 1.0,
            1.0, -1.0,
            -1.0, -1.0,
        ]));

        return vbo;
    }

    Renderer.prototype.createQuadVbo3 = function () {
        var vbo = new tgl.VertexBuffer();
        vbo.addAttribute("Position", 2, this.gl.FLOAT, false);
        vbo.addAttribute("TexCoord", 2, this.gl.FLOAT, false);
        vbo.init(4);
        // console.log([
        //     -this.aspect, -0.389,
        //     -this.aspect + 500 / 720, -0.389,
        //     -this.aspect + 500 / 720, -1.0,
        //     -this.aspect, -1.0]);
        vbo.copy(new Float32Array([
            0.0, -1.0,
            1.0, 0.0,
            1.0, -1.0,
            0.0, 0.0,
            // -this.aspect, -0.389,
            // -this.aspect + 500 / 720, -0.389,
            // -this.aspect + 500 / 720, -1.0,
            // -this.aspect, -1.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 0.0,
            0.0, 1.0,
        ]));

        return vbo;
    }

    Renderer.prototype.createSBVbo = function () {
        var vbo = new tgl.VertexBuffer();
        vbo.addAttribute("Position", 2, this.gl.FLOAT, false);
        vbo.init(2);
        /*if (this.currentScene == SECOND_CORNER_SCENE) {
            vbo.copy(new Float32Array([
                this.spadBoundaries[0] / this.aspect, 0.0,
                this.spadBoundaries[1] / this.aspect, 0.0
            ]))
        } else {*/
        vbo.copy(new Float32Array([
            1.2 / this.aspect, this.spadBoundaries[0],
            1.2 / this.aspect, this.spadBoundaries[1]
        ]));
        //}
        return vbo;
    }

    Renderer.prototype.totalRaysTraced = function () {
        return this.raysTraced;
    }

    Renderer.prototype.maxRayCount = function () {
        return this.maxPathLength * this.maxSampleCount;
    }

    Renderer.prototype.totalSamplesTraced = function () {
        return this.samplesTraced;
    }

    Renderer.prototype.progress = function () {
        return Math.min(this.totalRaysTraced() / this.maxRayCount(), 1.0);
    }

    function getCurrentDateTimeString() {
        const now = new Date();

        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0'); // Month is 0-based, so we add 1 and format to two digits.
        const day = String(now.getDate()).padStart(2, '0');
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');

        return `${year}${month}${day}-${hours}${minutes}${seconds}`;
      }

    Renderer.prototype.finished = function () {
        if (this.captureMethod == "single") {
            return this.totalSamplesTraced() >= this.maxSampleCount;
        } else {
            if (this.laserPointedAtSensorIdx >= this.numSpads)
                return true;
            if (this.totalSamplesTraced() >= this.maxSampleCount) {
                if (this.captureMethod == "confocal") {
                    this.laserPointedAtSensorIdx++;
                    if (this.laserPointedAtSensorIdx >= this.numSpads) {
                        return true;
                    }
                    this.laserGrid = [this.spadPoints[2 * this.laserPointedAtSensorIdx], this.spadPoints[2 * this.laserPointedAtSensorIdx + 1]];
                    this.setEmitterPos(this.emitterPos, this.scene2canvas(this.laserGrid), false);
                    this.partialReset();
                } else if (this.captureMethod == "exhaustive") {
                    var partLength = this.numIntervals * this.numSpads;
                    var hPartial = this.capturedBuffer.getArray(partLength);
                    for (let i = 0; i < hPartial.length; i++) {
                        this.hExhaustive[partLength * this.laserPointedAtSensorIdx + i] = hPartial[i * 4];
                    }
                    this.capturedBuffer.clear();
                    this.laserPointedAtSensorIdx++;
                    if (this.laserPointedAtSensorIdx >= this.numSpads) {
                        var downloadFiles = async () => {
                            text = this.numIntervals + "," + this.numSpads + "," + this.numSpads + ",";
                            text += this.hExhaustive.join(",");
                            var blob = new Blob([text], { type: "text/csv;charset=utf-8" });
                            var currentTime = getCurrentDateTimeString();
                            saveAs(blob, "hExhaustive-" + this.currentSceneName + "-" + currentTime + ".csv");
                            var sceneData = "NAME:," + this.currentSceneName + ",";
                            sceneData += "BBOX(x0y0x1y1),";
                            sceneData += this.bboxCorners[0] + ",";
                            sceneData += this.bboxCorners[1] + ",";
                            sceneData += this.bboxCorners[2] + ",";
                            sceneData += this.bboxCorners[3] + ",";
                            sceneData += "LASER-ORIGIN:," + this.laserPos[0] + "," + this.laserPos[1] + ",";
                            sceneData += "SPAD-ORIGIN:," + this.spadPos[0] + "," + this.spadPos[1] + ",";
                            sceneData += "DELTA_T:," + this.deltaT + ",";
                            var numSpads = this.numSpads;
                            sceneData += "NUM-SPADS:," +  numSpads + ",SPADS(N * PXPYNXNY):,";
                            var spadPosArray = this.spadGridTex.getArray(numSpads);
                            for (let i = 0; i < numSpads; i++) {
                                sceneData += spadPosArray[4 * i + 0] + ",";
                                sceneData += spadPosArray[4 * i + 1] + ",";
                                sceneData += "-1,0,"; // Normal vector
                            }
                            sceneData = sceneData.slice(0, -1);
                            await new Promise(r => setTimeout(r, 1000)); // Avoid downloading only the second file but twice on Chrome
                            var blob2 = new Blob([sceneData], { type: "text/csv;charset=utf-8" });
                            saveAs(blob2, "sceneData-" + this.currentSceneName + "-" + currentTime + ".csv");
                        }
                        downloadFiles();
                        return true;
                    }
                    this.laserGrid = [this.spadPoints[2 * this.laserPointedAtSensorIdx], this.spadPoints[2 * this.laserPointedAtSensorIdx + 1]];
                    this.setEmitterPos(this.emitterPos, this.scene2canvas(this.laserGrid), false);
                    this.partialReset();
                }
            }
            return false;
        }
    }

    Renderer.prototype.videoFinished = function () {
        if (this.playing) {
            return this.instant >= this.numIntervals - 1;
        } else {
            return true;
        }
    }

    Renderer.prototype.partialReset = function () {
        this.wavesTraced = 0;
        this.raysTraced = 0;
        this.samplesTraced = 0;
        this.pathLength = 0;
        this.elapsedTimes = [];
        this.videoElapsedTimes = [];
        this.playing = false;
        this.instant = 0;

        if (this.fbo != undefined) {
            this.fbo.bind();
            this.fbo.drawBuffers(1);
            // Scene buffers
            if (this.screenBuffer != undefined) {
                this.fbo.attachTexture(this.screenBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            this.fbo.unbind();
        }
        this.updateSlider();
    }

    Renderer.prototype.composite = function (count = this.activeBlock) {
        this.screenBuffer.bind(0);
        this.gl.enable(this.gl.BLEND);
        if (this.showGeometry) {
            this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);
            var numLines = this.sceneVBOs[this.currentScene].length;
            if (numLines < 10) {
                this.gl.lineWidth(4.0);
            } else if (numLines < 100) {
                this.gl.lineWidth(2.0);
            } else {
                this.gl.lineWidth(1.5);
            }
            this.geometryProgram.bind();
            this.geometryProgram.uniform4F("uColor", 0.0, 0.0, 0.0, 1.0);
            this.sceneVBOs[this.currentScene].bind();
            this.sceneVBOs[this.currentScene].draw(this.geometryProgram, this.gl.LINES);
        } else {
            this.gl.blendFunc(this.gl.ONE, this.gl.ONE);
            this.compositeProgram.bind();
            this.compositeProgram.uniformTexture("Frame", this.screenBuffer);
            this.compositeProgram.uniformF("Exposure", this.width / (Math.max(this.samplesTraced, this.raySize * count)));
            this.quadVbo.bind();
            this.quadVbo.draw(this.compositeProgram, this.gl.TRIANGLE_FAN);
        }


        this.rwallProgram.bind();
        this.rwallProgram.uniformF("numSpads", this.numSpads);
        this.rwallProgram.uniformF("aspect", this.aspect);
        this.rwallProgram.uniform2F("firstSpad", this.spadPoints[0], this.spadPoints[1]);
        this.rwallProgram.uniform2F("lastSpad", this.spadPoints[2*this.numSpads-2], this.spadPoints[2*this.numSpads-1]);
        if (this.showGeometry) {
            this.rwallProgram.uniformF("spadRadius", 0.014);
            this.rwallProgram.uniform4F("uColor", 0.0, 0.4, 0.9, 1.0);
        } else {
            // TODO: this.spadRadius sometimes goes down to zero and doesn't grow back
            // TODO: allow the user to define the radius
            this.rwallProgram.uniformF("spadRadius", 0.007); // It's not this.spadRadius because it is small and difficult to see
            this.rwallProgram.uniform4F("uColor", 0.0, 1.0, 1.0, 1.0);
        }
        this.quadVbo.bind();
        this.quadVbo.draw(this.rwallProgram, this.gl.TRIANGLE_FAN);
        this.gl.disable(this.gl.BLEND);
    }

    Renderer.prototype.redraw = function () {
        var gl = this.gl;

        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.viewport(0, 0, this.width, this.height);
        gl.scissor(0, 0, this.width, this.height);
        this.composite();

        gl.enable(gl.SCISSOR_TEST);
        gl.scissor(this.width, 0, this.separationWidth, this.height);
        gl.clearColor(1.0, 1.0, 1.0, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.disable(gl.SCISSOR_TEST);
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        this.renderNLOS();
    }

    Renderer.prototype.setShowGeometry = function (showGeometry) {
        this.showGeometry = showGeometry;
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.render = function (timestamp) {
        this.needsReset = true;
        this.elapsedTimes.push(timestamp);
        if (this.nlosElapsedTimes.length == 0) {
            this.nlosElapsedTimes.push(timestamp);
        }

        var current = this.currentState;
        var next = 1 - current;

        this.fbo.bind();

        var gl = this.gl;
        gl.viewport(0, 0, this.raySize, this.raySize);
        gl.scissor(0, 0, this.raySize, this.activeBlock);
        gl.enable(gl.SCISSOR_TEST);
        this.fbo.drawBuffers(4);
        this.rayStates[next].attach(this.fbo);
        this.quadVbo.bind();

        if (this.pathLength == 0) {
            this.initProgram.bind();
            this.rayStates[current].rngTex.bind(0);
            this.spectrum.bind(1);
            this.emission.bind(2);
            this.emissionIcdf.bind(3);
            this.emissionPdf.bind(4);
            this.initProgram.uniformTexture("RngData", this.rayStates[current].rngTex);
            this.initProgram.uniformTexture("Spectrum", this.spectrum);
            this.initProgram.uniformTexture("Emission", this.emission);
            this.initProgram.uniformTexture("ICDF", this.emissionIcdf);
            this.initProgram.uniformTexture("PDF", this.emissionPdf);
            this.initProgram.uniform2F("EmitterPos", ((this.emitterPos[0] / this.width) * 2.0 - 1.0) * this.aspect, 1.0 - (this.emitterPos[1] / this.height) * 2.0);
            this.initProgram.uniform2F("EmitterDir", Math.cos(this.angularSpread[0]), -Math.sin(this.angularSpread[0]));
            this.initProgram.uniformF("EmitterPower", this.emitterPower);
            this.initProgram.uniformF("SpatialSpread", this.spatialSpread);
            this.initProgram.uniform2F("AngularSpread", -this.angularSpread[0], this.angularSpread[1]);
            this.quadVbo.draw(this.initProgram, gl.TRIANGLE_FAN);

            current = 1 - current;
            next = 1 - next;

            this.rayStates[next].attach(this.fbo);
        }

        var traceProgram = this.tracePrograms[this.currentScene];
        traceProgram.bind();
        this.rayStates[current].bind(traceProgram);
        this.quadVbo.draw(traceProgram, gl.TRIANGLE_FAN);

        this.rayStates[next].detach(this.fbo);

        gl.disable(gl.SCISSOR_TEST);
        gl.viewport(0, 0, this.width, this.height);
        gl.scissor(0, 0, this.width, this.height);

        this.fbo.drawBuffers(1);
        this.fbo.attachTexture(this.waveBuffer, 0);

        if (this.pathLength == 0 || this.wavesTraced == 0)
            gl.clear(gl.COLOR_BUFFER_BIT);

        gl.enable(gl.BLEND);

        this.rayProgram.bind();
        this.rayStates[current].posTex.bind(0);
        this.rayStates[next].posTex.bind(1);
        this.rayStates[current].rgbTex.bind(2);
        this.rayStates[current].timeTex.bind(3);
        this.rayStates[next].timeTex.bind(4);
        this.rayProgram.uniformTexture("PosDataA", this.rayStates[current].posTex);
        this.rayProgram.uniformTexture("PosDataB", this.rayStates[next].posTex);
        this.rayProgram.uniformTexture("RgbData", this.rayStates[current].rgbTex);
        this.rayProgram.uniformTexture("TimeDataA", this.rayStates[current].timeTex);
        this.rayProgram.uniformTexture("TimeDataB", this.rayStates[next].timeTex);
        this.rayProgram.uniformF("Aspect", this.aspect);
        this.rayVbo.bind();
        this.rayVbo.draw(this.rayProgram, gl.LINES, this.raySize * this.activeBlock * 2);

        this.raysTraced += this.raySize * this.activeBlock;
        if (this.pathLength >= this.minPathLength)
            this.computeSpadValues(current, next);
        this.pathLength += 1;

        this.quadVbo.bind();

        if (this.pathLength == this.maxPathLength || this.wavesTraced == 0) {
            this.fbo.attachTexture(this.screenBuffer, 0);

            this.waveBuffer.bind(0);
            this.passProgram.bind();
            this.passProgram.uniformTexture("Frame", this.waveBuffer);
            this.quadVbo.draw(this.passProgram, gl.TRIANGLE_FAN);

            if (this.pathLength == this.maxPathLength) {
                this.samplesTraced += this.raySize * this.activeBlock
                this.wavesTraced += 1;
                this.pathLength = 0;

                if (this.elapsedTimes.length > 5) {
                    var avgTime = 0;
                    for (var i = 1; i < this.elapsedTimes.length; ++i)
                        avgTime += this.elapsedTimes[i] - this.elapsedTimes[i - 1];
                    avgTime /= this.elapsedTimes.length - 1;

                    /* Let's try to stay at reasonable frame times. Targeting 16ms is
                       a bit tricky because there's a lot of variability in how often
                       the browser executes this loop and 16ms might well not be
                       reachable, but 24ms seems to do ok */
                    if (avgTime > 24.0)
                        this.activeBlock = Math.max(4, this.activeBlock - 4);
                    else
                        this.activeBlock = Math.min(512, this.activeBlock + 4);

                    this.elapsedTimes = [this.elapsedTimes[this.elapsedTimes.length - 1]];
                }

                this.elapsedTimes = [];
            }
        }

        gl.disable(gl.BLEND);

        this.fbo.unbind();

        if (this.pathLength == 0) {
            if (this.showGeometry) {
                gl.clearColor(0.75, 0.75, 0.75, 1.0);
            } else {
                gl.clearColor(0.0, 0.0, 0.0, 0.0);
            }
            gl.clear(gl.COLOR_BUFFER_BIT);
            gl.viewport(0, 0, this.width, this.height);
            gl.scissor(0, 0, this.width, this.height);
            this.composite();

            gl.enable(gl.SCISSOR_TEST);
            gl.scissor(this.width, 0, this.separationWidth, this.height);
            gl.clearColor(1.0, 1.0, 1.0, 1.0);
            gl.clear(gl.COLOR_BUFFER_BIT);
            gl.disable(gl.SCISSOR_TEST);
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            this.renderNLOS();

            this.nlosElapsedTimes.push(timestamp);
        }

        this.currentState = next;
        this.currentCall++;
    }

    Renderer.prototype.renderNLOS = function () {
        var gl = this.gl;

        this.fbo.bind();
        this.fbo.drawBuffers(1);
        this.quadVbo.bind();

        if (this.filterType === 'pf') {
            this.filterPF();
            this.computeBackprojection(this.interFiltBuffer, this.filteredBuffer);
        } else {
            this.computeBackprojection(this.capturedBuffer, this.unfilteredBuffer);
            if (this.filterType === 'log')
                this.filterLoG();
            else if (this.filterType === 'lap')
                this.filterLap();
            // else filterType === 'none', and this.filteredBuffer == this.unfilteredBuffer
        }

        var maxValueTex = this.findMax(this.filteredBuffer, this.filterType === 'pf' && !this.isConvCamera);

        if (this.DEBUG) {
            var h = this.capturedBuffer.getArray(this.h.length);
            for (let i = 0; i < this.h.length; i++) {
                this.h[i] = h[4 * i];
            }
            var f = this.filteredBuffer.getArray(this.numPixels[0] * this.numPixels[1]);
            this.f = [];
            for (let i = 0; i < f.length; i += 4) {
                this.f.push(f[i]);
            }
            // getArray unbinds current framebuffer
            this.fbo.bind();
        }
        // Clear captured signal
        // this.fbo.attachTexture(this.capturedBuffer, 0);
        // gl.clear(gl.COLOR_BUFFER_BIT);

        this.fbo.unbind();

        // Render the result
        gl.viewport(this.width + this.separationWidth, 0, this.width, this.height);
        gl.scissor(this.width + this.separationWidth, 0, this.width, this.height);

        var usePhase = (this.usePhase && this.filterType === 'pf' && !this.isConvCamera);

        this.showProgram.bind();
        if (usePhase)
            this.colormapSeismicTex.bind(0);
        else
            this.colormapHotTex.bind(0);
        this.filteredBuffer.bind(1);
        maxValueTex.bind(2);
        this.showProgram.uniformF("Aspect", this.aspect);
        this.showProgram.uniformI("numSpads", this.numSpads);
        this.showProgram.uniformI("isComplex", this.filterType === 'pf' && !this.isConvCamera);
        this.showProgram.uniformI("usePhase", usePhase);
        if (usePhase)
            this.showProgram.uniformTexture("colormap", this.colormapSeismicTex);
        else
            this.showProgram.uniformTexture("colormap", this.colormapHotTex);
        this.showProgram.uniformTexture("radiance", this.filteredBuffer);
        this.showProgram.uniformTexture("maxValue", maxValueTex);
        this.quadVbo.bind();
        this.quadVbo.draw(this.showProgram, gl.TRIANGLE_FAN);

        gl.enable(gl.BLEND);
        this.geometryProgram.bind();
        if (this.showGeometry) {
            this.geometryProgram.uniform4F("uColor", 0.0, 0.0, 1.0, 1.0);
            this.sceneVBOs[this.currentScene].bind();
            this.sceneVBOs[this.currentScene].draw(this.geometryProgram, this.gl.LINES);
        }

        this.rwallProgram.bind();
        this.rwallProgram.uniformF("numSpads", this.numSpads);
        // TODO: this.spadRadius sometimes goes down to zero and doesn't grow back
        // TODO: allow the user to define the radius
        this.rwallProgram.uniformF("spadRadius", 0.007); // It's not this.spadRadius because it is small and difficult to see
        this.rwallProgram.uniformF("aspect", this.aspect);
        this.rwallProgram.uniform2F("firstSpad", this.spadPoints[0], this.spadPoints[1]);
        this.rwallProgram.uniform2F("lastSpad", this.spadPoints[2*this.numSpads-2], this.spadPoints[2*this.numSpads-1]);
        this.rwallProgram.uniform4F("uColor", 0.0, 1.0, 1.0, 1.0);
        this.quadVbo.bind();
        this.quadVbo.draw(this.rwallProgram, this.gl.TRIANGLE_FAN);
        gl.disable(gl.BLEND);
    }

    Renderer.prototype.play = function (timestamp) {
        if (!this.playing) {
            this.playing = true;
            this.videoElapsedTimes = [];
            if (this.instant >= this.numIntervals - 1) {
                this.instant = -1;
            }
        }

        if (this.videoElapsedTimes.length == 0 || (timestamp - this.videoElapsedTimes[this.videoElapsedTimes.length - 1]) > this.msPerFrame) {
            this.videoElapsedTimes.push(timestamp);
            this.instant++;
            this.redraw();
            this.updateSlider();
            if (this.instant >= this.numIntervals - 1)
                this.playing = false;
        }
    }

    Renderer.prototype.pause = function () {
        this.playing = false;
        this.videoElapsedTimes = [];
    }

    Renderer.prototype.computeSpadValues = function (current, next) {
        var gl = this.gl;

        gl.viewport(0, 0, this.numIntervals, this.numSpads);
        this.fbo.attachTexture(this.capturedBuffer, 0);
        if (this.captureMethod == "single" || this.captureMethod == "exhaustive") {
            this.hProgram.bind();
            this.rayStates[current].posTex.bind(0);
            this.rayStates[next].posTex.bind(1);
            this.rayStates[current].rgbTex.bind(2);
            this.rayStates[current].timeTex.bind(3);
            this.rayStates[next].timeTex.bind(4);
            this.spadGridTex.bind(5);
            this.spadNormalsTex.bind(6);
            this.hProgram.uniformI("matId", this.rwallMaterial);
            this.hProgram.uniformF("tmax", this.maxTime);
            this.hProgram.uniformF("spadRadius", this.spadRadius);
            this.hProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
            this.hProgram.uniformTexture("PosDataA", this.rayStates[current].posTex);
            this.hProgram.uniformTexture("PosDataB", this.rayStates[next].posTex);
            this.hProgram.uniformTexture("RgbData", this.rayStates[current].rgbTex);
            this.hProgram.uniformTexture("TimeDataA", this.rayStates[current].timeTex);
            this.hProgram.uniformTexture("SpadGrid", this.spadGridTex);
            this.hProgram.uniformTexture("SpadNormals", this.spadNormalsTex);
            this.rayVbo2.bind();
            this.rayVbo2.draw(this.hProgram, gl.POINTS, this.raySize * this.activeBlock);
        } else {
            this.hConfProgram.bind();
            this.rayStates[current].posTex.bind(0);
            this.rayStates[next].posTex.bind(1);
            this.rayStates[current].rgbTex.bind(2);
            this.rayStates[current].timeTex.bind(3);
            this.rayStates[next].timeTex.bind(4);
            this.spadNormalsTex.bind(6);
            this.hConfProgram.uniformI("matId", this.rwallMaterial);
            this.hConfProgram.uniformF("tmax", this.maxTime);
            this.hConfProgram.uniformF("yNorm", (this.laserPointedAtSensorIdx + 0.5) / this.numSpads);
            this.hConfProgram.uniformF("spadRadius", this.spadRadius);
            this.hConfProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
            this.hConfProgram.uniform2F("SpadGrid", this.laserGrid[0], this.laserGrid[1]);
            this.hConfProgram.uniform2F("SpadNormal", this.spadNormalsData[4 * this.laserPointedAtSensorIdx], this.spadNormalsData[4 * this.laserPointedAtSensorIdx + 1]);
            this.hConfProgram.uniformTexture("PosDataA", this.rayStates[current].posTex);
            this.hConfProgram.uniformTexture("PosDataB", this.rayStates[next].posTex);
            this.hConfProgram.uniformTexture("RgbData", this.rayStates[current].rgbTex);
            this.hConfProgram.uniformTexture("TimeDataA", this.rayStates[current].timeTex);
            this.hConfProgram.bind();
            this.rayVbo2.bind();
            this.rayVbo2.draw(this.hConfProgram, gl.POINTS, this.raySize * this.activeBlock);
        }
        // Restore previous viewport
        gl.viewport(0, 0, this.width, this.height);
    }

    Renderer.prototype.getReconstructionValues = function () {
        return this.filteredBuffer.getArray(this.numPixels[0] * this.numPixels[1]);
    }

    Renderer.prototype.getTransientValues = function () {
        var h = this.capturedBuffer.getArray(this.numSpads * this.numIntervals);
        var result = [];
        for (let i = 0; i < h.length; i += 4) {
            result.push(h[i]);
        }
        return result;
    }

    exports.Renderer = Renderer;
})(window.transientcore = window.transientcore || {});