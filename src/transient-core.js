(function (exports) {
    var LAMBDA_MIN = 360.0;
    var LAMBDA_MAX = 750.0;

    var DEBUG = false;

    function intermediatePositions(start, end, n) {
        if (n == 1) {
            return [(start + end) / 2.0];
        } else {
            var step = (end - start) / n;
            if (n == 2) {
                return [start + step / 2, end - step / 2];
            } else {
                var result = [start + step / 2];
                var accum = result[0] + step;
                while (result.length < n) {
                    result.push(accum);
                    accum += step;
                }
                return result;
            }
        }
    }

    function linspace(start, end, n) {
        if (n == 1) {
            return [(start + end) / 2.0];
        } else if (n == 2) {
            return [start, end];
        } else {
            var step = (end - start) / (n - 1);
            var result = [start];
            var accum = start + step;
            while (result.length < n) {
                result.push(accum);
                accum += step;
            }
            return result;
        }
    }

    function nextPowerOfTwo(n) {
        // http://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2Float
        v = n - 1;
        v |= v >> 1;
        v |= v >> 2;
        v |= v >> 4;
        v |= v >> 8;
        v |= v >> 16;
        return v + 1;
    }

    function makeGaussKernel(sigma) {
        const GAUSSKERN = 6.0;
        var dim = parseInt(Math.max(3.0, GAUSSKERN * sigma));
        var sqrtSigmaPi2 = Math.sqrt(Math.PI * 2.0) * sigma;
        var s2 = 2.0 * sigma * sigma;
        var sum = 0.0;

        var kernel = new Float32Array(dim - !(dim & 1)); // Make it odd number
        const half = parseInt(kernel.length / 2);
        for (var j = 0, i = -half; j < kernel.length; i++, j++) {
            kernel[j] = Math.exp(-(i * i) / (s2)) / sqrtSigmaPi2;
            sum += kernel[j];
        }
        // Normalize the gaussian kernel to prevent image darkening/brightening
        for (var i = 0; i < dim; i++) {
            kernel[i] /= sum;
        }
        return kernel;
    }

    function scene2canvas(pos, aspect, width, height) {
        var result = [0, 0];
        result[0] = pos[0] / (2 * aspect) + 0.5;
        result[1] = 0.5 - pos[1] / 2;
        result[0] *= width;
        result[1] *= height;
        return result;
    } 
    function isPowerOf2(value) {
        return (value & (value - 1)) === 0;
    }

    var SpadData = function (pos, radius, deltaT, maxTime) {
        this.pos = pos;
        this.radius = radius;
        this.deltaT = deltaT;
        this.maxTime = maxTime;
    }

    var Renderer = function (gl, width, height, scenes) {
        this.gl = gl;
        this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
        this.quadVbo = this.createQuadVbo();
        this.quadVbo2 = this.createQuadVbo2();

        this.maxSampleCount = 100000;
        this.spreadType = tcore.Renderer.SPREAD_LASER;
        this.emissionSpectrumType = tcore.Renderer.SPECTRUM_WHITE;
        this.emitterTemperature = 5000.0;
        this.emitterGas = 0;
        this.currentScene = 0;
        this.needsReset = true;
        this.currentCall = 0;

        // Shader programs to simulate and render the scene
        this.compositeProgram = new tgl.Shader(Shaders, "compose-vert", "compose-frag");
        this.passProgram = new tgl.Shader(Shaders, "compose-vert", "pass-frag");
        this.initProgram = new tgl.Shader(Shaders, "init-vert", "init-frag");
        this.rayProgram = new tgl.Shader(Shaders, "ray-vert", "ray-frag");
        this.hConfProgram = new tgl.Shader(Shaders, "h-conf-vert", "h-frag");
        // this.hProgram         = new tgl.Shader(Shaders,       "h-vert",       "h-frag"); // added in setSpadPositions
        this.spadSegmentProgram = new tgl.Shader(Shaders, "spad-segment-vert", "spad-segment-frag");
        this.rulerProgram = new tgl.Shader(Shaders, "ruler-vert", "ruler-frag");
        this.tracePrograms = [];
        for (var i = 0; i < scenes.length; ++i)
            this.tracePrograms.push(new tgl.Shader(Shaders, "trace-vert", scenes[i]));

        this.maxPathLength = 12;

        this.deltaT = 0.003;
        this.maxTime = 10; // approximate max instant we want to store
        this.numIntervals = parseInt(this.maxTime / this.deltaT + 0.05); // make sure it is an int

        this.maxTime = this.numIntervals * this.deltaT; // fix the maxTime to a value that corresponds with integer numIntervals
        this.spadRadius = 0.0035;
        this.setSpadPos([0, -0.6]);
        this.bboxCorners = [-1.78, 1.0, 1.78, -1.0]; // upper left, bottom right
        this.isConf = false;

        // Shader programs to reconstruct the hidden scene
        this.bpProgram = new tgl.Shader(Shaders, "bp-vert", "bp-frag");
        this.bpConfProgram = new tgl.Shader(Shaders, "bp-vert", "bp-conf-frag");
        this.lapProgram = new tgl.Shader(Shaders, "bp-vert", "lap-frag");
        this.gaussProgram = new tgl.Shader(Shaders, "bp-vert", "gauss-frag");
        this.logProgram = new tgl.Shader(Shaders, "bp-vert", "log-frag");
        this.pfKernelProgram = new tgl.Shader(Shaders, "bp-vert", "pf-filter-frag");
        // var pfConvFrag = this.replaceNumSpads("pf-conv-frag");
        // Shaders["replacedPf"] = pfConvFrag;
        // this.pfProgram = new tgl.Shader(Shaders, "bp-vert", "replacedPf");
        this.maxProgram = new tgl.Shader(Shaders, "max-vert", "max-frag");
        this.sumProgram = new tgl.Shader(Shaders, "bp-vert", "sum-frag");
        this.showProgram = new tgl.Shader(Shaders, "show-vert", "show-frag");

        this.spectrumTable = wavelengthToRgbTable();
        this.spectrum = new tgl.Texture(this.spectrumTable.length / 4, 1, 4, true, true, true, this.spectrumTable);
        this.emission = new tgl.Texture(tcore.Renderer.SPECTRUM_SAMPLES, 1, 1, true, false, true, null);
        this.emissionIcdf = new tgl.Texture(tcore.Renderer.ICDF_SAMPLES, 1, 1, true, false, true, null);
        this.emissionPdf = new tgl.Texture(tcore.Renderer.SPECTRUM_SAMPLES, 1, 1, true, false, true, null);

        this.raySize = 512;
        this.resetActiveBlock();
        this.rayCount = this.raySize * this.raySize;
        this.currentState = 0;
        this.rayStates = [new tcore.RayState(this.raySize), new tcore.RayState(this.raySize)];

        this.createVBOs();

        this.createNLOSBuffers(ModifiedAttributes.All);

        this.separationWidth = 10;
        this.changeResolution(width, height);
        this.setEmitterPos([width / 2, height / 2], [width / 2, height / 2]);
        this.computeEmissionSpectrum();
        this.quadVbo3 = this.createQuadVbo3();

        var colormap = [
            0.0104, 0, 0, 1.0, 0.0208, 0, 0, 1.0, 0.0312, 0, 0, 1.0, 0.0417, 0, 0, 1.0, 0.0521, 0, 0, 1.0, 0.0625, 0, 0, 1.0, 0.0729, 0, 0, 1.0, 0.0833, 0, 0, 1.0, 0.0938, 0, 0, 1.0, 0.1042, 0, 0, 1.0, 0.1146, 0, 0, 1.0, 0.1250, 0, 0, 1.0, 0.1354, 0, 0, 1.0, 0.1458, 0, 0, 1.0, 0.1562, 0, 0, 1.0, 0.1667, 0, 0, 1.0, 0.1771, 0, 0, 1.0, 0.1875, 0, 0, 1.0, 0.1979, 0, 0, 1.0, 0.2083, 0, 0, 1.0, 0.2188, 0, 0, 1.0, 0.2292, 0, 0, 1.0, 0.2396, 0, 0, 1.0, 0.2500, 0, 0, 1.0, 0.2604, 0, 0, 1.0, 0.2708, 0, 0, 1.0, 0.2812, 0, 0, 1.0, 0.2917, 0, 0, 1.0, 0.3021, 0, 0, 1.0, 0.3125, 0, 0, 1.0, 0.3229, 0, 0, 1.0, 0.3333, 0, 0, 1.0, 0.3438, 0, 0, 1.0, 0.3542, 0, 0, 1.0, 0.3646, 0, 0, 1.0, 0.3750, 0, 0, 1.0, 0.3854, 0, 0, 1.0, 0.3958, 0, 0, 1.0, 0.4062, 0, 0, 1.0, 0.4167, 0, 0, 1.0, 0.4271, 0, 0, 1.0, 0.4375, 0, 0, 1.0, 0.4479, 0, 0, 1.0, 0.4583, 0, 0, 1.0, 0.4688, 0, 0, 1.0, 0.4792, 0, 0, 1.0, 0.4896, 0, 0, 1.0, 0.5000, 0, 0, 1.0, 0.5104, 0, 0, 1.0, 0.5208, 0, 0, 1.0, 0.5312, 0, 0, 1.0, 0.5417, 0, 0, 1.0, 0.5521, 0, 0, 1.0, 0.5625, 0, 0, 1.0, 0.5729, 0, 0, 1.0, 0.5833, 0, 0, 1.0, 0.5938, 0, 0, 1.0, 0.6042, 0, 0, 1.0, 0.6146, 0, 0, 1.0, 0.6250, 0, 0, 1.0, 0.6354, 0, 0, 1.0, 0.6458, 0, 0, 1.0, 0.6562, 0, 0, 1.0, 0.6667, 0, 0, 1.0, 0.6771, 0, 0, 1.0, 0.6875, 0, 0, 1.0, 0.6979, 0, 0, 1.0, 0.7083, 0, 0, 1.0, 0.7188, 0, 0, 1.0, 0.7292, 0, 0, 1.0, 0.7396, 0, 0, 1.0, 0.7500, 0, 0, 1.0, 0.7604, 0, 0, 1.0, 0.7708, 0, 0, 1.0, 0.7812, 0, 0, 1.0, 0.7917, 0, 0, 1.0, 0.8021, 0, 0, 1.0, 0.8125, 0, 0, 1.0, 0.8229, 0, 0, 1.0, 0.8333, 0, 0, 1.0, 0.8438, 0, 0, 1.0, 0.8542, 0, 0, 1.0, 0.8646, 0, 0, 1.0, 0.8750, 0, 0, 1.0, 0.8854, 0, 0, 1.0, 0.8958, 0, 0, 1.0, 0.9062, 0, 0, 1.0, 0.9167, 0, 0, 1.0, 0.9271, 0, 0, 1.0, 0.9375, 0, 0, 1.0, 0.9479, 0, 0, 1.0, 0.9583, 0, 0, 1.0, 0.9688, 0, 0, 1.0, 0.9792, 0, 0, 1.0, 0.9896, 0, 0, 1.0, 1.0000, 0, 0, 1.0, 1.0000, 0.0104, 0, 1.0, 1.0000, 0.0208, 0, 1.0, 1.0000, 0.0312, 0, 1.0, 1.0000, 0.0417, 0, 1.0, 1.0000, 0.0521, 0, 1.0, 1.0000, 0.0625, 0, 1.0, 1.0000, 0.0729, 0, 1.0, 1.0000, 0.0833, 0, 1.0, 1.0000, 0.0938, 0, 1.0, 1.0000, 0.1042, 0, 1.0, 1.0000, 0.1146, 0, 1.0, 1.0000, 0.1250, 0, 1.0, 1.0000, 0.1354, 0, 1.0, 1.0000, 0.1458, 0, 1.0, 1.0000, 0.1562, 0, 1.0, 1.0000, 0.1667, 0, 1.0, 1.0000, 0.1771, 0, 1.0, 1.0000, 0.1875, 0, 1.0, 1.0000, 0.1979, 0, 1.0, 1.0000, 0.2083, 0, 1.0, 1.0000, 0.2188, 0, 1.0, 1.0000, 0.2292, 0, 1.0, 1.0000, 0.2396, 0, 1.0, 1.0000, 0.2500, 0, 1.0, 1.0000, 0.2604, 0, 1.0, 1.0000, 0.2708, 0, 1.0, 1.0000, 0.2812, 0, 1.0, 1.0000, 0.2917, 0, 1.0, 1.0000, 0.3021, 0, 1.0, 1.0000, 0.3125, 0, 1.0, 1.0000, 0.3229, 0, 1.0, 1.0000, 0.3333, 0, 1.0, 1.0000, 0.3438, 0, 1.0, 1.0000, 0.3542, 0, 1.0, 1.0000, 0.3646, 0, 1.0, 1.0000, 0.3750, 0, 1.0, 1.0000, 0.3854, 0, 1.0, 1.0000, 0.3958, 0, 1.0, 1.0000, 0.4062, 0, 1.0, 1.0000, 0.4167, 0, 1.0, 1.0000, 0.4271, 0, 1.0, 1.0000, 0.4375, 0, 1.0, 1.0000, 0.4479, 0, 1.0, 1.0000, 0.4583, 0, 1.0, 1.0000, 0.4688, 0, 1.0, 1.0000, 0.4792, 0, 1.0, 1.0000, 0.4896, 0, 1.0, 1.0000, 0.5000, 0, 1.0, 1.0000, 0.5104, 0, 1.0, 1.0000, 0.5208, 0, 1.0, 1.0000, 0.5312, 0, 1.0, 1.0000, 0.5417, 0, 1.0, 1.0000, 0.5521, 0, 1.0, 1.0000, 0.5625, 0, 1.0, 1.0000, 0.5729, 0, 1.0, 1.0000, 0.5833, 0, 1.0, 1.0000, 0.5938, 0, 1.0, 1.0000, 0.6042, 0, 1.0, 1.0000, 0.6146, 0, 1.0, 1.0000, 0.6250, 0, 1.0, 1.0000, 0.6354, 0, 1.0, 1.0000, 0.6458, 0, 1.0, 1.0000, 0.6562, 0, 1.0, 1.0000, 0.6667, 0, 1.0, 1.0000, 0.6771, 0, 1.0, 1.0000, 0.6875, 0, 1.0, 1.0000, 0.6979, 0, 1.0, 1.0000, 0.7083, 0, 1.0, 1.0000, 0.7188, 0, 1.0, 1.0000, 0.7292, 0, 1.0, 1.0000, 0.7396, 0, 1.0, 1.0000, 0.7500, 0, 1.0, 1.0000, 0.7604, 0, 1.0, 1.0000, 0.7708, 0, 1.0, 1.0000, 0.7812, 0, 1.0, 1.0000, 0.7917, 0, 1.0, 1.0000, 0.8021, 0, 1.0, 1.0000, 0.8125, 0, 1.0, 1.0000, 0.8229, 0, 1.0, 1.0000, 0.8333, 0, 1.0, 1.0000, 0.8438, 0, 1.0, 1.0000, 0.8542, 0, 1.0, 1.0000, 0.8646, 0, 1.0, 1.0000, 0.8750, 0, 1.0, 1.0000, 0.8854, 0, 1.0, 1.0000, 0.8958, 0, 1.0, 1.0000, 0.9062, 0, 1.0, 1.0000, 0.9167, 0, 1.0, 1.0000, 0.9271, 0, 1.0, 1.0000, 0.9375, 0, 1.0, 1.0000, 0.9479, 0, 1.0, 1.0000, 0.9583, 0, 1.0, 1.0000, 0.9688, 0, 1.0, 1.0000, 0.9792, 0, 1.0, 1.0000, 0.9896, 0, 1.0, 1.0000, 1.0000, 0, 1.0, 1.0000, 1.0000, 0.0156, 1.0, 1.0000, 1.0000, 0.0312, 1.0, 1.0000, 1.0000, 0.0469, 1.0, 1.0000, 1.0000, 0.0625, 1.0, 1.0000, 1.0000, 0.0781, 1.0, 1.0000, 1.0000, 0.0938, 1.0, 1.0000, 1.0000, 0.1094, 1.0, 1.0000, 1.0000, 0.1250, 1.0, 1.0000, 1.0000, 0.1406, 1.0, 1.0000, 1.0000, 0.1562, 1.0, 1.0000, 1.0000, 0.1719, 1.0, 1.0000, 1.0000, 0.1875, 1.0, 1.0000, 1.0000, 0.2031, 1.0, 1.0000, 1.0000, 0.2188, 1.0, 1.0000, 1.0000, 0.2344, 1.0, 1.0000, 1.0000, 0.2500, 1.0, 1.0000, 1.0000, 0.2656, 1.0, 1.0000, 1.0000, 0.2812, 1.0, 1.0000, 1.0000, 0.2969, 1.0, 1.0000, 1.0000, 0.3125, 1.0, 1.0000, 1.0000, 0.3281, 1.0, 1.0000, 1.0000, 0.3438, 1.0, 1.0000, 1.0000, 0.3594, 1.0, 1.0000, 1.0000, 0.3750, 1.0, 1.0000, 1.0000, 0.3906, 1.0, 1.0000, 1.0000, 0.4062, 1.0, 1.0000, 1.0000, 0.4219, 1.0, 1.0000, 1.0000, 0.4375, 1.0, 1.0000, 1.0000, 0.4531, 1.0, 1.0000, 1.0000, 0.4688, 1.0, 1.0000, 1.0000, 0.4844, 1.0, 1.0000, 1.0000, 0.5000, 1.0, 1.0000, 1.0000, 0.5156, 1.0, 1.0000, 1.0000, 0.5312, 1.0, 1.0000, 1.0000, 0.5469, 1.0, 1.0000, 1.0000, 0.5625, 1.0, 1.0000, 1.0000, 0.5781, 1.0, 1.0000, 1.0000, 0.5938, 1.0, 1.0000, 1.0000, 0.6094, 1.0, 1.0000, 1.0000, 0.6250, 1.0, 1.0000, 1.0000, 0.6406, 1.0, 1.0000, 1.0000, 0.6562, 1.0, 1.0000, 1.0000, 0.6719, 1.0, 1.0000, 1.0000, 0.6875, 1.0, 1.0000, 1.0000, 0.7031, 1.0, 1.0000, 1.0000, 0.7188, 1.0, 1.0000, 1.0000, 0.7344, 1.0, 1.0000, 1.0000, 0.7500, 1.0, 1.0000, 1.0000, 0.7656, 1.0, 1.0000, 1.0000, 0.7812, 1.0, 1.0000, 1.0000, 0.7969, 1.0, 1.0000, 1.0000, 0.8125, 1.0, 1.0000, 1.0000, 0.8281, 1.0, 1.0000, 1.0000, 0.8438, 1.0, 1.0000, 1.0000, 0.8594, 1.0, 1.0000, 1.0000, 0.8750, 1.0, 1.0000, 1.0000, 0.8906, 1.0, 1.0000, 1.0000, 0.9062, 1.0, 1.0000, 1.0000, 0.9219, 1.0, 1.0000, 1.0000, 0.9375, 1.0, 1.0000, 1.0000, 0.9531, 1.0, 1.0000, 1.0000, 0.9688, 1.0, 1.0000, 1.0000, 0.9844, 1.0, 1.0000, 1.0000, 1.0000, 1.0
        ];
        this.colormap = new Float32Array(colormap);
        this.colormapTex = new tgl.Texture(colormap.length / 4, 1, 4, true, false, true, this.colormap);

        // Laplacian filter
        this.lapKernel = new Float32Array(9);
        this.lapKernel[0] = this.lapKernel[1] = this.lapKernel[2] = this.lapKernel[3] = -1.0;
        this.lapKernel[4] = 8.0;
        this.lapKernel[5] = this.lapKernel[6] = this.lapKernel[7] = this.lapKernel[8] = -1.0;

        // Gaussian filter
        this.gaussKernel = makeGaussKernel(2.5);

        // LoG filter
        var dim = 45;
        var logKernel = [
            6.93859534369387e-10, 6.95161307407246e-10, 6.98479384160607e-10, 7.06511386476401e-10, 7.24974003325432e-10, 7.65267106158951e-10, 8.48742570013430e-10, 1.01287031941811e-09, 1.31905212676454e-09, 1.86079730785587e-09, 2.76950476384493e-09, 4.21358788977445e-09, 6.38591807167264e-09, 9.47555303272212e-09, 1.36232195872986e-08, 1.88659213046240e-08, 2.50828745322092e-08, 3.19600285887441e-08, 3.89906488916959e-08, 4.55229473316947e-08, 5.08531891127888e-08, 5.43477017991462e-08, 5.55652721178737e-08, 5.43477017991462e-08, 5.08531891127888e-08, 4.55229473316947e-08, 3.89906488916959e-08, 3.19600285887441e-08, 2.50828745322092e-08, 1.88659213046240e-08, 1.36232195872986e-08, 9.47555303272212e-09, 6.38591807167264e-09, 4.21358788977445e-09, 2.76950476384493e-09, 1.86079730785587e-09, 1.31905212676454e-09, 1.01287031941811e-09, 8.48742570013430e-10, 7.65267106158951e-10, 7.24974003325432e-10, 7.06511386476401e-10, 6.98479384160607e-10, 6.95161307407246e-10, 6.93859534369387e-10, 6.95161307407246e-10, 6.98737397699556e-10, 7.07828138471761e-10, 7.29772000047663e-10, 7.80063578263050e-10, 8.89480015348196e-10, 1.11542338335337e-09, 1.55816904933725e-09, 2.38122892523348e-09, 3.83228069763623e-09, 6.25729514887803e-09, 1.00967088601294e-08, 1.58508146828878e-08, 2.40045259469479e-08, 3.49110986268380e-08, 4.86496930458638e-08, 6.48888087751350e-08, 8.27996516564894e-08, 1.01062914377729e-07, 1.17995055836862e-07, 1.31788202857858e-07, 1.40820624538199e-07, 1.43965897210943e-07, 1.40820624538199e-07, 1.31788202857858e-07, 1.17995055836862e-07, 1.01062914377729e-07, 8.27996516564894e-08, 6.48888087751350e-08, 4.86496930458638e-08, 3.49110986268380e-08, 2.40045259469479e-08, 1.58508146828878e-08, 1.00967088601294e-08, 6.25729514887803e-09, 3.83228069763623e-09, 2.38122892523348e-09, 1.55816904933725e-09, 1.11542338335337e-09, 8.89480015348196e-10, 7.80063578263050e-10, 7.29772000047663e-10, 7.07828138471761e-10, 6.98737397699556e-10, 6.95161307407246e-10, 6.98479384160607e-10, 7.07828138471761e-10, 7.31526334533303e-10, 7.88559232542339e-10, 9.18854316108359e-10, 1.20138077063464e-09, 1.78273935739558e-09, 2.91773292876697e-09, 5.01955733629269e-09, 8.71028936010607e-09, 1.48529677550972e-08, 2.45376567211366e-08, 3.89906488916959e-08, 5.93844896659077e-08, 8.65506121184782e-08, 1.20633840882933e-07, 1.60768392527646e-07, 2.04881316326130e-07, 2.49724523044566e-07, 2.91192299679587e-07, 3.24904635488620e-07, 3.46950670044095e-07, 3.54622159971847e-07, 3.46950670044095e-07, 3.24904635488620e-07, 2.91192299679587e-07, 2.49724523044566e-07, 2.04881316326130e-07, 1.60768392527646e-07, 1.20633840882933e-07, 8.65506121184782e-08, 5.93844896659077e-08, 3.89906488916959e-08, 2.45376567211366e-08, 1.48529677550972e-08, 8.71028936010607e-09, 5.01955733629269e-09, 2.91773292876697e-09, 1.78273935739558e-09, 1.20138077063464e-09, 9.18854316108359e-10, 7.88559232542339e-10, 7.31526334533303e-10, 7.07828138471761e-10, 6.98479384160607e-10, 7.06511386476401e-10, 7.29772000047663e-10, 7.88559232542339e-10, 9.29587617665334e-10, 1.25068166668281e-09, 1.94441713363734e-09, 3.36647022652934e-09, 6.13155998481251e-09, 1.12303450288689e-08, 2.01439573859886e-08, 3.49110986268380e-08, 5.80830531773184e-08, 9.24969386023430e-08, 1.40820624538199e-07, 2.04881316326130e-07, 2.84876411646176e-07, 3.78653954558926e-07, 4.81302057799405e-07, 5.85266109870174e-07, 6.81105707287417e-07, 7.58831048414707e-07, 8.09573799155140e-07, 8.27215921702499e-07, 8.09573799155140e-07, 7.58831048414707e-07, 6.81105707287417e-07, 5.85266109870174e-07, 4.81302057799405e-07, 3.78653954558926e-07, 2.84876411646176e-07, 2.04881316326130e-07, 1.40820624538199e-07, 9.24969386023430e-08, 5.80830531773184e-08, 3.49110986268380e-08, 2.01439573859886e-08, 1.12303450288689e-08, 6.13155998481251e-09, 3.36647022652934e-09, 1.94441713363734e-09, 1.25068166668281e-09, 9.29587617665334e-10, 7.88559232542339e-10, 7.29772000047663e-10, 7.06511386476401e-10, 7.24974003325432e-10, 7.80063578263050e-10, 9.18854316108359e-10, 1.25068166668281e-09, 2.00344697737242e-09, 3.62350941634546e-09, 6.93062591263766e-09, 1.33327237474646e-08, 2.50828745322092e-08, 4.55229473316947e-08, 7.92108291995698e-08, 1.31788202857858e-07, 2.09441434532649e-07, 3.17867597522997e-07, 4.60792829571097e-07, 6.38278879150148e-07, 8.45234606585766e-07, 1.07063902357280e-06, 1.29791230698978e-06, 1.50662612326427e-06, 1.67538236989635e-06, 1.78532487292143e-06, 1.82350868732049e-06, 1.78532487292143e-06, 1.67538236989635e-06, 1.50662612326427e-06, 1.29791230698978e-06, 1.07063902357280e-06, 8.45234606585766e-07, 6.38278879150148e-07, 4.60792829571097e-07, 3.17867597522997e-07, 2.09441434532649e-07, 1.31788202857858e-07, 7.92108291995698e-08, 4.55229473316947e-08, 2.50828745322092e-08, 1.33327237474646e-08, 6.93062591263766e-09, 3.62350941634546e-09, 2.00344697737242e-09, 1.25068166668281e-09, 9.18854316108359e-10, 7.80063578263050e-10, 7.24974003325432e-10, 7.65267106158951e-10, 8.89480015348196e-10, 1.20138077063464e-09, 1.94441713363734e-09, 3.62350941634546e-09, 7.22208942482029e-09, 1.45350598653710e-08, 2.86236210918466e-08, 5.43477017991462e-08, 9.88500999733794e-08, 1.71768449431056e-07, 2.84876411646176e-07, 4.50863184752836e-07, 6.81105707287417e-07, 9.82584373492198e-07, 1.35447952365092e-06, 1.78532487292143e-06, 2.25171751613426e-06, 2.71937524908502e-06, 3.14679826715717e-06, 3.49108335567331e-06, 3.71478902779988e-06, 3.79237835875793e-06, 3.71478902779988e-06, 3.49108335567331e-06, 3.14679826715717e-06, 2.71937524908502e-06, 2.25171751613426e-06, 1.78532487292143e-06, 1.35447952365092e-06, 9.82584373492198e-07, 6.81105707287417e-07, 4.50863184752836e-07, 2.84876411646176e-07, 1.71768449431056e-07, 9.88500999733794e-08, 5.43477017991462e-08, 2.86236210918466e-08, 1.45350598653710e-08, 7.22208942482029e-09, 3.62350941634546e-09, 1.94441713363734e-09, 1.20138077063464e-09, 8.89480015348196e-10, 7.65267106158951e-10, 8.48742570013430e-10, 1.11542338335337e-09, 1.78273935739558e-09, 3.36647022652934e-09, 6.93062591263766e-09, 1.45350598653710e-08, 2.99135823201005e-08, 5.93844896659077e-08, 1.12888370228736e-07, 2.04881316326130e-07, 3.54622159971847e-07, 5.85266109870174e-07, 9.21233347070692e-07, 1.38365814265074e-06, 1.98434181133911e-06, 2.71937524908502e-06, 3.56416973011514e-06, 4.47172256295234e-06, 5.37538199596193e-06, 6.19627246368329e-06, 6.85426078796954e-06, 7.28033546919081e-06, 7.42785239064459e-06, 7.28033546919081e-06, 6.85426078796954e-06, 6.19627246368329e-06, 5.37538199596193e-06, 4.47172256295234e-06, 3.56416973011514e-06, 2.71937524908502e-06, 1.98434181133911e-06, 1.38365814265074e-06, 9.21233347070692e-07, 5.85266109870174e-07, 3.54622159971847e-07, 2.04881316326130e-07, 1.12888370228736e-07, 5.93844896659077e-08, 2.99135823201005e-08, 1.45350598653710e-08, 6.93062591263766e-09, 3.36647022652934e-09, 1.78273935739558e-09, 1.11542338335337e-09, 8.48742570013430e-10, 1.01287031941811e-09, 1.55816904933725e-09, 2.91773292876697e-09, 6.13155998481251e-09, 1.33327237474646e-08, 2.86236210918466e-08, 5.93844896659077e-08, 1.17995055836862e-07, 2.23732850786383e-07, 4.04288926318536e-07, 6.95998539972188e-07, 1.14169885732707e-06, 1.78532487292143e-06, 2.66309714351008e-06, 3.79237835875793e-06, 5.16060848031975e-06, 6.71757102075987e-06, 8.37404636787507e-06, 1.00085168578969e-05, 1.14814226042962e-05, 1.26543621795561e-05, 1.34103909866892e-05, 1.36715195691405e-05, 1.34103909866892e-05, 1.26543621795561e-05, 1.14814226042962e-05, 1.00085168578969e-05, 8.37404636787507e-06, 6.71757102075987e-06, 5.16060848031975e-06, 3.79237835875793e-06, 2.66309714351008e-06, 1.78532487292143e-06, 1.14169885732707e-06, 6.95998539972188e-07, 4.04288926318536e-07, 2.23732850786383e-07, 1.17995055836862e-07, 5.93844896659077e-08, 2.86236210918466e-08, 1.33327237474646e-08, 6.13155998481251e-09, 2.91773292876697e-09, 1.55816904933725e-09, 1.01287031941811e-09, 1.31905212676454e-09, 2.38122892523348e-09, 5.01955733629269e-09, 1.12303450288689e-08, 2.50828745322092e-08, 5.43477017991462e-08, 1.12888370228736e-07, 2.23732850786383e-07, 4.22320880156400e-07, 7.58831048414707e-07, 1.29791230698978e-06, 2.11392933729923e-06, 3.28038878219203e-06, 4.85376670480531e-06, 6.85426078796954e-06, 9.24821358281408e-06, 1.19379333532568e-05, 1.47634982776905e-05, 1.75179335520721e-05, 1.99731141473789e-05, 2.19106791379053e-05, 2.31514778429911e-05, 2.35785913357379e-05, 2.31514778429911e-05, 2.19106791379053e-05, 1.99731141473789e-05, 1.75179335520721e-05, 1.47634982776905e-05, 1.19379333532568e-05, 9.24821358281408e-06, 6.85426078796954e-06, 4.85376670480531e-06, 3.28038878219203e-06, 2.11392933729923e-06, 1.29791230698978e-06, 7.58831048414707e-07, 4.22320880156400e-07, 2.23732850786383e-07, 1.12888370228736e-07, 5.43477017991462e-08, 2.50828745322092e-08, 1.12303450288689e-08, 5.01955733629269e-09, 2.38122892523348e-09, 1.31905212676454e-09, 1.86079730785587e-09, 3.83228069763623e-09, 8.71028936010607e-09, 2.01439573859886e-08, 4.55229473316947e-08, 9.88500999733794e-08, 2.04881316326130e-07, 4.04288926318536e-07, 7.58831048414707e-07, 1.35447952365092e-06, 2.29955404452745e-06, 3.71478902779988e-06, 5.71361782286945e-06, 8.37404636787507e-06, 1.17076109206192e-05, 1.56343292877852e-05, 1.99731141473789e-05, 2.44535561988104e-05, 2.87481259721704e-05, 3.25166967294651e-05, 3.54515670568725e-05, 3.73128880532287e-05, 3.79503171324205e-05, 3.73128880532287e-05, 3.54515670568725e-05, 3.25166967294651e-05, 2.87481259721704e-05, 2.44535561988104e-05, 1.99731141473789e-05, 1.56343292877852e-05, 1.17076109206192e-05, 8.37404636787507e-06, 5.71361782286945e-06, 3.71478902779988e-06, 2.29955404452745e-06, 1.35447952365092e-06, 7.58831048414707e-07, 4.04288926318536e-07, 2.04881316326130e-07, 9.88500999733794e-08, 4.55229473316947e-08, 2.01439573859886e-08, 8.71028936010607e-09, 3.83228069763623e-09, 1.86079730785587e-09, 2.76950476384493e-09, 6.25729514887803e-09, 1.48529677550972e-08, 3.49110986268380e-08, 7.92108291995698e-08, 1.71768449431056e-07, 3.54622159971847e-07, 6.95998539972188e-07, 1.29791230698978e-06, 2.29955404452745e-06, 3.87152588556904e-06, 6.19627246368329e-06, 9.43303910821773e-06, 1.36715195691405e-05, 1.88853744216193e-05, 2.49015619454169e-05, 3.14001424341404e-05, 3.79503171324205e-05, 4.40746598962355e-05, 4.93214804590313e-05, 5.33222161100502e-05, 5.58194722333390e-05, 5.66673658478765e-05, 5.58194722333390e-05, 5.33222161100502e-05, 4.93214804590313e-05, 4.40746598962355e-05, 3.79503171324205e-05, 3.14001424341404e-05, 2.49015619454169e-05, 1.88853744216193e-05, 1.36715195691405e-05, 9.43303910821773e-06, 6.19627246368329e-06, 3.87152588556904e-06, 2.29955404452745e-06, 1.29791230698978e-06, 6.95998539972188e-07, 3.54622159971847e-07, 1.71768449431056e-07, 7.92108291995698e-08, 3.49110986268380e-08, 1.48529677550972e-08, 6.25729514887803e-09, 2.76950476384493e-09, 4.21358788977445e-09, 1.00967088601294e-08, 2.45376567211366e-08, 5.80830531773184e-08, 1.31788202857858e-07, 2.84876411646176e-07, 5.85266109870174e-07, 1.14169885732707e-06, 2.11392933729923e-06, 3.71478902779988e-06, 6.19627246368329e-06, 9.81313281641988e-06, 1.47634982776905e-05, 2.11164813882201e-05, 2.87481259721704e-05, 3.73128880532287e-05, 4.62718248240169e-05, 5.49792304937719e-05, 6.28033360310301e-05, 6.92374769940431e-05, 7.39590344345512e-05, 7.68178136928210e-05, 7.77720392471942e-05, 7.68178136928210e-05, 7.39590344345512e-05, 6.92374769940431e-05, 6.28033360310301e-05, 5.49792304937719e-05, 4.62718248240169e-05, 3.73128880532287e-05, 2.87481259721704e-05, 2.11164813882201e-05, 1.47634982776905e-05, 9.81313281641988e-06, 6.19627246368329e-06, 3.71478902779988e-06, 2.11392933729923e-06, 1.14169885732707e-06, 5.85266109870174e-07, 2.84876411646176e-07, 1.31788202857858e-07, 5.80830531773184e-08, 2.45376567211366e-08, 1.00967088601294e-08, 4.21358788977445e-09, 6.38591807167264e-09, 1.58508146828878e-08, 3.89906488916959e-08, 9.24969386023430e-08, 2.09441434532649e-07, 4.50863184752836e-07, 9.21233347070692e-07, 1.78532487292143e-06, 3.28038878219203e-06, 5.71361782286945e-06, 9.43303910821773e-06, 1.47634982776905e-05, 2.19106791379053e-05, 3.08539366784052e-05, 4.12662689837223e-05, 5.25056732907879e-05, 6.37062474764760e-05, 7.39590344345512e-05, 8.25260270047090e-05, 8.90015429892788e-05, 9.33463057307625e-05, 9.57742289383148e-05, 9.65458367203462e-05, 9.57742289383148e-05, 9.33463057307625e-05, 8.90015429892788e-05, 8.25260270047090e-05, 7.39590344345512e-05, 6.37062474764760e-05, 5.25056732907879e-05, 4.12662689837223e-05, 3.08539366784052e-05, 2.19106791379053e-05, 1.47634982776905e-05, 9.43303910821773e-06, 5.71361782286945e-06, 3.28038878219203e-06, 1.78532487292143e-06, 9.21233347070692e-07, 4.50863184752836e-07, 2.09441434532649e-07, 9.24969386023430e-08, 3.89906488916959e-08, 1.58508146828878e-08, 6.38591807167264e-09, 9.47555303272212e-09, 2.40045259469479e-08, 5.93844896659077e-08, 1.40820624538199e-07, 3.17867597522997e-07, 6.81105707287417e-07, 1.38365814265074e-06, 2.66309714351008e-06, 4.85376670480531e-06, 8.37404636787507e-06, 1.36715195691405e-05, 2.11164813882201e-05, 3.08539366784052e-05, 4.26531322165941e-05, 5.58194722333390e-05, 6.92374769940431e-05, 8.15797073340935e-05, 9.16469736665011e-05, 9.87267693062337e-05, 0.000102814602133570, 0.000104574588599453, 0.000105022946790112, 0.000105054448202131, 0.000105022946790112, 0.000104574588599453, 0.000102814602133570, 9.87267693062337e-05, 9.16469736665011e-05, 8.15797073340935e-05, 6.92374769940431e-05, 5.58194722333390e-05, 4.26531322165941e-05, 3.08539366784052e-05, 2.11164813882201e-05, 1.36715195691405e-05, 8.37404636787507e-06, 4.85376670480531e-06, 2.66309714351008e-06, 1.38365814265074e-06, 6.81105707287417e-07, 3.17867597522997e-07, 1.40820624538199e-07, 5.93844896659077e-08, 2.40045259469479e-08, 9.47555303272212e-09, 1.36232195872986e-08, 3.49110986268380e-08, 8.65506121184782e-08, 2.04881316326130e-07, 4.60792829571097e-07, 9.82584373492198e-07, 1.98434181133911e-06, 3.79237835875793e-06, 6.85426078796954e-06, 1.17076109206192e-05, 1.88853744216193e-05, 2.87481259721704e-05, 4.12662689837223e-05, 5.58194722333390e-05, 7.11168935072488e-05, 8.53398419015077e-05, 9.65458367203462e-05, 0.000103255845434848, 0.000105021892447574, 0.000102713945849314, 9.83321374415217e-05, 9.43406710720994e-05, 9.27521775293707e-05, 9.43406710720994e-05, 9.83321374415217e-05, 0.000102713945849314, 0.000105021892447574, 0.000103255845434848, 9.65458367203462e-05, 8.53398419015077e-05, 7.11168935072488e-05, 5.58194722333390e-05, 4.12662689837223e-05, 2.87481259721704e-05, 1.88853744216193e-05, 1.17076109206192e-05, 6.85426078796954e-06, 3.79237835875793e-06, 1.98434181133911e-06, 9.82584373492198e-07, 4.60792829571097e-07, 2.04881316326130e-07, 8.65506121184782e-08, 3.49110986268380e-08, 1.36232195872986e-08, 1.88659213046240e-08, 4.86496930458638e-08, 1.20633840882933e-07, 2.84876411646176e-07, 6.38278879150148e-07, 1.35447952365092e-06, 2.71937524908502e-06, 5.16060848031975e-06, 9.24821358281408e-06, 1.56343292877852e-05, 2.49015619454169e-05, 3.73128880532287e-05, 5.25056732907879e-05, 6.92374769940431e-05, 8.53398419015077e-05, 9.80236847464596e-05, 0.000104574588599453, 0.000103292198808928, 9.43406710720994e-05, 8.01004095364049e-05, 6.47327706393677e-05, 5.29796129600051e-05, 4.85878783857328e-05, 5.29796129600051e-05, 6.47327706393677e-05, 8.01004095364049e-05, 9.43406710720994e-05, 0.000103292198808928, 0.000104574588599453, 9.80236847464596e-05, 8.53398419015077e-05, 6.92374769940431e-05, 5.25056732907879e-05, 3.73128880532287e-05, 2.49015619454169e-05, 1.56343292877852e-05, 9.24821358281408e-06, 5.16060848031975e-06, 2.71937524908502e-06, 1.35447952365092e-06, 6.38278879150148e-07, 2.84876411646176e-07, 1.20633840882933e-07, 4.86496930458638e-08, 1.88659213046240e-08, 2.50828745322092e-08, 6.48888087751350e-08, 1.60768392527646e-07, 3.78653954558926e-07, 8.45234606585766e-07, 1.78532487292143e-06, 3.56416973011514e-06, 6.71757102075987e-06, 1.19379333532568e-05, 1.99731141473789e-05, 3.14001424341404e-05, 4.62718248240169e-05, 6.37062474764760e-05, 8.15797073340935e-05, 9.65458367203462e-05, 0.000104574588599453, 0.000102042231178953, 8.71325218756865e-05, 6.10429656391050e-05, 2.83935184446772e-05, -3.56860402056998e-06, -2.69054040049465e-05, -3.54576546772710e-05, -2.69054040049465e-05, -3.56860402056998e-06, 2.83935184446772e-05, 6.10429656391050e-05, 8.71325218756865e-05, 0.000102042231178953, 0.000104574588599453, 9.65458367203462e-05, 8.15797073340935e-05, 6.37062474764760e-05, 4.62718248240169e-05, 3.14001424341404e-05, 1.99731141473789e-05, 1.19379333532568e-05, 6.71757102075987e-06, 3.56416973011514e-06, 1.78532487292143e-06, 8.45234606585766e-07, 3.78653954558926e-07, 1.60768392527646e-07, 6.48888087751350e-08, 2.50828745322092e-08, 3.19600285887441e-08, 8.27996516564894e-08, 2.04881316326130e-07, 4.81302057799405e-07, 1.07063902357280e-06, 2.25171751613426e-06, 4.47172256295234e-06, 8.37404636787507e-06, 1.47634982776905e-05, 2.44535561988104e-05, 3.79503171324205e-05, 5.49792304937719e-05, 7.39590344345512e-05, 9.16469736665011e-05, 0.000103255845434848, 0.000103292198808928, 8.71325218756865e-05, 5.29796129600051e-05, 3.48293859900704e-06, -5.38096770295247e-05, -0.000107712044958864, -0.000146253117165926, -0.000160247892797217, -0.000146253117165926, -0.000107712044958864, -5.38096770295247e-05, 3.48293859900704e-06, 5.29796129600051e-05, 8.71325218756865e-05, 0.000103292198808928, 0.000103255845434848, 9.16469736665011e-05, 7.39590344345512e-05, 5.49792304937719e-05, 3.79503171324205e-05, 2.44535561988104e-05, 1.47634982776905e-05, 8.37404636787507e-06, 4.47172256295234e-06, 2.25171751613426e-06, 1.07063902357280e-06, 4.81302057799405e-07, 2.04881316326130e-07, 8.27996516564894e-08, 3.19600285887441e-08, 3.89906488916959e-08, 1.01062914377729e-07, 2.49724523044566e-07, 5.85266109870174e-07, 1.29791230698978e-06, 2.71937524908502e-06, 5.37538199596193e-06, 1.00085168578969e-05, 1.75179335520721e-05, 2.87481259721704e-05, 4.40746598962355e-05, 6.28033360310301e-05, 8.25260270047090e-05, 9.87267693062337e-05, 0.000105021892447574, 9.43406710720994e-05, 6.10429656391050e-05, 3.48293859900704e-06, -7.39288784842864e-05, -0.000160247892797217, -0.000239790358017673, -0.000296016498652868, -0.000316327919743630, -0.000296016498652868, -0.000239790358017673, -0.000160247892797217, -7.39288784842864e-05, 3.48293859900704e-06, 6.10429656391050e-05, 9.43406710720994e-05, 0.000105021892447574, 9.87267693062337e-05, 8.25260270047090e-05, 6.28033360310301e-05, 4.40746598962355e-05, 2.87481259721704e-05, 1.75179335520721e-05, 1.00085168578969e-05, 5.37538199596193e-06, 2.71937524908502e-06, 1.29791230698978e-06, 5.85266109870174e-07, 2.49724523044566e-07, 1.01062914377729e-07, 3.89906488916959e-08, 4.55229473316947e-08, 1.17995055836862e-07, 2.91192299679587e-07, 6.81105707287417e-07, 1.50662612326427e-06, 3.14679826715717e-06, 6.19627246368329e-06, 1.14814226042962e-05, 1.99731141473789e-05, 3.25166967294651e-05, 4.93214804590313e-05, 6.92374769940431e-05, 8.90015429892788e-05, 0.000102814602133570, 0.000102713945849314, 8.01004095364049e-05, 2.83935184446772e-05, -5.38096770295247e-05, -0.000160247892797217, -0.000276507668926267, -0.000382361591631547, -0.000456679478033513, -0.000483443324174456, -0.000456679478033513, -0.000382361591631547, -0.000276507668926267, -0.000160247892797217, -5.38096770295247e-05, 2.83935184446772e-05, 8.01004095364049e-05, 0.000102713945849314, 0.000102814602133570, 8.90015429892788e-05, 6.92374769940431e-05, 4.93214804590313e-05, 3.25166967294651e-05, 1.99731141473789e-05, 1.14814226042962e-05, 6.19627246368329e-06, 3.14679826715717e-06, 1.50662612326427e-06, 6.81105707287417e-07, 2.91192299679587e-07, 1.17995055836862e-07, 4.55229473316947e-08, 5.08531891127888e-08, 1.31788202857858e-07, 3.24904635488620e-07, 7.58831048414707e-07, 1.67538236989635e-06, 3.49108335567331e-06, 6.85426078796954e-06, 1.26543621795561e-05, 2.19106791379053e-05, 3.54515670568725e-05, 5.33222161100502e-05, 7.39590344345512e-05, 9.33463057307625e-05, 0.000104574588599453, 9.83321374415217e-05, 6.47327706393677e-05, -3.56860402056998e-06, -0.000107712044958864, -0.000239790358017673, -0.000382361591631547, -0.000511259898044823, -0.000601390787521298, -0.000633788899621793, -0.000601390787521298, -0.000511259898044823, -0.000382361591631547, -0.000239790358017673, -0.000107712044958864, -3.56860402056998e-06, 6.47327706393677e-05, 9.83321374415217e-05, 0.000104574588599453, 9.33463057307625e-05, 7.39590344345512e-05, 5.33222161100502e-05, 3.54515670568725e-05, 2.19106791379053e-05, 1.26543621795561e-05, 6.85426078796954e-06, 3.49108335567331e-06, 1.67538236989635e-06, 7.58831048414707e-07, 3.24904635488620e-07, 1.31788202857858e-07, 5.08531891127888e-08, 5.43477017991462e-08, 1.40820624538199e-07, 3.46950670044095e-07, 8.09573799155140e-07, 1.78532487292143e-06, 3.71478902779988e-06, 7.28033546919081e-06, 1.34103909866892e-05, 2.31514778429911e-05, 3.73128880532287e-05, 5.58194722333390e-05, 7.68178136928210e-05, 9.57742289383148e-05, 0.000105022946790112, 9.43406710720994e-05, 5.29796129600051e-05, -2.69054040049465e-05, -0.000146253117165926, -0.000296016498652868, -0.000456679478033513, -0.000601390787521298, -0.000702359047267882, -0.000738616302026845, -0.000702359047267882, -0.000601390787521298, -0.000456679478033513, -0.000296016498652868, -0.000146253117165926, -2.69054040049465e-05, 5.29796129600051e-05, 9.43406710720994e-05, 0.000105022946790112, 9.57742289383148e-05, 7.68178136928210e-05, 5.58194722333390e-05, 3.73128880532287e-05, 2.31514778429911e-05, 1.34103909866892e-05, 7.28033546919081e-06, 3.71478902779988e-06, 1.78532487292143e-06, 8.09573799155140e-07, 3.46950670044095e-07, 1.40820624538199e-07, 5.43477017991462e-08, 5.55652721178737e-08, 1.43965897210943e-07, 3.54622159971847e-07, 8.27215921702499e-07, 1.82350868732049e-06, 3.79237835875793e-06, 7.42785239064459e-06, 1.36715195691405e-05, 2.35785913357379e-05, 3.79503171324205e-05, 5.66673658478765e-05, 7.77720392471942e-05, 9.65458367203462e-05, 0.000105054448202131, 9.27521775293707e-05, 4.85878783857328e-05, -3.54576546772710e-05, -0.000160247892797217, -0.000316327919743630, -0.000483443324174456, -0.000633788899621793, -0.000738616302026845, -0.000776247396595579, -0.000738616302026845, -0.000633788899621793, -0.000483443324174456, -0.000316327919743630, -0.000160247892797217, -3.54576546772710e-05, 4.85878783857328e-05, 9.27521775293707e-05, 0.000105054448202131, 9.65458367203462e-05, 7.77720392471942e-05, 5.66673658478765e-05, 3.79503171324205e-05, 2.35785913357379e-05, 1.36715195691405e-05, 7.42785239064459e-06, 3.79237835875793e-06, 1.82350868732049e-06, 8.27215921702499e-07, 3.54622159971847e-07, 1.43965897210943e-07, 5.55652721178737e-08, 5.43477017991462e-08, 1.40820624538199e-07, 3.46950670044095e-07, 8.09573799155140e-07, 1.78532487292143e-06, 3.71478902779988e-06, 7.28033546919081e-06, 1.34103909866892e-05, 2.31514778429911e-05, 3.73128880532287e-05, 5.58194722333390e-05, 7.68178136928210e-05, 9.57742289383148e-05, 0.000105022946790112, 9.43406710720994e-05, 5.29796129600051e-05, -2.69054040049465e-05, -0.000146253117165926, -0.000296016498652868, -0.000456679478033513, -0.000601390787521298, -0.000702359047267882, -0.000738616302026845, -0.000702359047267882, -0.000601390787521298, -0.000456679478033513, -0.000296016498652868, -0.000146253117165926, -2.69054040049465e-05, 5.29796129600051e-05, 9.43406710720994e-05, 0.000105022946790112, 9.57742289383148e-05, 7.68178136928210e-05, 5.58194722333390e-05, 3.73128880532287e-05, 2.31514778429911e-05, 1.34103909866892e-05, 7.28033546919081e-06, 3.71478902779988e-06, 1.78532487292143e-06, 8.09573799155140e-07, 3.46950670044095e-07, 1.40820624538199e-07, 5.43477017991462e-08, 5.08531891127888e-08, 1.31788202857858e-07, 3.24904635488620e-07, 7.58831048414707e-07, 1.67538236989635e-06, 3.49108335567331e-06, 6.85426078796954e-06, 1.26543621795561e-05, 2.19106791379053e-05, 3.54515670568725e-05, 5.33222161100502e-05, 7.39590344345512e-05, 9.33463057307625e-05, 0.000104574588599453, 9.83321374415217e-05, 6.47327706393677e-05, -3.56860402056998e-06, -0.000107712044958864, -0.000239790358017673, -0.000382361591631547, -0.000511259898044823, -0.000601390787521298, -0.000633788899621793, -0.000601390787521298, -0.000511259898044823, -0.000382361591631547, -0.000239790358017673, -0.000107712044958864, -3.56860402056998e-06, 6.47327706393677e-05, 9.83321374415217e-05, 0.000104574588599453, 9.33463057307625e-05, 7.39590344345512e-05, 5.33222161100502e-05, 3.54515670568725e-05, 2.19106791379053e-05, 1.26543621795561e-05, 6.85426078796954e-06, 3.49108335567331e-06, 1.67538236989635e-06, 7.58831048414707e-07, 3.24904635488620e-07, 1.31788202857858e-07, 5.08531891127888e-08, 4.55229473316947e-08, 1.17995055836862e-07, 2.91192299679587e-07, 6.81105707287417e-07, 1.50662612326427e-06, 3.14679826715717e-06, 6.19627246368329e-06, 1.14814226042962e-05, 1.99731141473789e-05, 3.25166967294651e-05, 4.93214804590313e-05, 6.92374769940431e-05, 8.90015429892788e-05, 0.000102814602133570, 0.000102713945849314, 8.01004095364049e-05, 2.83935184446772e-05, -5.38096770295247e-05, -0.000160247892797217, -0.000276507668926267, -0.000382361591631547, -0.000456679478033513, -0.000483443324174456, -0.000456679478033513, -0.000382361591631547, -0.000276507668926267, -0.000160247892797217, -5.38096770295247e-05, 2.83935184446772e-05, 8.01004095364049e-05, 0.000102713945849314, 0.000102814602133570, 8.90015429892788e-05, 6.92374769940431e-05, 4.93214804590313e-05, 3.25166967294651e-05, 1.99731141473789e-05, 1.14814226042962e-05, 6.19627246368329e-06, 3.14679826715717e-06, 1.50662612326427e-06, 6.81105707287417e-07, 2.91192299679587e-07, 1.17995055836862e-07, 4.55229473316947e-08, 3.89906488916959e-08, 1.01062914377729e-07, 2.49724523044566e-07, 5.85266109870174e-07, 1.29791230698978e-06, 2.71937524908502e-06, 5.37538199596193e-06, 1.00085168578969e-05, 1.75179335520721e-05, 2.87481259721704e-05, 4.40746598962355e-05, 6.28033360310301e-05, 8.25260270047090e-05, 9.87267693062337e-05, 0.000105021892447574, 9.43406710720994e-05, 6.10429656391050e-05, 3.48293859900704e-06, -7.39288784842864e-05, -0.000160247892797217, -0.000239790358017673, -0.000296016498652868, -0.000316327919743630, -0.000296016498652868, -0.000239790358017673, -0.000160247892797217, -7.39288784842864e-05, 3.48293859900704e-06, 6.10429656391050e-05, 9.43406710720994e-05, 0.000105021892447574, 9.87267693062337e-05, 8.25260270047090e-05, 6.28033360310301e-05, 4.40746598962355e-05, 2.87481259721704e-05, 1.75179335520721e-05, 1.00085168578969e-05, 5.37538199596193e-06, 2.71937524908502e-06, 1.29791230698978e-06, 5.85266109870174e-07, 2.49724523044566e-07, 1.01062914377729e-07, 3.89906488916959e-08, 3.19600285887441e-08, 8.27996516564894e-08, 2.04881316326130e-07, 4.81302057799405e-07, 1.07063902357280e-06, 2.25171751613426e-06, 4.47172256295234e-06, 8.37404636787507e-06, 1.47634982776905e-05, 2.44535561988104e-05, 3.79503171324205e-05, 5.49792304937719e-05, 7.39590344345512e-05, 9.16469736665011e-05, 0.000103255845434848, 0.000103292198808928, 8.71325218756865e-05, 5.29796129600051e-05, 3.48293859900704e-06, -5.38096770295247e-05, -0.000107712044958864, -0.000146253117165926, -0.000160247892797217, -0.000146253117165926, -0.000107712044958864, -5.38096770295247e-05, 3.48293859900704e-06, 5.29796129600051e-05, 8.71325218756865e-05, 0.000103292198808928, 0.000103255845434848, 9.16469736665011e-05, 7.39590344345512e-05, 5.49792304937719e-05, 3.79503171324205e-05, 2.44535561988104e-05, 1.47634982776905e-05, 8.37404636787507e-06, 4.47172256295234e-06, 2.25171751613426e-06, 1.07063902357280e-06, 4.81302057799405e-07, 2.04881316326130e-07, 8.27996516564894e-08, 3.19600285887441e-08, 2.50828745322092e-08, 6.48888087751350e-08, 1.60768392527646e-07, 3.78653954558926e-07, 8.45234606585766e-07, 1.78532487292143e-06, 3.56416973011514e-06, 6.71757102075987e-06, 1.19379333532568e-05, 1.99731141473789e-05, 3.14001424341404e-05, 4.62718248240169e-05, 6.37062474764760e-05, 8.15797073340935e-05, 9.65458367203462e-05, 0.000104574588599453, 0.000102042231178953, 8.71325218756865e-05, 6.10429656391050e-05, 2.83935184446772e-05, -3.56860402056998e-06, -2.69054040049465e-05, -3.54576546772710e-05, -2.69054040049465e-05, -3.56860402056998e-06, 2.83935184446772e-05, 6.10429656391050e-05, 8.71325218756865e-05, 0.000102042231178953, 0.000104574588599453, 9.65458367203462e-05, 8.15797073340935e-05, 6.37062474764760e-05, 4.62718248240169e-05, 3.14001424341404e-05, 1.99731141473789e-05, 1.19379333532568e-05, 6.71757102075987e-06, 3.56416973011514e-06, 1.78532487292143e-06, 8.45234606585766e-07, 3.78653954558926e-07, 1.60768392527646e-07, 6.48888087751350e-08, 2.50828745322092e-08, 1.88659213046240e-08, 4.86496930458638e-08, 1.20633840882933e-07, 2.84876411646176e-07, 6.38278879150148e-07, 1.35447952365092e-06, 2.71937524908502e-06, 5.16060848031975e-06, 9.24821358281408e-06, 1.56343292877852e-05, 2.49015619454169e-05, 3.73128880532287e-05, 5.25056732907879e-05, 6.92374769940431e-05, 8.53398419015077e-05, 9.80236847464596e-05, 0.000104574588599453, 0.000103292198808928, 9.43406710720994e-05, 8.01004095364049e-05, 6.47327706393677e-05, 5.29796129600051e-05, 4.85878783857328e-05, 5.29796129600051e-05, 6.47327706393677e-05, 8.01004095364049e-05, 9.43406710720994e-05, 0.000103292198808928, 0.000104574588599453, 9.80236847464596e-05, 8.53398419015077e-05, 6.92374769940431e-05, 5.25056732907879e-05, 3.73128880532287e-05, 2.49015619454169e-05, 1.56343292877852e-05, 9.24821358281408e-06, 5.16060848031975e-06, 2.71937524908502e-06, 1.35447952365092e-06, 6.38278879150148e-07, 2.84876411646176e-07, 1.20633840882933e-07, 4.86496930458638e-08, 1.88659213046240e-08, 1.36232195872986e-08, 3.49110986268380e-08, 8.65506121184782e-08, 2.04881316326130e-07, 4.60792829571097e-07, 9.82584373492198e-07, 1.98434181133911e-06, 3.79237835875793e-06, 6.85426078796954e-06, 1.17076109206192e-05, 1.88853744216193e-05, 2.87481259721704e-05, 4.12662689837223e-05, 5.58194722333390e-05, 7.11168935072488e-05, 8.53398419015077e-05, 9.65458367203462e-05, 0.000103255845434848, 0.000105021892447574, 0.000102713945849314, 9.83321374415217e-05, 9.43406710720994e-05, 9.27521775293707e-05, 9.43406710720994e-05, 9.83321374415217e-05, 0.000102713945849314, 0.000105021892447574, 0.000103255845434848, 9.65458367203462e-05, 8.53398419015077e-05, 7.11168935072488e-05, 5.58194722333390e-05, 4.12662689837223e-05, 2.87481259721704e-05, 1.88853744216193e-05, 1.17076109206192e-05, 6.85426078796954e-06, 3.79237835875793e-06, 1.98434181133911e-06, 9.82584373492198e-07, 4.60792829571097e-07, 2.04881316326130e-07, 8.65506121184782e-08, 3.49110986268380e-08, 1.36232195872986e-08, 9.47555303272212e-09, 2.40045259469479e-08, 5.93844896659077e-08, 1.40820624538199e-07, 3.17867597522997e-07, 6.81105707287417e-07, 1.38365814265074e-06, 2.66309714351008e-06, 4.85376670480531e-06, 8.37404636787507e-06, 1.36715195691405e-05, 2.11164813882201e-05, 3.08539366784052e-05, 4.26531322165941e-05, 5.58194722333390e-05, 6.92374769940431e-05, 8.15797073340935e-05, 9.16469736665011e-05, 9.87267693062337e-05, 0.000102814602133570, 0.000104574588599453, 0.000105022946790112, 0.000105054448202131, 0.000105022946790112, 0.000104574588599453, 0.000102814602133570, 9.87267693062337e-05, 9.16469736665011e-05, 8.15797073340935e-05, 6.92374769940431e-05, 5.58194722333390e-05, 4.26531322165941e-05, 3.08539366784052e-05, 2.11164813882201e-05, 1.36715195691405e-05, 8.37404636787507e-06, 4.85376670480531e-06, 2.66309714351008e-06, 1.38365814265074e-06, 6.81105707287417e-07, 3.17867597522997e-07, 1.40820624538199e-07, 5.93844896659077e-08, 2.40045259469479e-08, 9.47555303272212e-09, 6.38591807167264e-09, 1.58508146828878e-08, 3.89906488916959e-08, 9.24969386023430e-08, 2.09441434532649e-07, 4.50863184752836e-07, 9.21233347070692e-07, 1.78532487292143e-06, 3.28038878219203e-06, 5.71361782286945e-06, 9.43303910821773e-06, 1.47634982776905e-05, 2.19106791379053e-05, 3.08539366784052e-05, 4.12662689837223e-05, 5.25056732907879e-05, 6.37062474764760e-05, 7.39590344345512e-05, 8.25260270047090e-05, 8.90015429892788e-05, 9.33463057307625e-05, 9.57742289383148e-05, 9.65458367203462e-05, 9.57742289383148e-05, 9.33463057307625e-05, 8.90015429892788e-05, 8.25260270047090e-05, 7.39590344345512e-05, 6.37062474764760e-05, 5.25056732907879e-05, 4.12662689837223e-05, 3.08539366784052e-05, 2.19106791379053e-05, 1.47634982776905e-05, 9.43303910821773e-06, 5.71361782286945e-06, 3.28038878219203e-06, 1.78532487292143e-06, 9.21233347070692e-07, 4.50863184752836e-07, 2.09441434532649e-07, 9.24969386023430e-08, 3.89906488916959e-08, 1.58508146828878e-08, 6.38591807167264e-09, 4.21358788977445e-09, 1.00967088601294e-08, 2.45376567211366e-08, 5.80830531773184e-08, 1.31788202857858e-07, 2.84876411646176e-07, 5.85266109870174e-07, 1.14169885732707e-06, 2.11392933729923e-06, 3.71478902779988e-06, 6.19627246368329e-06, 9.81313281641988e-06, 1.47634982776905e-05, 2.11164813882201e-05, 2.87481259721704e-05, 3.73128880532287e-05, 4.62718248240169e-05, 5.49792304937719e-05, 6.28033360310301e-05, 6.92374769940431e-05, 7.39590344345512e-05, 7.68178136928210e-05, 7.77720392471942e-05, 7.68178136928210e-05, 7.39590344345512e-05, 6.92374769940431e-05, 6.28033360310301e-05, 5.49792304937719e-05, 4.62718248240169e-05, 3.73128880532287e-05, 2.87481259721704e-05, 2.11164813882201e-05, 1.47634982776905e-05, 9.81313281641988e-06, 6.19627246368329e-06, 3.71478902779988e-06, 2.11392933729923e-06, 1.14169885732707e-06, 5.85266109870174e-07, 2.84876411646176e-07, 1.31788202857858e-07, 5.80830531773184e-08, 2.45376567211366e-08, 1.00967088601294e-08, 4.21358788977445e-09, 2.76950476384493e-09, 6.25729514887803e-09, 1.48529677550972e-08, 3.49110986268380e-08, 7.92108291995698e-08, 1.71768449431056e-07, 3.54622159971847e-07, 6.95998539972188e-07, 1.29791230698978e-06, 2.29955404452745e-06, 3.87152588556904e-06, 6.19627246368329e-06, 9.43303910821773e-06, 1.36715195691405e-05, 1.88853744216193e-05, 2.49015619454169e-05, 3.14001424341404e-05, 3.79503171324205e-05, 4.40746598962355e-05, 4.93214804590313e-05, 5.33222161100502e-05, 5.58194722333390e-05, 5.66673658478765e-05, 5.58194722333390e-05, 5.33222161100502e-05, 4.93214804590313e-05, 4.40746598962355e-05, 3.79503171324205e-05, 3.14001424341404e-05, 2.49015619454169e-05, 1.88853744216193e-05, 1.36715195691405e-05, 9.43303910821773e-06, 6.19627246368329e-06, 3.87152588556904e-06, 2.29955404452745e-06, 1.29791230698978e-06, 6.95998539972188e-07, 3.54622159971847e-07, 1.71768449431056e-07, 7.92108291995698e-08, 3.49110986268380e-08, 1.48529677550972e-08, 6.25729514887803e-09, 2.76950476384493e-09, 1.86079730785587e-09, 3.83228069763623e-09, 8.71028936010607e-09, 2.01439573859886e-08, 4.55229473316947e-08, 9.88500999733794e-08, 2.04881316326130e-07, 4.04288926318536e-07, 7.58831048414707e-07, 1.35447952365092e-06, 2.29955404452745e-06, 3.71478902779988e-06, 5.71361782286945e-06, 8.37404636787507e-06, 1.17076109206192e-05, 1.56343292877852e-05, 1.99731141473789e-05, 2.44535561988104e-05, 2.87481259721704e-05, 3.25166967294651e-05, 3.54515670568725e-05, 3.73128880532287e-05, 3.79503171324205e-05, 3.73128880532287e-05, 3.54515670568725e-05, 3.25166967294651e-05, 2.87481259721704e-05, 2.44535561988104e-05, 1.99731141473789e-05, 1.56343292877852e-05, 1.17076109206192e-05, 8.37404636787507e-06, 5.71361782286945e-06, 3.71478902779988e-06, 2.29955404452745e-06, 1.35447952365092e-06, 7.58831048414707e-07, 4.04288926318536e-07, 2.04881316326130e-07, 9.88500999733794e-08, 4.55229473316947e-08, 2.01439573859886e-08, 8.71028936010607e-09, 3.83228069763623e-09, 1.86079730785587e-09, 1.31905212676454e-09, 2.38122892523348e-09, 5.01955733629269e-09, 1.12303450288689e-08, 2.50828745322092e-08, 5.43477017991462e-08, 1.12888370228736e-07, 2.23732850786383e-07, 4.22320880156400e-07, 7.58831048414707e-07, 1.29791230698978e-06, 2.11392933729923e-06, 3.28038878219203e-06, 4.85376670480531e-06, 6.85426078796954e-06, 9.24821358281408e-06, 1.19379333532568e-05, 1.47634982776905e-05, 1.75179335520721e-05, 1.99731141473789e-05, 2.19106791379053e-05, 2.31514778429911e-05, 2.35785913357379e-05, 2.31514778429911e-05, 2.19106791379053e-05, 1.99731141473789e-05, 1.75179335520721e-05, 1.47634982776905e-05, 1.19379333532568e-05, 9.24821358281408e-06, 6.85426078796954e-06, 4.85376670480531e-06, 3.28038878219203e-06, 2.11392933729923e-06, 1.29791230698978e-06, 7.58831048414707e-07, 4.22320880156400e-07, 2.23732850786383e-07, 1.12888370228736e-07, 5.43477017991462e-08, 2.50828745322092e-08, 1.12303450288689e-08, 5.01955733629269e-09, 2.38122892523348e-09, 1.31905212676454e-09, 1.01287031941811e-09, 1.55816904933725e-09, 2.91773292876697e-09, 6.13155998481251e-09, 1.33327237474646e-08, 2.86236210918466e-08, 5.93844896659077e-08, 1.17995055836862e-07, 2.23732850786383e-07, 4.04288926318536e-07, 6.95998539972188e-07, 1.14169885732707e-06, 1.78532487292143e-06, 2.66309714351008e-06, 3.79237835875793e-06, 5.16060848031975e-06, 6.71757102075987e-06, 8.37404636787507e-06, 1.00085168578969e-05, 1.14814226042962e-05, 1.26543621795561e-05, 1.34103909866892e-05, 1.36715195691405e-05, 1.34103909866892e-05, 1.26543621795561e-05, 1.14814226042962e-05, 1.00085168578969e-05, 8.37404636787507e-06, 6.71757102075987e-06, 5.16060848031975e-06, 3.79237835875793e-06, 2.66309714351008e-06, 1.78532487292143e-06, 1.14169885732707e-06, 6.95998539972188e-07, 4.04288926318536e-07, 2.23732850786383e-07, 1.17995055836862e-07, 5.93844896659077e-08, 2.86236210918466e-08, 1.33327237474646e-08, 6.13155998481251e-09, 2.91773292876697e-09, 1.55816904933725e-09, 1.01287031941811e-09, 8.48742570013430e-10, 1.11542338335337e-09, 1.78273935739558e-09, 3.36647022652934e-09, 6.93062591263766e-09, 1.45350598653710e-08, 2.99135823201005e-08, 5.93844896659077e-08, 1.12888370228736e-07, 2.04881316326130e-07, 3.54622159971847e-07, 5.85266109870174e-07, 9.21233347070692e-07, 1.38365814265074e-06, 1.98434181133911e-06, 2.71937524908502e-06, 3.56416973011514e-06, 4.47172256295234e-06, 5.37538199596193e-06, 6.19627246368329e-06, 6.85426078796954e-06, 7.28033546919081e-06, 7.42785239064459e-06, 7.28033546919081e-06, 6.85426078796954e-06, 6.19627246368329e-06, 5.37538199596193e-06, 4.47172256295234e-06, 3.56416973011514e-06, 2.71937524908502e-06, 1.98434181133911e-06, 1.38365814265074e-06, 9.21233347070692e-07, 5.85266109870174e-07, 3.54622159971847e-07, 2.04881316326130e-07, 1.12888370228736e-07, 5.93844896659077e-08, 2.99135823201005e-08, 1.45350598653710e-08, 6.93062591263766e-09, 3.36647022652934e-09, 1.78273935739558e-09, 1.11542338335337e-09, 8.48742570013430e-10, 7.65267106158951e-10, 8.89480015348196e-10, 1.20138077063464e-09, 1.94441713363734e-09, 3.62350941634546e-09, 7.22208942482029e-09, 1.45350598653710e-08, 2.86236210918466e-08, 5.43477017991462e-08, 9.88500999733794e-08, 1.71768449431056e-07, 2.84876411646176e-07, 4.50863184752836e-07, 6.81105707287417e-07, 9.82584373492198e-07, 1.35447952365092e-06, 1.78532487292143e-06, 2.25171751613426e-06, 2.71937524908502e-06, 3.14679826715717e-06, 3.49108335567331e-06, 3.71478902779988e-06, 3.79237835875793e-06, 3.71478902779988e-06, 3.49108335567331e-06, 3.14679826715717e-06, 2.71937524908502e-06, 2.25171751613426e-06, 1.78532487292143e-06, 1.35447952365092e-06, 9.82584373492198e-07, 6.81105707287417e-07, 4.50863184752836e-07, 2.84876411646176e-07, 1.71768449431056e-07, 9.88500999733794e-08, 5.43477017991462e-08, 2.86236210918466e-08, 1.45350598653710e-08, 7.22208942482029e-09, 3.62350941634546e-09, 1.94441713363734e-09, 1.20138077063464e-09, 8.89480015348196e-10, 7.65267106158951e-10, 7.24974003325432e-10, 7.80063578263050e-10, 9.18854316108359e-10, 1.25068166668281e-09, 2.00344697737242e-09, 3.62350941634546e-09, 6.93062591263766e-09, 1.33327237474646e-08, 2.50828745322092e-08, 4.55229473316947e-08, 7.92108291995698e-08, 1.31788202857858e-07, 2.09441434532649e-07, 3.17867597522997e-07, 4.60792829571097e-07, 6.38278879150148e-07, 8.45234606585766e-07, 1.07063902357280e-06, 1.29791230698978e-06, 1.50662612326427e-06, 1.67538236989635e-06, 1.78532487292143e-06, 1.82350868732049e-06, 1.78532487292143e-06, 1.67538236989635e-06, 1.50662612326427e-06, 1.29791230698978e-06, 1.07063902357280e-06, 8.45234606585766e-07, 6.38278879150148e-07, 4.60792829571097e-07, 3.17867597522997e-07, 2.09441434532649e-07, 1.31788202857858e-07, 7.92108291995698e-08, 4.55229473316947e-08, 2.50828745322092e-08, 1.33327237474646e-08, 6.93062591263766e-09, 3.62350941634546e-09, 2.00344697737242e-09, 1.25068166668281e-09, 9.18854316108359e-10, 7.80063578263050e-10, 7.24974003325432e-10, 7.06511386476401e-10, 7.29772000047663e-10, 7.88559232542339e-10, 9.29587617665334e-10, 1.25068166668281e-09, 1.94441713363734e-09, 3.36647022652934e-09, 6.13155998481251e-09, 1.12303450288689e-08, 2.01439573859886e-08, 3.49110986268380e-08, 5.80830531773184e-08, 9.24969386023430e-08, 1.40820624538199e-07, 2.04881316326130e-07, 2.84876411646176e-07, 3.78653954558926e-07, 4.81302057799405e-07, 5.85266109870174e-07, 6.81105707287417e-07, 7.58831048414707e-07, 8.09573799155140e-07, 8.27215921702499e-07, 8.09573799155140e-07, 7.58831048414707e-07, 6.81105707287417e-07, 5.85266109870174e-07, 4.81302057799405e-07, 3.78653954558926e-07, 2.84876411646176e-07, 2.04881316326130e-07, 1.40820624538199e-07, 9.24969386023430e-08, 5.80830531773184e-08, 3.49110986268380e-08, 2.01439573859886e-08, 1.12303450288689e-08, 6.13155998481251e-09, 3.36647022652934e-09, 1.94441713363734e-09, 1.25068166668281e-09, 9.29587617665334e-10, 7.88559232542339e-10, 7.29772000047663e-10, 7.06511386476401e-10, 6.98479384160607e-10, 7.07828138471761e-10, 7.31526334533303e-10, 7.88559232542339e-10, 9.18854316108359e-10, 1.20138077063464e-09, 1.78273935739558e-09, 2.91773292876697e-09, 5.01955733629269e-09, 8.71028936010607e-09, 1.48529677550972e-08, 2.45376567211366e-08, 3.89906488916959e-08, 5.93844896659077e-08, 8.65506121184782e-08, 1.20633840882933e-07, 1.60768392527646e-07, 2.04881316326130e-07, 2.49724523044566e-07, 2.91192299679587e-07, 3.24904635488620e-07, 3.46950670044095e-07, 3.54622159971847e-07, 3.46950670044095e-07, 3.24904635488620e-07, 2.91192299679587e-07, 2.49724523044566e-07, 2.04881316326130e-07, 1.60768392527646e-07, 1.20633840882933e-07, 8.65506121184782e-08, 5.93844896659077e-08, 3.89906488916959e-08, 2.45376567211366e-08, 1.48529677550972e-08, 8.71028936010607e-09, 5.01955733629269e-09, 2.91773292876697e-09, 1.78273935739558e-09, 1.20138077063464e-09, 9.18854316108359e-10, 7.88559232542339e-10, 7.31526334533303e-10, 7.07828138471761e-10, 6.98479384160607e-10, 6.95161307407246e-10, 6.98737397699556e-10, 7.07828138471761e-10, 7.29772000047663e-10, 7.80063578263050e-10, 8.89480015348196e-10, 1.11542338335337e-09, 1.55816904933725e-09, 2.38122892523348e-09, 3.83228069763623e-09, 6.25729514887803e-09, 1.00967088601294e-08, 1.58508146828878e-08, 2.40045259469479e-08, 3.49110986268380e-08, 4.86496930458638e-08, 6.48888087751350e-08, 8.27996516564894e-08, 1.01062914377729e-07, 1.17995055836862e-07, 1.31788202857858e-07, 1.40820624538199e-07, 1.43965897210943e-07, 1.40820624538199e-07, 1.31788202857858e-07, 1.17995055836862e-07, 1.01062914377729e-07, 8.27996516564894e-08, 6.48888087751350e-08, 4.86496930458638e-08, 3.49110986268380e-08, 2.40045259469479e-08, 1.58508146828878e-08, 1.00967088601294e-08, 6.25729514887803e-09, 3.83228069763623e-09, 2.38122892523348e-09, 1.55816904933725e-09, 1.11542338335337e-09, 8.89480015348196e-10, 7.80063578263050e-10, 7.29772000047663e-10, 7.07828138471761e-10, 6.98737397699556e-10, 6.95161307407246e-10, 6.93859534369387e-10, 6.95161307407246e-10, 6.98479384160607e-10, 7.06511386476401e-10, 7.24974003325432e-10, 7.65267106158951e-10, 8.48742570013430e-10, 1.01287031941811e-09, 1.31905212676454e-09, 1.86079730785587e-09, 2.76950476384493e-09, 4.21358788977445e-09, 6.38591807167264e-09, 9.47555303272212e-09, 1.36232195872986e-08, 1.88659213046240e-08, 2.50828745322092e-08, 3.19600285887441e-08, 3.89906488916959e-08, 4.55229473316947e-08, 5.08531891127888e-08, 5.43477017991462e-08, 5.55652721178737e-08, 5.43477017991462e-08, 5.08531891127888e-08, 4.55229473316947e-08, 3.89906488916959e-08, 3.19600285887441e-08, 2.50828745322092e-08, 1.88659213046240e-08, 1.36232195872986e-08, 9.47555303272212e-09, 6.38591807167264e-09, 4.21358788977445e-09, 2.76950476384493e-09, 1.86079730785587e-09, 1.31905212676454e-09, 1.01287031941811e-09, 8.48742570013430e-10, 7.65267106158951e-10, 7.24974003325432e-10, 7.06511386476401e-10, 6.98479384160607e-10, 6.95161307407246e-10, 6.93859534369387e-10
        ];
        this.logKernel = new Float32Array(logKernel);
        this.logKernelTex = new tgl.Texture(dim, dim, 1, true, false, true, this.logKernel);

        this.timeVector = new Float32Array(linspace(0.0, this.numIntervals * this.deltaT, this.numIntervals));
        this.timeVectorTex = new tgl.Texture(this.numIntervals, 1, 1, true, false, true, this.timeVector);
        this.wl = 0.02;

        this.filterType = 'none';
        this.computePFFilter();

        this.instant = 0;
        this.playing = false;
        this.usePhase = false;

        this.loadTexture("ruler.png");
        // Flip image pixels into the bottom-to-top order that WebGL expects.
        // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        this.rulerLoaded = false;
    }

    Renderer.prototype.loadTexture = function (url) {
        this.rulerTex = new tgl.Texture(1, 1, 4, false, false, true, new Uint8Array([0, 0, 255, 255]));
      
        const image = new Image();
        image.onload = () => {
            // Get pixel values
            var canvas = document.createElement('canvas');
            var context = canvas.getContext('2d');
            canvas.width = image.width;
            canvas.height = image.height;
            context.drawImage(image, 0, 0 );
            var data = context.getImageData(0, 0, image.width, image.height).data;
            this.rulerTex = new tgl.Texture(image.width, image.height, 4, false, false, true, data);
            this.rulerLoaded = true;
        };
        image.src = url;
      }

    Renderer.prototype.createVBOs = function () {
        var gl = this.gl;

        this.rayVbo = new tgl.VertexBuffer();
        this.rayVbo.addAttribute("TexCoord", 3, gl.FLOAT, false);
        this.rayVbo.init(this.rayCount * 2);

        var vboData = new Float32Array(this.rayCount * 2 * 3);
        for (var i = 0; i < this.rayCount; ++i) {
            var u = ((i % this.raySize) + 0.5) / this.raySize;
            var v = (Math.floor(i / this.raySize) + 0.5) / this.raySize;
            vboData[i * 6 + 0] = vboData[i * 6 + 3] = u;
            vboData[i * 6 + 1] = vboData[i * 6 + 4] = v;
            vboData[i * 6 + 2] = 0.0;
            vboData[i * 6 + 5] = 1.0;
        }
        this.rayVbo.copy(vboData);

        this.rayVbo2 = new tgl.VertexBuffer();
        this.rayVbo2.addAttribute("TexCoord", 2, gl.FLOAT, false);
        this.rayVbo2.init(this.rayCount);

        var vboData2 = new Float32Array(this.rayCount * 2);
        for (var i = 0; i < this.rayCount; ++i) {
            var u = ((i % this.raySize) + 0.5) / this.raySize;
            var v = (Math.floor(i / this.raySize) + 0.5) / this.raySize;
            vboData2[i * 2 + 0] = u;
            vboData2[i * 2 + 1] = v;
        }
        this.rayVbo2.copy(vboData2);

        this.fbo = new tgl.RenderTarget();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.blendFunc(gl.ONE, gl.ONE);
    }

    Renderer.prototype.setCameraModel = function (id) {
        if (id == 0) {
            // Confocal camera
            this.bpProgram = new tgl.Shader(Shaders, "bp-vert", "bp-frag");
            this.bpConfProgram = new tgl.Shader(Shaders, "bp-vert", "bp-conf-frag");
        } else {
            // Transient camera
            this.bpProgram = new tgl.Shader(Shaders, "bp-vert", "bp-transient-camera-frag");
            this.bpConfProgram = new tgl.Shader(Shaders, "bp-vert", "bp-conf-transient-camera-frag");
        }
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.replaceNumSpads = function (shaderName) {
        var pattern = new RegExp('{numSpads}');
        var shaderSource = Shaders[shaderName];
        return shaderSource.replace(pattern, this.numSpads);
    }

    Renderer.prototype.replaceNumIntervals = function (shaderName) {
        this.timeVector = new Float32Array(linspace(0.0, this.numIntervals * this.deltaT, this.numIntervals));
        this.timeVectorTex = new tgl.Texture(this.numIntervals, 1, 1, true, false, true, this.timeVector);
        var pattern = new RegExp('{numIntervals}', 'g');
        var shaderSource = Shaders[shaderName];
        return shaderSource.replace(pattern, this.numIntervals);
    }

    Renderer.prototype.changeSpadResolution = function (numSpads) {
        if (this.spadHeights === undefined || this.spadHeights.length != numSpads) {
            this.numSpads = numSpads;
            this.setSpadPositions();
            this.createNLOSBuffers(ModifiedAttributes.NumSpads);
            this.resetActiveBlock();
            this.reset();
        }
    }

    Renderer.prototype.setSpadBoundaries = function (low, high) {
        if (this.spadBoundaries === undefined || this.spadBoundaries[0] != low || this.spadBoundaries != high) {
            this.spadBoundaries = [low, high];
            this.sbVbo = this.createSBVbo();
            this.setSpadPositions(true);
            this.resetActiveBlock();
            this.reset();
        }
    }

    Renderer.prototype.setSpadPos = function (spadPos) {
        this.spadPos = spadPos;
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setDeltaT = function (deltaT) {
        this.deltaT = deltaT;
        this.numIntervals = parseInt(this.maxTime / this.deltaT + 0.05);
        if (this.numIntervals > this.maxTextureSize) {
            this.numIntervals = this.maxTextureSize;
        }
        this.maxTime = this.deltaT * this.numIntervals;
        var pfConvFrag = this.replaceNumIntervals("pf-conv-frag");
        Shaders["replacedPf"] = pfConvFrag;
        this.pfProgram = new tgl.Shader(Shaders, "bp-vert", "replacedPf");
        this.createNLOSBuffers(ModifiedAttributes.NumIntervals);
        this.computePFFilter();
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setMaxTime = function (maxTime) {
        this.numIntervals = parseInt(maxTime / this.deltaT + 0.05);
        if (this.numIntervals > this.maxTextureSize) {
            this.numIntervals = this.maxTextureSize;
        }
        this.maxTime = this.deltaT * this.numIntervals;
        var pfConvFrag = this.replaceNumIntervals("pf-conv-frag");
        Shaders["replacedPf"] = pfConvFrag;
        this.pfProgram = new tgl.Shader(Shaders, "bp-vert", "replacedPf");
        this.createNLOSBuffers(ModifiedAttributes.NumIntervals);
        this.computePFFilter();
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setConfocal = function (isConf) {
        // Will have to change if we add more capture methods
        if (this.isConf != isConf) {
            this.isConf = isConf;
            if (!isConf) {
                this.laserGrid = [1.2, (this.spadBoundaries[0] + this.spadBoundaries[1]) / 2];
                this.setEmitterPos(this.emitterPos, scene2canvas(this.laserGrid, this.aspect, this.width, this.height), false);
            } else {
                this.laserGrid = [this.spadPoints[2 * this.confCounter], this.spadPoints[2 * this.confCounter + 1]];
                this.setEmitterPos(this.emitterPos, scene2canvas(this.laserGrid, this.aspect, this.width, this.height), false);
            }
            this.createNLOSBuffers(ModifiedAttributes.Confocality);
        }
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setUsePhase = function (usePhase) {
        this.usePhase = usePhase;
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.setInstant = function (instant) {
        this.instant = instant;
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.addInstantSlider = function (slider) {
        this.instantSlider = slider;
    }

    Renderer.prototype.updateSlider = function () {
        if (this.instantSlider != undefined && this.instantSlider != null) {
            this.instantSlider.setValue(this.instant, false);
            this.instantSlider.updateLabel();
        }
    }

    Renderer.prototype.setSpadPositions = function (changedBounds = false) {
        var changePos = (this.spadHeights === undefined || this.spadHeights.length != this.numSpads || changedBounds);

        if (changePos && this.spadBoundaries != undefined && this.numSpads != undefined) {
            this.spadHeights = intermediatePositions(this.spadBoundaries[1], this.spadBoundaries[0], this.numSpads);
            this.spadPoints = [];

            this.spads = [];
            for (var i = 0; i < this.spadHeights.length; i++) {
                var h = this.spadHeights[i];
                this.spads.push(new SpadData([1.2, h], this.spadRadius, this.deltaT, this.maxTime));
                this.spadPoints.push(1.2);
                this.spadPoints.push(h);
            }

            var spadGridData = new Float32Array(this.numSpads * 4);
            for (var i = 0; i < this.numSpads; i++) {
                spadGridData[i * 4] = this.spadPoints[i * 2];
                spadGridData[i * 4 + 1] = this.spadPoints[i * 2 + 1];
                spadGridData[i * 4 + 2] = 0.0;
                spadGridData[i * 4 + 3] = 0.0;
            }
            this.spadGridTex = new tgl.Texture(this.numSpads, 1, 4, true, false, true, spadGridData);
            this.spadNormalsData = spadGridData;
            for (var i = 0; i < this.numSpads; i++) {
                this.spadNormalsData[i * 4] = -1.0;
                this.spadNormalsData[i * 4 + 1] = 0.0;
            }
            this.spadNormalsTex = new tgl.Texture(this.numSpads, 1, 4, true, false, true, this.spadNormalsData);

            var bpSumFrag = this.replaceNumSpads("bp-sum-frag");
            Shaders["replacedSum"] = bpSumFrag;
            this.bpSumProgram = new tgl.Shader(Shaders, "bp-vert", "replacedSum");
            var hVert = this.replaceNumSpads("h-vert");
            Shaders["replacedH"] = hVert;
            this.hProgram = new tgl.Shader(Shaders, "replacedH", "h-frag");
        }
    }

    Renderer.prototype.setWavelength = function (wl) {
        this.wl = wl;
        this.computePFFilter();
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.resetActiveBlock = function () {
        this.activeBlock = 4;
    }

    Renderer.prototype.computeEmissionSpectrum = function () {
        if (!this.emissionSpectrum)
            this.emissionSpectrum = new Float32Array(tcore.Renderer.SPECTRUM_SAMPLES);

        switch (this.emissionSpectrumType) {
            case tcore.Renderer.SPECTRUM_WHITE:
                for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i)
                    this.emissionSpectrum[i] = 1.0;
                break;
            case tcore.Renderer.SPECTRUM_INCANDESCENT:
                var h = 6.626070040e-34;
                var c = 299792458.0;
                var kB = 1.3806488e-23;
                var T = this.emitterTemperature;

                for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i) {
                    var l = (LAMBDA_MIN + (LAMBDA_MAX - LAMBDA_MIN) * (i + 0.5) / tcore.Renderer.SPECTRUM_SAMPLES) * 1e-9;
                    var power = 1e-12 * (2.0 * h * c * c) / (l * l * l * l * l * (Math.exp(h * c / (l * kB * T)) - 1.0));

                    this.emissionSpectrum[i] = power;
                }
                break;
            case tcore.Renderer.SPECTRUM_GAS_DISCHARGE:
                var wavelengths = GasDischargeLines[this.emitterGas].wavelengths;
                var strengths = GasDischargeLines[this.emitterGas].strengths;

                for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i)
                    this.emissionSpectrum[i] = 0.0;

                for (var i = 0; i < wavelengths.length; ++i) {
                    var idx = Math.floor((wavelengths[i] - LAMBDA_MIN) / (LAMBDA_MAX - LAMBDA_MIN) * tcore.Renderer.SPECTRUM_SAMPLES);
                    if (idx < 0 || idx >= tcore.Renderer.SPECTRUM_SAMPLES)
                        continue;

                    this.emissionSpectrum[idx] += strengths[i];
                }
        }

        this.computeSpectrumIcdf();

        this.emission.bind(0);
        this.emission.copy(this.emissionSpectrum);
        this.reset();
    }

    Renderer.prototype.computeSpectrumIcdf = function () {
        if (!this.cdf) {
            this.cdf = new Float32Array(tcore.Renderer.SPECTRUM_SAMPLES + 1);
            this.pdf = new Float32Array(tcore.Renderer.SPECTRUM_SAMPLES);
            this.icdf = new Float32Array(tcore.Renderer.ICDF_SAMPLES);
        }

        var sum = 0.0;
        for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i)
            sum += this.emissionSpectrum[i];

        /* Mix in 10% of a uniform sample distribution to stay on the safe side.
           Especially gas emission spectra with lots of emission lines
           tend to have small peaks that fall through the cracks otherwise */
        var safetyPadding = 0.1;
        var normalization = tcore.Renderer.SPECTRUM_SAMPLES / sum;

        /* Precompute cdf and pdf (unnormalized for now) */
        this.cdf[0] = 0.0;
        for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i) {
            this.emissionSpectrum[i] *= normalization;

            /* Also take into account the observer response when distributing samples.
               Otherwise tends to prioritize peaks just barely outside the visible spectrum */
            var observerResponse = (1.0 / 3.0) * (
                Math.abs(this.spectrumTable[i * 4]) +
                Math.abs(this.spectrumTable[i * 4 + 1]) +
                Math.abs(this.spectrumTable[i * 4 + 2]));

            this.pdf[i] = observerResponse * (this.emissionSpectrum[i] + safetyPadding) / (1.0 + safetyPadding);
            this.cdf[i + 1] = this.pdf[i] + this.cdf[i];
        }

        /* All done! Time to normalize */
        var cdfSum = this.cdf[tcore.Renderer.SPECTRUM_SAMPLES];
        for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i) {
            this.pdf[i] *= tcore.Renderer.SPECTRUM_SAMPLES / cdfSum;
            this.cdf[i + 1] /= cdfSum;
        }
        /* Make sure we don't fall into any floating point pits */
        this.cdf[tcore.Renderer.SPECTRUM_SAMPLES] = 1.0;

        /* Precompute an inverted mapping of the cdf. This is biased!
           Unfortunately we can't really afford to do runtime bisection
           on the GPU, so this will have to do. For our purposes a small
           amount of bias is tolerable anyway. */
        var cdfIdx = 0;
        for (var i = 0; i < tcore.Renderer.ICDF_SAMPLES; ++i) {
            var target = Math.min((i + 1) / tcore.Renderer.ICDF_SAMPLES, 1.0);
            while (this.cdf[cdfIdx] < target)
                cdfIdx++;
            this.icdf[i] = (cdfIdx - 1.0) / tcore.Renderer.SPECTRUM_SAMPLES;
        }

        this.emissionIcdf.bind(0);
        this.emissionIcdf.copy(this.icdf);
        this.emissionPdf.bind(0);
        this.emissionPdf.copy(this.pdf);
    }

    Renderer.prototype.setMaxPathLength = function (length) {
        this.maxPathLength = length;
        this.reset();
    }

    Renderer.prototype.setMaxSampleCount = function (count) {
        this.maxSampleCount = count;
    }

    Renderer.prototype.changeResolution = function (width, height) {
        if (this.width && this.height) {
            this.emitterPos[0] = (this.emitterPos[0] + 0.5) * width / this.width - 0.5;
            this.emitterPos[1] = (this.emitterPos[1] + 0.5) * height / this.height - 0.5;
        }

        this.width = width;
        this.height = height;
        this.aspect = this.width / this.height;

        this.screenBuffer = new tgl.Texture(this.width, this.height, 4, true, false, true, null);
        this.waveBuffer = new tgl.Texture(this.width, this.height, 4, true, false, true, null);

        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.changeReconstructionResolution = function (height) {
        if (this.numPixels === undefined || this.numPixels[1] != height) {
            this.numPixels = [parseInt(height * this.aspect), height];
            this.createNLOSBuffers(ModifiedAttributes.NumPixels);
            if (this.finished())
                this.redraw();
        }
    }

    Renderer.prototype.changeScene = function (idx) {
        this.resetActiveBlock();
        this.currentScene = idx;
        this.reset();
    }

    Renderer.prototype.computeBackprojection = function (inputTex, outputBuffer) {
        var gl = this.gl;
        var w = this.numPixels[0] * this.numPixels[1];
        var h = this.numSpads;
        var twoRows = (w > this.maxTextureSize);
        if (twoRows) {
            w /= 2;
            h *= 2;
        }
        this.quadVbo.bind();
        gl.disable(gl.BLEND);
        // Clear previous result
        gl.viewport(0, 0, w, h);
        this.fbo.attachTexture(this.intermediateBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Backprojection divided by spad points
        if (this.isConf) {
            // Confocal data
            this.bpConfProgram.bind();
            inputTex.bind(0);
            this.spadGridTex.bind(1);
            this.planeGridTex.bind(2);
            this.bpConfProgram.uniformF("tmax", this.maxTime);
            this.bpConfProgram.uniformF("instant", this.instant / this.numIntervals);
            this.bpConfProgram.uniformF("numSpads", this.numSpads);
            this.bpConfProgram.uniformTexture("fluence", inputTex);
            this.bpConfProgram.uniform2F("laserPos", this.laserPos[0], this.laserPos[1]);
            this.bpConfProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
            this.bpConfProgram.uniformTexture("wallGrid", this.spadGridTex);
            this.bpConfProgram.uniformTexture("planeGrid", this.planeGridTex);
            this.quadVbo.draw(this.bpConfProgram, gl.TRIANGLE_FAN);
        } else {
            // Non-confocal data
            this.bpProgram.bind();
            inputTex.bind(0);
            this.spadGridTex.bind(1);
            this.planeGridTex.bind(2);
            this.bpProgram.uniformF("tmax", this.maxTime);
            this.bpProgram.uniformF("instant", this.instant / this.numIntervals);
            this.bpProgram.uniformF("numSpads", this.numSpads);
            this.bpProgram.uniformTexture("fluence", inputTex);
            this.bpProgram.uniform2F("laserPos", this.laserPos[0], this.laserPos[1]);
            this.bpProgram.uniform2F("laserGrid", this.laserGrid[0], this.laserGrid[1]);
            this.bpProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
            this.bpProgram.uniformTexture("spadGrid", this.spadGridTex);
            this.bpProgram.uniformTexture("planeGrid", this.planeGridTex);
            this.quadVbo.draw(this.bpProgram, gl.TRIANGLE_FAN);
        }

        if (DEBUG) {
            var ibuff = this.intermediateBuffer.getArray(this.numPixels[0] * this.numPixels[1] * this.numSpads);
            this.ibuff = [];
            for (let i = 0; i < ibuff.length; i += 4) {
                this.ibuff.push(ibuff[i]);
            }
            this.fbo.bind();
        }

        // Clear previous result
        gl.viewport(0, 0, this.numPixels[0], this.numPixels[1]);
        this.fbo.attachTexture(outputBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Sum all spad points' results
        this.bpSumProgram.bind();
        this.intermediateBuffer.bind(0);
        this.bpSumProgram.uniformI("twoRows", twoRows);
        this.bpSumProgram.uniform2F("numPixels", this.numPixels[0], this.numPixels[1]);
        this.bpSumProgram.uniformTexture("fluence", this.intermediateBuffer);
        this.quadVbo.draw(this.bpSumProgram, gl.TRIANGLE_FAN);
    }

    Renderer.prototype.findMax = function (inputTex, isComplex = false) {
        // Find maximum value, dividing the area by 4 in each pass
        var width = inputTex.width;
        var height = inputTex.height;
        var maxBuffers = [inputTex];
        // this.quadVbo.bind();

        var gl = this.gl;
        this.fbo.bind();
        var current = 0;
        var useSameChannel = true;
        while (width > 1) {
            var numPixels = [width, height];
            width = parseInt(width / 2);
            height = (height > 1) ? parseInt(height / 2) : height;
            var next = 1 - current;
            maxBuffers[next] = new tgl.Texture(width, height, 4, true, false, true, null);

            gl.viewport(0, 0, width, height);
            this.fbo.attachTexture(maxBuffers[next], 0);
            gl.clear(gl.COLOR_BUFFER_BIT);

            this.maxProgram.bind();
            maxBuffers[current].bind(0);
            this.maxProgram.uniform2F("numPixels", numPixels[0], numPixels[1]);
            this.maxProgram.uniformI("useSameChannel", useSameChannel);
            this.maxProgram.uniformI("isComplex", useSameChannel && isComplex); // Only complex in the first pass, after that it's just modules
            this.maxProgram.uniformTexture("tex", maxBuffers[current]);
            this.quadVbo.draw(this.maxProgram, gl.TRIANGLE_FAN);

            current = next;
            useSameChannel = false;
        }

        return maxBuffers[current];
    }

    /*Renderer.prototype.getCaptureSum = function () {
        // Find total sum, dividing the area by 4 in each pass or by 2 once height is 1
        var height = this.numSpads;
        var width = this.numIntervals;
        var sumBuffers = [this.capturedBuffer];

        var gl = this.gl;

        this.fbo.bind();
        this.quadVbo.bind();
        var current = 0;
        // Assuming width (temporal dimension) will always be greater (or equal) than height (spatial, spad dimension)
        while (width > 1) {
            var oneRow = (height == 1);
            width = width / 2;
            height = (height > 1) ? height / 2 : height;
            var next = 1 - current;
            sumBuffers[next] = new tgl.Texture(width, height, 4, true, false, true, null);

            gl.viewport(0, 0, width, height);
            this.fbo.attachTexture(sumBuffers[next], 0);
            gl.clear(gl.COLOR_BUFFER_BIT);

            this.sumProgram.bind();
            sumBuffers[current].bind(0);
            this.sumProgram.uniformI("oneRow", oneRow);
            this.sumProgram.uniform2F("numPixels", width, height);
            this.sumProgram.uniformTexture("tex", sumBuffers[current]);
            this.quadVbo.draw(this.sumProgram, gl.TRIANGLE_FAN);

            current = next;
        }
        this.fbo.unbind();

        return sumBuffers[current];
    }
    */

    Renderer.prototype.filterLap = function () {
        var gl = this.gl;

        this.fbo.attachTexture(this.filteredBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Filter the reconstruction with Laplacian
        this.lapProgram.bind();
        this.unfilteredBuffer.bind(0);
        this.lapProgram.uniformF("Aspect", this.aspect);
        this.lapProgram.uniform2F("numPixels", this.numPixels[0], this.numPixels[1]);
        this.lapProgram.uniformFV("kernel", this.lapKernel);
        this.lapProgram.uniformTexture("fluence", this.unfilteredBuffer);
        this.quadVbo.draw(this.lapProgram, gl.TRIANGLE_FAN);
    }

    Renderer.prototype.filterGauss = function () {
        var gl = this.gl;

        this.fbo.attachTexture(this.halfFiltered, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Filter the reconstruction with Gaussian
        // First columns
        this.gaussProgram.bind();
        this.unfilteredBuffer.bind(0);
        this.gaussProgram.uniformI("u_direction", 1);
        this.gaussProgram.uniform2F("u_textureSize", this.numPixels[0], this.numPixels[1]);
        this.gaussProgram.uniformFV("u_kernel", this.gaussKernel);
        this.gaussProgram.uniformTexture("u_image", this.unfilteredBuffer);
        this.quadVbo.draw(this.gaussProgram, gl.TRIANGLE_FAN);
        // Then rows
        this.fbo.attachTexture(this.filteredBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        this.halfFiltered.bind(0);
        this.gaussProgram.uniformI("u_direction", 0);
        this.gaussProgram.uniformTexture("u_image", this.halfFiltered);
        this.quadVbo.draw(this.gaussProgram, gl.TRIANGLE_FAN);
    }

    Renderer.prototype.filterLoG = function () {
        var gl = this.gl;

        this.fbo.attachTexture(this.filteredBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Filter the reconstruction with LoG (Laplacian of Gaussian)
        this.logProgram.bind();
        this.unfilteredBuffer.bind(0);
        this.logKernelTex.bind(1);
        this.logProgram.uniform2F("u_textureSize", this.numPixels[0], this.numPixels[1]);
        this.logProgram.uniformTexture("u_kernel", this.logKernelTex);
        this.logProgram.uniformTexture("u_image", this.unfilteredBuffer);
        this.quadVbo.draw(this.logProgram, gl.TRIANGLE_FAN);
    }

    Renderer.prototype.computePFFilter = function () {
        var gl = this.gl;

        this.fbo.bind();
        this.fbo.drawBuffers(1);

        gl.viewport(0, 0, this.numIntervals, 1);
        this.fbo.attachTexture(this.filterBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Create the phasor fields filter
        this.pfKernelProgram.bind();
        this.timeVectorTex.bind(0);
        this.pfKernelProgram.uniformI("numIntervals", this.numIntervals);
        this.pfKernelProgram.uniformF("deltaT", this.deltaT);
        this.pfKernelProgram.uniformF("wl", this.wl);
        this.pfKernelProgram.uniformTexture("timeTex", this.timeVectorTex);
        this.quadVbo.bind();
        this.quadVbo.draw(this.pfKernelProgram, gl.TRIANGLE_FAN);

        this.pfFilterValues = this.filterBuffer.getArray(this.numIntervals);
        this.fbo.unbind();
    }

    Renderer.prototype.filterPF = function () {
        var gl = this.gl;

        gl.viewport(0, 0, this.numIntervals, this.numSpads);
        this.fbo.attachTexture(this.interFiltBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Convolute the filter with the captured signal
        this.pfProgram.bind();
        this.capturedBuffer.bind(0);
        this.filterBuffer.bind(1);
        this.pfProgram.uniformTexture("u_image", this.capturedBuffer);
        this.pfProgram.uniformTexture("u_kernel", this.filterBuffer);
        this.quadVbo.draw(this.pfProgram, gl.TRIANGLE_FAN);
    }

    const ModifiedAttributes = {
        All: 0,
        NumPixels: 1,
        NumSpads: 2,
        BboxCorners: 3,
        NumIntervals: 4,
        Confocality: 5,
        FilterType: 6,
    }

    Renderer.prototype.createNLOSBuffers = function (modifiedAttr) {
        // Common buffers for NLOS reconstruction
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumPixels || modifiedAttr == ModifiedAttributes.NumSpads)
            if (this.numPixels != undefined && this.numSpads != undefined) {
                var w = this.numPixels[0] * this.numPixels[1];
                var h = 1;
                if (w > this.maxTextureSize) {
                    w /= 2;
                    h = 2;
                }
                this.intermediateBuffer = new tgl.Texture(w, h * this.numSpads, 4, true, false, true, null);
            } else
                this.intermediateBuffer = null;
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumPixels || modifiedAttr == ModifiedAttributes.FilterType) {
            if (this.numPixels != undefined) {
                this.unfilteredBuffer = new tgl.Texture(this.numPixels[0], this.numPixels[1], 4, true, false, true, null);
                if (this.filterType === 'none')
                    this.filteredBuffer = this.unfilteredBuffer;
                else
                    this.filteredBuffer = new tgl.Texture(this.numPixels[0], this.numPixels[1], 4, true, false, true, null);
            }
        }
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumIntervals || modifiedAttr == ModifiedAttributes.NumSpads)
            if (this.numIntervals != undefined && this.numSpads != undefined) {
                this.capturedBuffer = new tgl.Texture(this.numIntervals, this.numSpads, 4, true, false, true, null);
                if (DEBUG) {
                    this.h = new Float32Array(this.numIntervals * this.numSpads);
                    this.hFilt = new Float32Array(2 * this.h.length);
                }
            }
        // Gauss buffer
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumPixels)
            if (this.numPixels != undefined)
                this.halfFiltered = new tgl.Texture(this.numPixels[0], this.numPixels[1], 4, true, false, true, null);
        // PF buffers
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumIntervals || modifiedAttr == ModifiedAttributes.NumSpads)
            if (this.numIntervals != undefined && this.numSpads != undefined) {
                this.interFiltBuffer = new tgl.Texture(this.numIntervals, this.numSpads, 4, true, false, true, null);
            }
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumIntervals)
            if (this.numIntervals != undefined)
                this.filterBuffer = new tgl.Texture(this.numIntervals, 1, 4, true, false, true, null);

        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumPixels || modifiedAttr == ModifiedAttributes.BboxCorners) {
            if (this.numPixels != undefined && this.bboxCorners != undefined) {
                var xValues = linspace(this.bboxCorners[0], this.bboxCorners[2], this.numPixels[0]);
                var yValues = linspace(this.bboxCorners[1], this.bboxCorners[3], this.numPixels[1]);
                xv = xValues;
                yv = yValues;
                var planeGridData = new Float32Array(this.numPixels[0] * this.numPixels[1] * 4);
                var k = 0;
                for (var i = 0; i < this.numPixels[1]; i++) {
                    for (var j = 0; j < this.numPixels[0]; j++) {
                        planeGridData[k] = xValues[j];
                        planeGridData[k + 1] = yValues[i];
                        planeGridData[k + 2] = 0.0;
                        planeGridData[k + 3] = 0.0;
                        k += 4;
                    }
                }
                var w = this.numPixels[0] * this.numPixels[1];
                var h = 1;
                if (w > this.maxTextureSize) {
                    w /= 2;
                    h = 2;
                }
                this.planeGridTex = new tgl.Texture(w, h, 4, true, false, true, planeGridData);
            }
        }
    }

    Renderer.prototype.reset = function () {
        if (!this.needsReset)
            return;
        this.needsReset = false;
        this.wavesTraced = 0;
        this.raysTraced = 0;
        this.samplesTraced = 0;
        this.pathLength = 0;
        this.elapsedTimes = [];
        this.videoElapsedTimes = [];
        this.instant = 0;
        this.msPerFrame = 1000 / 200;
        this.currentCall = 0;
        this.nlosElapsedTimes = [];
        this.setSpadPos([0, -0.6]);
        this.confCounter = 0;
        if (this.isConf) {
            this.laserGrid = [this.spadPoints[0], this.spadPoints[1]];
            this.setEmitterPos(this.emitterPos, scene2canvas(this.laserGrid, this.aspect, this.width, this.height), false);
        }
        if (this.h != undefined) {
            for (var i = 0; i < this.h.length; i++) {
                this.h[i] = 0;
                this.hFilt[2 * i] = 0;
                this.hFilt[2 * i + 1] = 0;
            }
        }

        if (this.fbo != undefined) {
            this.fbo.bind();
            this.fbo.drawBuffers(1);
            // Scene buffers
            if (this.screenBuffer != undefined) {
                this.fbo.attachTexture(this.screenBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            if (this.capturedBuffer != undefined) {
                this.fbo.attachTexture(this.capturedBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            // Reconstruction buffers
            if (this.intermediateBuffer != undefined && this.intermediateBuffer != null) {
                this.fbo.attachTexture(this.intermediateBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            if (this.unfilteredBuffer != undefined) {
                this.fbo.attachTexture(this.unfilteredBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            if (this.interFiltBuffer != undefined) {
                this.fbo.attachTexture(this.interFiltBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            if (this.filteredBuffer != undefined) {
                this.fbo.attachTexture(this.filteredBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            this.fbo.unbind();
        }
        this.updateSlider();
    }

    Renderer.prototype.setSpreadType = function (type) {
        this.resetActiveBlock();
        this.spreadType = type;
        this.computeSpread();
        this.reset();
    }

    Renderer.prototype.setNormalizedEmitterPos = function (posA, posB) {
        this.setEmitterPos(
            [posA[0] * this.width, posA[1] * this.height],
            [posB[0] * this.width, posB[1] * this.height]
        );
    }

    // Compute intersection point between a ray (origin, dir) and a segment from a to b
    function intersect(origin, dir, a, b) {
        var ba = (b[0] - a[0]) / (b[1] - a[1]);
        var t = (ba * (origin[1] - a[1]) - origin[0] + a[0]) / (dir[0] - ba * dir[1]);
        if (t >= 0) { // Intersects line
            var t2 = (origin[1] + t * dir[1] - a[1]) / (b[1] - a[1]);
            if (t2 >= 0 && t2 <= 1) { // Intersection inside the segment
                return [origin[0] + t * dir[0], origin[1] + t * dir[1]];
            }
        }
        return [];
    }

    Array.prototype.norm = function () {
        return Math.sqrt(this[0] * this[0] + this[1] * this[1])
    }

    Renderer.prototype.setEmitterPos = function (posA, posB, reset = true) {
        this.emitterPos = this.spreadType == tcore.Renderer.SPREAD_POINT ? posB : posA;
        this.emitterAngle = this.spreadType == tcore.Renderer.SPREAD_POINT ? 0.0 : Math.atan2(posB[1] - posA[1], posB[0] - posA[0]);
        this.computeSpread();

        this.laserPos = [((this.emitterPos[0] / this.width) * 2.0 - 1.0) * this.aspect, 1.0 - (this.emitterPos[1] / this.height) * 2.0];
        var laserFocus = [((posB[0] / this.width) * 2.0 - 1.0) * this.aspect, 1.0 - (posB[1] / this.height) * 2.0];
        var dir = [laserFocus[0] - this.laserPos[0], laserFocus[1] - this.laserPos[1]];
        var mod = dir.norm();
        if (mod == 0) {
            dir = [1, 0];
            mod = 1;
        }
        dir = [dir[0] / mod, dir[1] / mod];
        this.laserGrid = intersect(this.laserPos, dir, [1.2, 1.0], [1.2, -1.0]);

        if (this.laserGrid.length == 0) {
            console.log("The light is not reaching the relay wall");
            this.laserGrid = [1.78, 0];
        }

        if (reset)
            this.reset();
    }

    Renderer.prototype.setFilterType = function (type) {
        var prev = this.filterType;
        this.filterType = type;
        if (prev === 'none' || type === 'none') {
            this.createNLOSBuffers(ModifiedAttributes.FilterType);
        }
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.setToneMapper = function (type) {
        if (type === 'none') {
            this.showProgram = new tgl.Shader(Shaders, "show-vert", "show-frag");
        } else {
            var pattern = new RegExp('{func}', 'g');
            var shaderSource = Shaders["show-func-frag"];
            Shaders["show-replaced-frag"] = shaderSource.replace(pattern, type);
            this.showProgram = new tgl.Shader(Shaders, "show-vert", "show-replaced-frag");
        }
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.computeSpread = function () {
        switch (this.spreadType) {
            case tcore.Renderer.SPREAD_POINT:
                this.emitterPower = 0.1;
                this.spatialSpread = 0.0;
                this.angularSpread = [0.0, Math.PI * 2.0];
                break;
            case tcore.Renderer.SPREAD_CONE:
                this.emitterPower = 0.03;
                this.spatialSpread = 0.0;
                this.angularSpread = [this.emitterAngle, Math.PI * 0.3];
                break;
            case tcore.Renderer.SPREAD_BEAM:
                this.emitterPower = 0.03;
                this.spatialSpread = 0.4;
                this.angularSpread = [this.emitterAngle, 0.0];
                break;
            case tcore.Renderer.SPREAD_LASER:
                this.emitterPower = 0.05;
                this.spatialSpread = 0.0;
                this.angularSpread = [this.emitterAngle, 0.0];
                break;
            case tcore.Renderer.SPREAD_AREA:
                this.emitterPower = 0.1;
                this.spatialSpread = 0.4;
                this.angularSpread = [this.emitterAngle, Math.PI];
                break;
        }
    }

    Renderer.prototype.createQuadVbo = function () {
        var vbo = new tgl.VertexBuffer();
        vbo.addAttribute("Position", 3, this.gl.FLOAT, false);
        vbo.addAttribute("TexCoord", 2, this.gl.FLOAT, false);
        vbo.init(4);
        vbo.copy(new Float32Array([
            1.0, 1.0, 0.0, 1.0, 1.0,
            -1.0, 1.0, 0.0, 0.0, 1.0,
            -1.0, -1.0, 0.0, 0.0, 0.0,
            1.0, -1.0, 0.0, 1.0, 0.0
        ]));

        return vbo;
    }

    Renderer.prototype.createQuadVbo2 = function () {
        var vbo = new tgl.VertexBuffer();
        vbo.addAttribute("Position", 2, this.gl.FLOAT, false);
        vbo.init(4);
        vbo.copy(new Float32Array([
            -1.0, 1.0,
            1.0, 1.0,
            1.0, -1.0,
            -1.0, -1.0,
        ]));

        return vbo;
    }

    Renderer.prototype.createQuadVbo3 = function () {
        var vbo = new tgl.VertexBuffer();
        vbo.addAttribute("Position", 2, this.gl.FLOAT, false);
        vbo.addAttribute("TexCoord", 2, this.gl.FLOAT, false);
        vbo.init(4);
        // console.log([
        //     -this.aspect, -0.389,
        //     -this.aspect + 500 / 720, -0.389,
        //     -this.aspect + 500 / 720, -1.0,
        //     -this.aspect, -1.0]);
        vbo.copy(new Float32Array([
            0.0, -1.0,
            1.0, 0.0, 
            1.0, -1.0, 
            0.0, 0.0, 
            // -this.aspect, -0.389,
            // -this.aspect + 500 / 720, -0.389,
            // -this.aspect + 500 / 720, -1.0,
            // -this.aspect, -1.0,
            1.0, 0.0,
            1.0, 1.0,
            0.0, 0.0,
            0.0, 1.0,
        ]));

        return vbo;
    }

    Renderer.prototype.createSBVbo = function () {
        var vbo = new tgl.VertexBuffer();
        vbo.addAttribute("Position", 2, this.gl.FLOAT, false);
        vbo.init(2);
        vbo.copy(new Float32Array([
            1.2 / this.aspect, this.spadBoundaries[0],
            1.2 / this.aspect, this.spadBoundaries[1]
        ]));
        return vbo;
    }

    Renderer.prototype.totalRaysTraced = function () {
        return this.raysTraced;
    }

    Renderer.prototype.maxRayCount = function () {
        return this.maxPathLength * this.maxSampleCount;
    }

    Renderer.prototype.totalSamplesTraced = function () {
        return this.samplesTraced;
    }

    Renderer.prototype.progress = function () {
        return Math.min(this.totalRaysTraced() / this.maxRayCount(), 1.0);
    }

    Renderer.prototype.finished = function () {
        if (!this.isConf)
            return this.totalSamplesTraced() >= this.maxSampleCount;
        else {
            if (this.confCounter >= this.numSpads)
                return true;
            if (this.totalSamplesTraced() >= this.maxSampleCount) {
                this.confCounter++;
                if (this.confCounter >= this.numSpads)
                    return true;
                this.laserGrid = [this.spadPoints[2 * this.confCounter], this.spadPoints[2 * this.confCounter + 1]];
                this.setEmitterPos(this.emitterPos, scene2canvas(this.laserGrid, this.aspect, this.width, this.height), false);
                this.partialReset();
            }
            return false;
        }
    }

    Renderer.prototype.videoFinished = function () {
        if (this.playing) {
            return this.instant >= this.numIntervals - 1;
        } else {
            return true;
        }
    }

    Renderer.prototype.partialReset = function () {
        this.wavesTraced = 0;
        this.raysTraced = 0;
        this.samplesTraced = 0;
        this.pathLength = 0;
        this.elapsedTimes = [];
        this.videoElapsedTimes = [];
        this.playing = false;
        this.instant = 0;

        if (this.fbo != undefined) {
            this.fbo.bind();
            this.fbo.drawBuffers(1);
            // Scene buffers
            if (this.screenBuffer != undefined) {
                this.fbo.attachTexture(this.screenBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            this.fbo.unbind();
        }
        this.updateSlider();
    }

    Renderer.prototype.composite = function (count = this.activeBlock) {
        this.screenBuffer.bind(0);
        this.compositeProgram.bind();
        this.compositeProgram.uniformTexture("Frame", this.screenBuffer);
        this.compositeProgram.uniformF("Exposure", this.width / (Math.max(this.samplesTraced, this.raySize * count)));
        this.quadVbo.bind();
        this.quadVbo.draw(this.compositeProgram, this.gl.TRIANGLE_FAN);

        this.gl.enable(this.gl.BLEND);
        this.spadSegmentProgram.bind();
        this.sbVbo.bind();
        this.sbVbo.draw(this.spadSegmentProgram, this.gl.LINES);
        
        /*if (this.rulerLoaded) {
            this.rulerTex.bind(0);
            this.rulerProgram.bind();
            this.rulerProgram.uniformF("Aspect", this.aspect);
            this.rulerProgram.uniformTexture("u_ruler", this.rulerTex);
            this.quadVbo3.bind();
            this.quadVbo3.draw(this.rulerProgram, this.gl.TRIANGLE_FAN);
        }*/
        this.gl.disable(this.gl.BLEND);
    }

    Renderer.prototype.redraw = function () {
        var gl = this.gl;

        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.viewport(0, 0, this.width, this.height);
        gl.scissor(0, 0, this.width, this.height);
        this.composite();

        gl.enable(gl.SCISSOR_TEST);
        gl.scissor(this.width, 0, this.separationWidth, this.height);
        gl.clearColor(1.0, 1.0, 1.0, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.disable(gl.SCISSOR_TEST);
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        this.renderNLOS();
    }

    Renderer.prototype.render = function (timestamp) {
        this.needsReset = true;
        this.elapsedTimes.push(timestamp);
        if (this.nlosElapsedTimes.length == 0) {
            this.nlosElapsedTimes.push(timestamp);
        }

        var current = this.currentState;
        var next = 1 - current;

        this.fbo.bind();

        var gl = this.gl;
        gl.viewport(0, 0, this.raySize, this.raySize);
        gl.scissor(0, 0, this.raySize, this.activeBlock);
        gl.enable(gl.SCISSOR_TEST);
        this.fbo.drawBuffers(4);
        this.rayStates[next].attach(this.fbo);
        this.quadVbo.bind();

        if (this.pathLength == 0) {
            this.initProgram.bind();
            this.rayStates[current].rngTex.bind(0);
            this.spectrum.bind(1);
            this.emission.bind(2);
            this.emissionIcdf.bind(3);
            this.emissionPdf.bind(4);
            this.initProgram.uniformTexture("RngData", this.rayStates[current].rngTex);
            this.initProgram.uniformTexture("Spectrum", this.spectrum);
            this.initProgram.uniformTexture("Emission", this.emission);
            this.initProgram.uniformTexture("ICDF", this.emissionIcdf);
            this.initProgram.uniformTexture("PDF", this.emissionPdf);
            this.initProgram.uniform2F("EmitterPos", ((this.emitterPos[0] / this.width) * 2.0 - 1.0) * this.aspect, 1.0 - (this.emitterPos[1] / this.height) * 2.0);
            this.initProgram.uniform2F("EmitterDir", Math.cos(this.angularSpread[0]), -Math.sin(this.angularSpread[0]));
            this.initProgram.uniformF("EmitterPower", this.emitterPower);
            this.initProgram.uniformF("SpatialSpread", this.spatialSpread);
            this.initProgram.uniform2F("AngularSpread", -this.angularSpread[0], this.angularSpread[1]);
            this.quadVbo.draw(this.initProgram, gl.TRIANGLE_FAN);

            current = 1 - current;
            next = 1 - next;

            this.rayStates[next].attach(this.fbo);
        }

        var traceProgram = this.tracePrograms[this.currentScene];
        traceProgram.bind();
        this.rayStates[current].bind(traceProgram);
        this.quadVbo.draw(traceProgram, gl.TRIANGLE_FAN);

        this.rayStates[next].detach(this.fbo);

        gl.disable(gl.SCISSOR_TEST);
        gl.viewport(0, 0, this.width, this.height);
        gl.scissor(0, 0, this.width, this.height);

        this.fbo.drawBuffers(1);
        this.fbo.attachTexture(this.waveBuffer, 0);

        if (this.pathLength == 0 || this.wavesTraced == 0)
            gl.clear(gl.COLOR_BUFFER_BIT);

        gl.enable(gl.BLEND);

        this.rayProgram.bind();
        this.rayStates[current].posTex.bind(0);
        this.rayStates[next].posTex.bind(1);
        this.rayStates[current].rgbTex.bind(2);
        this.rayStates[current].timeTex.bind(3);
        this.rayStates[next].timeTex.bind(4);
        this.rayProgram.uniformTexture("PosDataA", this.rayStates[current].posTex);
        this.rayProgram.uniformTexture("PosDataB", this.rayStates[next].posTex);
        this.rayProgram.uniformTexture("RgbData", this.rayStates[current].rgbTex);
        this.rayProgram.uniformTexture("TimeDataA", this.rayStates[current].timeTex);
        this.rayProgram.uniformTexture("TimeDataB", this.rayStates[next].timeTex);
        this.rayProgram.uniformF("Aspect", this.aspect);
        this.rayVbo.bind();
        this.rayVbo.draw(this.rayProgram, gl.LINES, this.raySize * this.activeBlock * 2);

        this.raysTraced += this.raySize * this.activeBlock;
        this.pathLength += 1;

        this.computeSpadValues(current, next);

        this.quadVbo.bind();

        if (this.pathLength == this.maxPathLength || this.wavesTraced == 0) {
            this.fbo.attachTexture(this.screenBuffer, 0);

            this.waveBuffer.bind(0);
            this.passProgram.bind();
            this.passProgram.uniformTexture("Frame", this.waveBuffer);
            this.quadVbo.draw(this.passProgram, gl.TRIANGLE_FAN);

            if (this.pathLength == this.maxPathLength) {
                this.samplesTraced += this.raySize * this.activeBlock
                this.wavesTraced += 1;
                this.pathLength = 0;

                if (this.elapsedTimes.length > 5) {
                    var avgTime = 0;
                    for (var i = 1; i < this.elapsedTimes.length; ++i)
                        avgTime += this.elapsedTimes[i] - this.elapsedTimes[i - 1];
                    avgTime /= this.elapsedTimes.length - 1;

                    /* Let's try to stay at reasonable frame times. Targeting 16ms is
                       a bit tricky because there's a lot of variability in how often
                       the browser executes this loop and 16ms might well not be
                       reachable, but 24ms seems to do ok */
                    if (avgTime > 24.0)
                        this.activeBlock = Math.max(4, this.activeBlock - 4);
                    else
                        this.activeBlock = Math.min(512, this.activeBlock + 4);

                    this.elapsedTimes = [this.elapsedTimes[this.elapsedTimes.length - 1]];
                }

                this.elapsedTimes = [];
            }
        }

        gl.disable(gl.BLEND);

        this.fbo.unbind();

        if (this.pathLength == 0) {
            gl.clear(gl.COLOR_BUFFER_BIT);
            gl.viewport(0, 0, this.width, this.height);
            gl.scissor(0, 0, this.width, this.height);
            this.composite();

            gl.enable(gl.SCISSOR_TEST);
            gl.scissor(this.width, 0, this.separationWidth, this.height);
            gl.clearColor(1.0, 1.0, 1.0, 1.0);
            gl.clear(gl.COLOR_BUFFER_BIT);
            gl.disable(gl.SCISSOR_TEST);
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            this.renderNLOS();

            this.nlosElapsedTimes.push(timestamp);
        }

        this.currentState = next;
        this.currentCall++;
    }

    Renderer.prototype.renderNLOS = function () {
        var gl = this.gl;

        this.fbo.bind();
        this.fbo.drawBuffers(1);
        gl.enable(gl.BLEND);
        this.quadVbo.bind();

        if (this.filterType === 'pf') {
            this.filterPF();
            this.computeBackprojection(this.interFiltBuffer, this.filteredBuffer);
        } else {
            this.computeBackprojection(this.capturedBuffer, this.unfilteredBuffer);
            if (this.filterType === 'gauss')
                this.filterGauss();
            else if (this.filterType === 'log')
                this.filterLoG();
            else if (this.filterType === 'lap')
                this.filterLap();
            // else filterType === 'none', and this.filteredBuffer == this.unfilteredBuffer
        }

        var maxValueTex = this.findMax(this.filteredBuffer, this.filterType === 'pf');

        if (DEBUG) {
            var h = this.capturedBuffer.getArray(this.h.length);
            for (let i = 0; i < this.h.length; i++) {
                if (h[4 * i + 3] > 1)
                    this.h[i] = h[4 * i] / (h[4 * i + 3] - 1);
                else
                    this.h[i] = h[4 * i];
            }
            var f = this.filteredBuffer.getArray(this.numPixels[0] * this.numPixels[1]);
            this.f = [];
            for (let i = 0; i < f.length; i += 4) {
                this.f.push(f[i]);
            }
            // getArray unbinds current framebuffer
            this.fbo.bind();
        }
        // Clear captured signal
        // this.fbo.attachTexture(this.capturedBuffer, 0);
        // gl.clear(gl.COLOR_BUFFER_BIT);

        this.fbo.unbind();

        // Render the result
        gl.viewport(this.width + this.separationWidth, 0, this.width, this.height);
        gl.scissor(this.width + this.separationWidth, 0, this.width, this.height);

        this.showProgram.bind();
        this.colormapTex.bind(0);
        this.filteredBuffer.bind(1);
        maxValueTex.bind(2);
        this.showProgram.uniformF("Aspect", this.aspect);
        this.showProgram.uniformI("numSpads", this.numSpads);
        this.showProgram.uniformI("isComplex", this.filterType === 'pf');
        this.showProgram.uniformI("usePhase", this.usePhase && this.filterType === 'pf');
        this.showProgram.uniformTexture("colormap", this.colormapTex);
        this.showProgram.uniformTexture("fluence", this.filteredBuffer);
        this.showProgram.uniformTexture("maxValue", maxValueTex);
        this.quadVbo.bind();
        this.quadVbo.draw(this.showProgram, gl.TRIANGLE_FAN);

        this.spadSegmentProgram.bind();
        this.sbVbo.bind();
        this.sbVbo.draw(this.spadSegmentProgram, this.gl.LINES);
        gl.disable(gl.BLEND);
    }

    Renderer.prototype.play = function (timestamp) {
        if (!this.playing) {
            this.playing = true;
            this.videoElapsedTimes = [];
            if (this.instant >= this.numIntervals - 1) {
                this.instant = -1;
            }
        }

        if (this.videoElapsedTimes.length == 0 || (timestamp - this.videoElapsedTimes[this.videoElapsedTimes.length-1]) > this.msPerFrame) {
            this.videoElapsedTimes.push(timestamp);
            this.instant++;
            this.redraw();
            this.updateSlider();
            if (this.instant >= this.numIntervals - 1)
                this.playing = false;
        }
    }

    Renderer.prototype.pause = function () {
        this.playing = false;
        this.videoElapsedTimes = [];
    }

    Renderer.prototype.computeSpadValues = function (current, next) {
        var gl = this.gl;

        gl.viewport(0, 0, this.numIntervals, this.numSpads);
        this.fbo.attachTexture(this.capturedBuffer, 0);
        if (!this.isConf) {
            this.hProgram.bind();
            this.rayStates[current].posTex.bind(0);
            this.rayStates[next].posTex.bind(1);
            this.rayStates[current].rgbTex.bind(2);
            this.rayStates[current].timeTex.bind(3);
            this.rayStates[next].timeTex.bind(4);
            this.spadGridTex.bind(5);
            this.spadNormalsTex.bind(6);
            this.hProgram.uniformF("tmax", this.maxTime);
            this.hProgram.uniformF("spadRadius", this.spadRadius);
            this.hProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
            this.hProgram.uniformTexture("PosDataA", this.rayStates[current].posTex);
            this.hProgram.uniformTexture("PosDataB", this.rayStates[next].posTex);
            this.hProgram.uniformTexture("RgbData", this.rayStates[current].rgbTex);
            this.hProgram.uniformTexture("TimeDataA", this.rayStates[current].timeTex);
            this.hProgram.uniformTexture("SpadGrid", this.spadGridTex);
            this.hProgram.uniformTexture("SpadNormals", this.spadNormalsTex);
            this.rayVbo2.bind();
            this.rayVbo2.draw(this.hProgram, gl.POINTS, this.raySize * this.activeBlock);
        } else {
            this.hConfProgram.bind();
            this.rayStates[current].posTex.bind(0);
            this.rayStates[next].posTex.bind(1);
            this.rayStates[current].rgbTex.bind(2);
            this.rayStates[current].timeTex.bind(3);
            this.rayStates[next].timeTex.bind(4);
            this.spadNormalsTex.bind(6);
            this.hConfProgram.uniformF("tmax", this.maxTime);
            this.hConfProgram.uniformF("yNorm", (this.confCounter + 0.5) / this.numSpads);
            this.hConfProgram.uniformF("spadRadius", this.spadRadius);
            this.hConfProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
            this.hConfProgram.uniform2F("SpadGrid", this.laserGrid[0], this.laserGrid[1]);
            this.hConfProgram.uniform2F("SpadNormal", this.spadNormalsData[4 * this.confCounter], this.spadNormalsData[4 * this.confCounter + 1]);
            this.hConfProgram.uniformTexture("PosDataA", this.rayStates[current].posTex);
            this.hConfProgram.uniformTexture("PosDataB", this.rayStates[next].posTex);
            this.hConfProgram.uniformTexture("RgbData", this.rayStates[current].rgbTex);
            this.hConfProgram.uniformTexture("TimeDataA", this.rayStates[current].timeTex);
            this.hConfProgram.bind();
            this.rayVbo2.bind();
            this.rayVbo2.draw(this.hConfProgram, gl.POINTS, this.raySize * this.activeBlock);
        }
        // Restore previous viewport
        gl.viewport(0, 0, this.width, this.height);
    }

    exports.Renderer = Renderer;
})(window.transientcore = window.transientcore || {});