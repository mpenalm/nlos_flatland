(function (exports) {
    var LAMBDA_MIN = 360.0;
    var LAMBDA_MAX = 750.0;

    function intermediatePositions(start, end, n) {
        if (n == 1) {
            return [(start + end) / 2.0];
        } else {
            var step = (end - start) / n;
            if (n == 2) {
                return [start + step / 2, end - step / 2];
            } else {
                var result = [start + step / 2];
                var accum = result[0] + step;
                while (result.length < n) {
                    result.push(accum);
                    accum += step;
                }
                return result;
            }
        }
    }

    function linspace(start, end, n) {
        if (n == 1) {
            return [(start + end) / 2.0];
        } else if (n == 2) {
            return [start, end];
        } else {
            var step = (end - start) / (n - 1);
            var result = [start];
            var accum = start + step;
            while (result.length < n) {
                result.push(accum);
                accum += step;
            }
            return result;
        }
    }

    var SpadData = function (pos, radius, deltaT, maxTime) {
        this.pos = pos;
        this.radius = radius;
        this.deltaT = deltaT;
        this.maxTime = maxTime;
    }

    var Renderer = function (gl, width, height, scenes, filterCanvas) {
        this.gl = gl;
        this.filterCanvas = filterCanvas;
        this.glFilter = this.filterCanvas.getContext("webgl") || this.filterCanvas.getContext("experimental-webgl");
        pgl.init(this.glFilter)
        this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
        this.quadVbo = this.createQuadVbo();

        this.maxSampleCount = 100000;
        this.spreadType = tcore.Renderer.SPREAD_LASER;
        this.emissionSpectrumType = tcore.Renderer.SPECTRUM_WHITE;
        this.emitterTemperature = 5000.0;
        this.emitterGas = 0;
        this.currentScene = 0;
        this.needsReset = true;
        this.currentCall = 0;

        // Shader programs to simulate and render the scene
        this.compositeProgram = new tgl.Shader(Shaders, "compose-vert", "compose-frag");
        this.passProgram = new tgl.Shader(Shaders, "compose-vert", "pass-frag");
        this.initProgram = new tgl.Shader(Shaders, "init-vert", "init-frag");
        this.rayProgram = new tgl.Shader(Shaders, "ray-vert", "ray-frag");
        this.hConfProgram = new tgl.Shader(Shaders, "h-conf-vert", "h-frag"); // hProgram added in setSpadPositions
        this.geometryProgram = new tgl.Shader(Shaders, "geometry-vert", "geometry-frag");
        this.rwallProgram = new tgl.Shader(Shaders, "bp-vert", "rwall-frag");
        this.sensorProgram = new tgl.Shader(Shaders, "sensor-vert", "geometry-frag");
        this.tracePrograms = [];
        for (var i = 0; i < scenes.length; ++i)
            this.tracePrograms.push(null)
            // this.tracePrograms.push(new tgl.Shader(Shaders, "trace-vert", scenes[i]));
        this.scenes = scenes;

        this.maxPathLength = 12;
        this.minPathLength = 2;

        this.deltaT = 0.003;
        this.maxTime = 10; // approximate max instant we want to store
        this.numIntervals = parseInt(this.maxTime / this.deltaT + 0.05); // make sure it is an int

        this.maxTime = this.numIntervals * this.deltaT; // fix the maxTime to a value that corresponds with integer numIntervals
        this.spadRadius = 0.0035;
        this.setSpadPos([0, -0.6]);
        this.bboxCorners = [-1.78, 1.0, 1.78, -1.0]; // upper left, bottom right
        this.isConf = false;
        this.isVirtualConf = true;
        this.isConvCamera = false;

        // Shader programs to reconstruct the hidden scene
        this.lapProgram = new tgl.Shader(Shaders, "bp-vert", "lap-frag");
        this.logProgram = new tgl.Shader(Shaders, "bp-vert", "log-frag");
        this.pfKernelProgram = new tgl.Shader(Shaders, "bp-vert", "pf-filter-frag");
        this.maxProgram = new tgl.Shader(Shaders, "max-vert", "max-frag");
        this.sumProgram = new tgl.Shader(Shaders, "bp-vert", "sum-frag");
        this.showProgram = new tgl.Shader(Shaders, "show-vert", "show-frag");
        this.plotProgram = new pgl.Shader(Shaders, "show-vert", "plot-frag");

        this.spectrumTable = wavelengthToRgbTable();
        this.spectrum = new tgl.Texture(this.spectrumTable.length / 4, 1, 4, true, true, true, this.spectrumTable);
        this.emission = new tgl.Texture(tcore.Renderer.SPECTRUM_SAMPLES, 1, 1, true, false, true, null);
        this.emissionIcdf = new tgl.Texture(tcore.Renderer.ICDF_SAMPLES, 1, 1, true, false, true, null);
        this.emissionPdf = new tgl.Texture(tcore.Renderer.SPECTRUM_SAMPLES, 1, 1, true, false, true, null);

        this.raySize = 512;
        this.resetActiveBlock();
        this.rayCount = this.raySize * this.raySize;
        this.currentState = 0;
        this.rayStates = [new tcore.RayState(this.raySize), new tcore.RayState(this.raySize)];

        this.createVBOs();
        this.glFilter.clearColor(0.0, 0.0, 0.0, 1.0);
        this.glFilter.blendFunc(gl.ONE, gl.ONE);

        this.createNLOSBuffers(ModifiedAttributes.All);

        this.separationWidth = 10;
        this.changeResolution(width, height);
        this.setEmitterPos([width / 2, height / 2], [width / 2, height / 2]);
        this.computeEmissionSpectrum();

        // hot colormap for reconstruction (from matlab)
        var colormap = [
            0.0104, 0, 0, 1.0, 0.0208, 0, 0, 1.0, 0.0312, 0, 0, 1.0, 0.0417, 0, 0, 1.0, 0.0521, 0, 0, 1.0, 0.0625, 0, 0, 1.0, 0.0729, 0, 0, 1.0, 0.0833, 0, 0, 1.0, 0.0938, 0, 0, 1.0, 0.1042, 0, 0, 1.0, 0.1146, 0, 0, 1.0, 0.1250, 0, 0, 1.0, 0.1354, 0, 0, 1.0, 0.1458, 0, 0, 1.0, 0.1562, 0, 0, 1.0, 0.1667, 0, 0, 1.0, 0.1771, 0, 0, 1.0, 0.1875, 0, 0, 1.0, 0.1979, 0, 0, 1.0, 0.2083, 0, 0, 1.0, 0.2188, 0, 0, 1.0, 0.2292, 0, 0, 1.0, 0.2396, 0, 0, 1.0, 0.2500, 0, 0, 1.0, 0.2604, 0, 0, 1.0, 0.2708, 0, 0, 1.0, 0.2812, 0, 0, 1.0, 0.2917, 0, 0, 1.0, 0.3021, 0, 0, 1.0, 0.3125, 0, 0, 1.0, 0.3229, 0, 0, 1.0, 0.3333, 0, 0, 1.0, 0.3438, 0, 0, 1.0, 0.3542, 0, 0, 1.0, 0.3646, 0, 0, 1.0, 0.3750, 0, 0, 1.0, 0.3854, 0, 0, 1.0, 0.3958, 0, 0, 1.0, 0.4062, 0, 0, 1.0, 0.4167, 0, 0, 1.0, 0.4271, 0, 0, 1.0, 0.4375, 0, 0, 1.0, 0.4479, 0, 0, 1.0, 0.4583, 0, 0, 1.0, 0.4688, 0, 0, 1.0, 0.4792, 0, 0, 1.0, 0.4896, 0, 0, 1.0, 0.5000, 0, 0, 1.0, 0.5104, 0, 0, 1.0, 0.5208, 0, 0, 1.0, 0.5312, 0, 0, 1.0, 0.5417, 0, 0, 1.0, 0.5521, 0, 0, 1.0, 0.5625, 0, 0, 1.0, 0.5729, 0, 0, 1.0, 0.5833, 0, 0, 1.0, 0.5938, 0, 0, 1.0, 0.6042, 0, 0, 1.0, 0.6146, 0, 0, 1.0, 0.6250, 0, 0, 1.0, 0.6354, 0, 0, 1.0, 0.6458, 0, 0, 1.0, 0.6562, 0, 0, 1.0, 0.6667, 0, 0, 1.0, 0.6771, 0, 0, 1.0, 0.6875, 0, 0, 1.0, 0.6979, 0, 0, 1.0, 0.7083, 0, 0, 1.0, 0.7188, 0, 0, 1.0, 0.7292, 0, 0, 1.0, 0.7396, 0, 0, 1.0, 0.7500, 0, 0, 1.0, 0.7604, 0, 0, 1.0, 0.7708, 0, 0, 1.0, 0.7812, 0, 0, 1.0, 0.7917, 0, 0, 1.0, 0.8021, 0, 0, 1.0, 0.8125, 0, 0, 1.0, 0.8229, 0, 0, 1.0, 0.8333, 0, 0, 1.0, 0.8438, 0, 0, 1.0, 0.8542, 0, 0, 1.0, 0.8646, 0, 0, 1.0, 0.8750, 0, 0, 1.0, 0.8854, 0, 0, 1.0, 0.8958, 0, 0, 1.0, 0.9062, 0, 0, 1.0, 0.9167, 0, 0, 1.0, 0.9271, 0, 0, 1.0, 0.9375, 0, 0, 1.0, 0.9479, 0, 0, 1.0, 0.9583, 0, 0, 1.0, 0.9688, 0, 0, 1.0, 0.9792, 0, 0, 1.0, 0.9896, 0, 0, 1.0, 1.0000, 0, 0, 1.0, 1.0000, 0.0104, 0, 1.0, 1.0000, 0.0208, 0, 1.0, 1.0000, 0.0312, 0, 1.0, 1.0000, 0.0417, 0, 1.0, 1.0000, 0.0521, 0, 1.0, 1.0000, 0.0625, 0, 1.0, 1.0000, 0.0729, 0, 1.0, 1.0000, 0.0833, 0, 1.0, 1.0000, 0.0938, 0, 1.0, 1.0000, 0.1042, 0, 1.0, 1.0000, 0.1146, 0, 1.0, 1.0000, 0.1250, 0, 1.0, 1.0000, 0.1354, 0, 1.0, 1.0000, 0.1458, 0, 1.0, 1.0000, 0.1562, 0, 1.0, 1.0000, 0.1667, 0, 1.0, 1.0000, 0.1771, 0, 1.0, 1.0000, 0.1875, 0, 1.0, 1.0000, 0.1979, 0, 1.0, 1.0000, 0.2083, 0, 1.0, 1.0000, 0.2188, 0, 1.0, 1.0000, 0.2292, 0, 1.0, 1.0000, 0.2396, 0, 1.0, 1.0000, 0.2500, 0, 1.0, 1.0000, 0.2604, 0, 1.0, 1.0000, 0.2708, 0, 1.0, 1.0000, 0.2812, 0, 1.0, 1.0000, 0.2917, 0, 1.0, 1.0000, 0.3021, 0, 1.0, 1.0000, 0.3125, 0, 1.0, 1.0000, 0.3229, 0, 1.0, 1.0000, 0.3333, 0, 1.0, 1.0000, 0.3438, 0, 1.0, 1.0000, 0.3542, 0, 1.0, 1.0000, 0.3646, 0, 1.0, 1.0000, 0.3750, 0, 1.0, 1.0000, 0.3854, 0, 1.0, 1.0000, 0.3958, 0, 1.0, 1.0000, 0.4062, 0, 1.0, 1.0000, 0.4167, 0, 1.0, 1.0000, 0.4271, 0, 1.0, 1.0000, 0.4375, 0, 1.0, 1.0000, 0.4479, 0, 1.0, 1.0000, 0.4583, 0, 1.0, 1.0000, 0.4688, 0, 1.0, 1.0000, 0.4792, 0, 1.0, 1.0000, 0.4896, 0, 1.0, 1.0000, 0.5000, 0, 1.0, 1.0000, 0.5104, 0, 1.0, 1.0000, 0.5208, 0, 1.0, 1.0000, 0.5312, 0, 1.0, 1.0000, 0.5417, 0, 1.0, 1.0000, 0.5521, 0, 1.0, 1.0000, 0.5625, 0, 1.0, 1.0000, 0.5729, 0, 1.0, 1.0000, 0.5833, 0, 1.0, 1.0000, 0.5938, 0, 1.0, 1.0000, 0.6042, 0, 1.0, 1.0000, 0.6146, 0, 1.0, 1.0000, 0.6250, 0, 1.0, 1.0000, 0.6354, 0, 1.0, 1.0000, 0.6458, 0, 1.0, 1.0000, 0.6562, 0, 1.0, 1.0000, 0.6667, 0, 1.0, 1.0000, 0.6771, 0, 1.0, 1.0000, 0.6875, 0, 1.0, 1.0000, 0.6979, 0, 1.0, 1.0000, 0.7083, 0, 1.0, 1.0000, 0.7188, 0, 1.0, 1.0000, 0.7292, 0, 1.0, 1.0000, 0.7396, 0, 1.0, 1.0000, 0.7500, 0, 1.0, 1.0000, 0.7604, 0, 1.0, 1.0000, 0.7708, 0, 1.0, 1.0000, 0.7812, 0, 1.0, 1.0000, 0.7917, 0, 1.0, 1.0000, 0.8021, 0, 1.0, 1.0000, 0.8125, 0, 1.0, 1.0000, 0.8229, 0, 1.0, 1.0000, 0.8333, 0, 1.0, 1.0000, 0.8438, 0, 1.0, 1.0000, 0.8542, 0, 1.0, 1.0000, 0.8646, 0, 1.0, 1.0000, 0.8750, 0, 1.0, 1.0000, 0.8854, 0, 1.0, 1.0000, 0.8958, 0, 1.0, 1.0000, 0.9062, 0, 1.0, 1.0000, 0.9167, 0, 1.0, 1.0000, 0.9271, 0, 1.0, 1.0000, 0.9375, 0, 1.0, 1.0000, 0.9479, 0, 1.0, 1.0000, 0.9583, 0, 1.0, 1.0000, 0.9688, 0, 1.0, 1.0000, 0.9792, 0, 1.0, 1.0000, 0.9896, 0, 1.0, 1.0000, 1.0000, 0, 1.0, 1.0000, 1.0000, 0.0156, 1.0, 1.0000, 1.0000, 0.0312, 1.0, 1.0000, 1.0000, 0.0469, 1.0, 1.0000, 1.0000, 0.0625, 1.0, 1.0000, 1.0000, 0.0781, 1.0, 1.0000, 1.0000, 0.0938, 1.0, 1.0000, 1.0000, 0.1094, 1.0, 1.0000, 1.0000, 0.1250, 1.0, 1.0000, 1.0000, 0.1406, 1.0, 1.0000, 1.0000, 0.1562, 1.0, 1.0000, 1.0000, 0.1719, 1.0, 1.0000, 1.0000, 0.1875, 1.0, 1.0000, 1.0000, 0.2031, 1.0, 1.0000, 1.0000, 0.2188, 1.0, 1.0000, 1.0000, 0.2344, 1.0, 1.0000, 1.0000, 0.2500, 1.0, 1.0000, 1.0000, 0.2656, 1.0, 1.0000, 1.0000, 0.2812, 1.0, 1.0000, 1.0000, 0.2969, 1.0, 1.0000, 1.0000, 0.3125, 1.0, 1.0000, 1.0000, 0.3281, 1.0, 1.0000, 1.0000, 0.3438, 1.0, 1.0000, 1.0000, 0.3594, 1.0, 1.0000, 1.0000, 0.3750, 1.0, 1.0000, 1.0000, 0.3906, 1.0, 1.0000, 1.0000, 0.4062, 1.0, 1.0000, 1.0000, 0.4219, 1.0, 1.0000, 1.0000, 0.4375, 1.0, 1.0000, 1.0000, 0.4531, 1.0, 1.0000, 1.0000, 0.4688, 1.0, 1.0000, 1.0000, 0.4844, 1.0, 1.0000, 1.0000, 0.5000, 1.0, 1.0000, 1.0000, 0.5156, 1.0, 1.0000, 1.0000, 0.5312, 1.0, 1.0000, 1.0000, 0.5469, 1.0, 1.0000, 1.0000, 0.5625, 1.0, 1.0000, 1.0000, 0.5781, 1.0, 1.0000, 1.0000, 0.5938, 1.0, 1.0000, 1.0000, 0.6094, 1.0, 1.0000, 1.0000, 0.6250, 1.0, 1.0000, 1.0000, 0.6406, 1.0, 1.0000, 1.0000, 0.6562, 1.0, 1.0000, 1.0000, 0.6719, 1.0, 1.0000, 1.0000, 0.6875, 1.0, 1.0000, 1.0000, 0.7031, 1.0, 1.0000, 1.0000, 0.7188, 1.0, 1.0000, 1.0000, 0.7344, 1.0, 1.0000, 1.0000, 0.7500, 1.0, 1.0000, 1.0000, 0.7656, 1.0, 1.0000, 1.0000, 0.7812, 1.0, 1.0000, 1.0000, 0.7969, 1.0, 1.0000, 1.0000, 0.8125, 1.0, 1.0000, 1.0000, 0.8281, 1.0, 1.0000, 1.0000, 0.8438, 1.0, 1.0000, 1.0000, 0.8594, 1.0, 1.0000, 1.0000, 0.8750, 1.0, 1.0000, 1.0000, 0.8906, 1.0, 1.0000, 1.0000, 0.9062, 1.0, 1.0000, 1.0000, 0.9219, 1.0, 1.0000, 1.0000, 0.9375, 1.0, 1.0000, 1.0000, 0.9531, 1.0, 1.0000, 1.0000, 0.9688, 1.0, 1.0000, 1.0000, 0.9844, 1.0, 1.0000, 1.0000, 1.0000, 1.0
        ];
        this.colormapHot = new Float32Array(colormap);
        this.colormapHotTex = new tgl.Texture(colormap.length / 4, 1, 4, true, false, true, this.colormapHot);
        // seismic colormap for phase (from python matplotlib)
        colormap = [
            0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.31098039215686274, 1.0, 0.0, 0.0, 0.3219607843137255, 1.0, 0.0, 0.0, 0.33294117647058824, 1.0, 0.0, 0.0, 0.34392156862745094, 1.0, 0.0, 0.0, 0.3549019607843137, 1.0, 0.0, 0.0, 0.36588235294117644, 1.0, 0.0, 0.0, 0.3768627450980392, 1.0, 0.0, 0.0, 0.38784313725490194, 1.0, 0.0, 0.0, 0.3988235294117647, 1.0, 0.0, 0.0, 0.40980392156862744, 1.0, 0.0, 0.0, 0.4207843137254902, 1.0, 0.0, 0.0, 0.43176470588235294, 1.0, 0.0, 0.0, 0.4427450980392157, 1.0, 0.0, 0.0, 0.45372549019607844, 1.0, 0.0, 0.0, 0.4647058823529412, 1.0, 0.0, 0.0, 0.4756862745098039, 1.0, 0.0, 0.0, 0.48666666666666664, 1.0, 0.0, 0.0, 0.4976470588235294, 1.0, 0.0, 0.0, 0.5086274509803921, 1.0, 0.0, 0.0, 0.5196078431372548, 1.0, 0.0, 0.0, 0.5305882352941176, 1.0, 0.0, 0.0, 0.5415686274509803, 1.0, 0.0, 0.0, 0.5525490196078431, 1.0, 0.0, 0.0, 0.5635294117647058, 1.0, 0.0, 0.0, 0.5745098039215686, 1.0, 0.0, 0.0, 0.5854901960784313, 1.0, 0.0, 0.0, 0.5964705882352941, 1.0, 0.0, 0.0, 0.6074509803921568, 1.0, 0.0, 0.0, 0.6184313725490196, 1.0, 0.0, 0.0, 0.6294117647058823, 1.0, 0.0, 0.0, 0.6403921568627451, 1.0, 0.0, 0.0, 0.6513725490196078, 1.0, 0.0, 0.0, 0.6623529411764706, 1.0, 0.0, 0.0, 0.6733333333333333, 1.0, 0.0, 0.0, 0.6843137254901961, 1.0, 0.0, 0.0, 0.6952941176470588, 1.0, 0.0, 0.0, 0.7062745098039215, 1.0, 0.0, 0.0, 0.7172549019607843, 1.0, 0.0, 0.0, 0.7282352941176471, 1.0, 0.0, 0.0, 0.7392156862745097, 1.0, 0.0, 0.0, 0.7501960784313725, 1.0, 0.0, 0.0, 0.7611764705882352, 1.0, 0.0, 0.0, 0.7721568627450981, 1.0, 0.0, 0.0, 0.7831372549019607, 1.0, 0.0, 0.0, 0.7941176470588234, 1.0, 0.0, 0.0, 0.8050980392156861, 1.0, 0.0, 0.0, 0.8160784313725491, 1.0, 0.0, 0.0, 0.8270588235294116, 1.0, 0.0, 0.0, 0.8380392156862744, 1.0, 0.0, 0.0, 0.8490196078431371, 1.0, 0.0, 0.0, 0.8599999999999999, 1.0, 0.0, 0.0, 0.8709803921568626, 1.0, 0.0, 0.0, 0.8819607843137254, 1.0, 0.0, 0.0, 0.8929411764705881, 1.0, 0.0, 0.0, 0.9039215686274509, 1.0, 0.0, 0.0, 0.9149019607843136, 1.0, 0.0, 0.0, 0.9258823529411764, 1.0, 0.0, 0.0, 0.9368627450980391, 1.0, 0.0, 0.0, 0.9478431372549019, 1.0, 0.0, 0.0, 0.9588235294117646, 1.0, 0.0, 0.0, 0.9698039215686274, 1.0, 0.0, 0.0, 0.9807843137254901, 1.0, 0.0, 0.0, 0.9917647058823529, 1.0, 0.00392156862745098, 0.00392156862745098, 1.0, 1.0, 0.0196078431372549, 0.0196078431372549, 1.0, 1.0, 0.0352941176470586, 0.0352941176470586, 1.0, 1.0, 0.050980392156862744, 0.050980392156862744, 1.0, 1.0, 0.06666666666666667, 0.06666666666666667, 1.0, 1.0, 0.08235294117647059, 0.08235294117647059, 1.0, 1.0, 0.09803921568627451, 0.09803921568627451, 1.0, 1.0, 0.11372549019607843, 0.11372549019607843, 1.0, 1.0, 0.12941176470588237, 0.12941176470588237, 1.0, 1.0, 0.1450980392156863, 0.1450980392156863, 1.0, 1.0, 0.16078431372548999, 0.16078431372548999, 1.0, 1.0, 0.17647058823529413, 0.17647058823529413, 1.0, 1.0, 0.19215686274509805, 0.19215686274509805, 1.0, 1.0, 0.20784313725490197, 0.20784313725490197, 1.0, 1.0, 0.2235294117647059, 0.2235294117647059, 1.0, 1.0, 0.23921568627450981, 0.23921568627450981, 1.0, 1.0, 0.2549019607843137, 0.2549019607843137, 1.0, 1.0, 0.27058823529411763, 0.27058823529411763, 1.0, 1.0, 0.28627450980392133, 0.28627450980392133, 1.0, 1.0, 0.30196078431372547, 0.30196078431372547, 1.0, 1.0, 0.3176470588235294, 0.3176470588235294, 1.0, 1.0, 0.3333333333333333, 0.3333333333333333, 1.0, 1.0, 0.34901960784313724, 0.34901960784313724, 1.0, 1.0, 0.36470588235294116, 0.36470588235294116, 1.0, 1.0, 0.3803921568627451, 0.3803921568627451, 1.0, 1.0, 0.396078431372549, 0.396078431372549, 1.0, 1.0, 0.4117647058823527, 0.4117647058823527, 1.0, 1.0, 0.42745098039215684, 0.42745098039215684, 1.0, 1.0, 0.44313725490196076, 0.44313725490196076, 1.0, 1.0, 0.4588235294117647, 0.4588235294117647, 1.0, 1.0, 0.4745098039215686, 0.4745098039215686, 1.0, 1.0, 0.49019607843137253, 0.49019607843137253, 1.0, 1.0, 0.5058823529411764, 0.5058823529411764, 1.0, 1.0, 0.5215686274509804, 0.5215686274509804, 1.0, 1.0, 0.5372549019607841, 0.5372549019607841, 1.0, 1.0, 0.5529411764705883, 0.5529411764705883, 1.0, 1.0, 0.5686274509803921, 0.5686274509803921, 1.0, 1.0, 0.5843137254901961, 0.5843137254901961, 1.0, 1.0, 0.6, 0.6, 1.0, 1.0, 0.615686274509804, 0.615686274509804, 1.0, 1.0, 0.6313725490196078, 0.6313725490196078, 1.0, 1.0, 0.6470588235294118, 0.6470588235294118, 1.0, 1.0, 0.6627450980392154, 0.6627450980392154, 1.0, 1.0, 0.6784313725490196, 0.6784313725490196, 1.0, 1.0, 0.6941176470588235, 0.6941176470588235, 1.0, 1.0, 0.7098039215686275, 0.7098039215686275, 1.0, 1.0, 0.7254901960784313, 0.7254901960784313, 1.0, 1.0, 0.7411764705882353, 0.7411764705882353, 1.0, 1.0, 0.7568627450980392, 0.7568627450980392, 1.0, 1.0, 0.7725490196078432, 0.7725490196078432, 1.0, 1.0, 0.7882352941176468, 0.7882352941176468, 1.0, 1.0, 0.803921568627451, 0.803921568627451, 1.0, 1.0, 0.8196078431372549, 0.8196078431372549, 1.0, 1.0, 0.8352941176470589, 0.8352941176470589, 1.0, 1.0, 0.8509803921568627, 0.8509803921568627, 1.0, 1.0, 0.8666666666666667, 0.8666666666666667, 1.0, 1.0, 0.8823529411764706, 0.8823529411764706, 1.0, 1.0, 0.8980392156862745, 0.8980392156862745, 1.0, 1.0, 0.9137254901960782, 0.9137254901960782, 1.0, 1.0, 0.9294117647058824, 0.9294117647058824, 1.0, 1.0, 0.9450980392156862, 0.9450980392156862, 1.0, 1.0, 0.9607843137254902, 0.9607843137254902, 1.0, 1.0, 0.9764705882352941, 0.9764705882352941, 1.0, 1.0, 0.9921568627450981, 0.9921568627450981, 1.0, 1.0, 1.0, 0.9921568627450981, 0.9921568627450981, 1.0, 1.0, 0.9764705882352941, 0.9764705882352941, 1.0, 1.0, 0.9607843137254902, 0.9607843137254902, 1.0, 1.0, 0.9450980392156862, 0.9450980392156862, 1.0, 1.0, 0.9294117647058828, 0.9294117647058828, 1.0, 1.0, 0.9137254901960784, 0.9137254901960784, 1.0, 1.0, 0.8980392156862745, 0.8980392156862745, 1.0, 1.0, 0.8823529411764706, 0.8823529411764706, 1.0, 1.0, 0.8666666666666667, 0.8666666666666667, 1.0, 1.0, 0.8509803921568627, 0.8509803921568627, 1.0, 1.0, 0.8352941176470589, 0.8352941176470589, 1.0, 1.0, 0.8196078431372549, 0.8196078431372549, 1.0, 1.0, 0.803921568627451, 0.803921568627451, 1.0, 1.0, 0.788235294117647, 0.788235294117647, 1.0, 1.0, 0.7725490196078432, 0.7725490196078432, 1.0, 1.0, 0.7568627450980392, 0.7568627450980392, 1.0, 1.0, 0.7411764705882353, 0.7411764705882353, 1.0, 1.0, 0.7254901960784313, 0.7254901960784313, 1.0, 1.0, 0.7098039215686274, 0.7098039215686274, 1.0, 1.0, 0.6941176470588235, 0.6941176470588235, 1.0, 1.0, 0.6784313725490201, 0.6784313725490201, 1.0, 1.0, 0.6627450980392157, 0.6627450980392157, 1.0, 1.0, 0.6470588235294117, 0.6470588235294117, 1.0, 1.0, 0.6313725490196078, 0.6313725490196078, 1.0, 1.0, 0.615686274509804, 0.615686274509804, 1.0, 1.0, 0.6, 0.6, 1.0, 1.0, 0.584313725490196, 0.584313725490196, 1.0, 1.0, 0.5686274509803921, 0.5686274509803921, 1.0, 1.0, 0.5529411764705883, 0.5529411764705883, 1.0, 1.0, 0.5372549019607843, 0.5372549019607843, 1.0, 1.0, 0.5215686274509803, 0.5215686274509803, 1.0, 1.0, 0.5058823529411764, 0.5058823529411764, 1.0, 1.0, 0.4901960784313726, 0.4901960784313726, 1.0, 1.0, 0.4745098039215686, 0.4745098039215686, 1.0, 1.0, 0.45882352941176474, 0.45882352941176474, 1.0, 1.0, 0.44313725490196076, 0.44313725490196076, 1.0, 1.0, 0.42745098039215734, 0.42745098039215734, 1.0, 1.0, 0.4117647058823529, 0.4117647058823529, 1.0, 1.0, 0.39607843137254906, 0.39607843137254906, 1.0, 1.0, 0.3803921568627451, 0.3803921568627451, 1.0, 1.0, 0.3647058823529412, 0.3647058823529412, 1.0, 1.0, 0.34901960784313724, 0.34901960784313724, 1.0, 1.0, 0.33333333333333337, 0.33333333333333337, 1.0, 1.0, 0.3176470588235294, 0.3176470588235294, 1.0, 1.0, 0.3019607843137255, 0.3019607843137255, 1.0, 1.0, 0.28627450980392155, 0.28627450980392155, 1.0, 1.0, 0.2705882352941177, 0.2705882352941177, 1.0, 1.0, 0.2549019607843137, 0.2549019607843137, 1.0, 1.0, 0.23921568627450984, 0.23921568627450984, 1.0, 1.0, 0.22352941176470587, 0.22352941176470587, 1.0, 1.0, 0.207843137254902, 0.207843137254902, 1.0, 1.0, 0.19215686274509802, 0.19215686274509802, 1.0, 1.0, 0.1764705882352946, 0.1764705882352946, 1.0, 1.0, 0.16078431372549018, 0.16078431372549018, 1.0, 1.0, 0.14509803921568631, 0.14509803921568631, 1.0, 1.0, 0.12941176470588234, 0.12941176470588234, 1.0, 1.0, 0.11372549019607847, 0.11372549019607847, 1.0, 1.0, 0.0980392156862745, 0.0980392156862745, 1.0, 1.0, 0.08235294117647063, 0.08235294117647063, 1.0, 1.0, 0.06666666666666665, 0.06666666666666665, 1.0, 1.0, 0.050980392156862786, 0.050980392156862786, 1.0, 1.0, 0.03529411764705881, 0.03529411764705881, 1.0, 1.0, 0.019607843137254943, 0.019607843137254943, 1.0, 1.0, 0.0039215686274509665, 0.0039215686274509665, 1.0, 0.9941176470588236, 0.0, 0.0, 1.0, 0.9862745098039216, 0.0, 0.0, 1.0, 0.9784313725490196, 0.0, 0.0, 1.0, 0.9705882352941176, 0.0, 0.0, 1.0, 0.9627450980392159, 0.0, 0.0, 1.0, 0.9549019607843138, 0.0, 0.0, 1.0, 0.9470588235294117, 0.0, 0.0, 1.0, 0.9392156862745098, 0.0, 0.0, 1.0, 0.9313725490196079, 0.0, 0.0, 1.0, 0.9235294117647059, 0.0, 0.0, 1.0, 0.9156862745098039, 0.0, 0.0, 1.0, 0.907843137254902, 0.0, 0.0, 1.0, 0.9, 0.0, 0.0, 1.0, 0.892156862745098, 0.0, 0.0, 1.0, 0.884313725490196, 0.0, 0.0, 1.0, 0.8764705882352941, 0.0, 0.0, 1.0, 0.8686274509803922, 0.0, 0.0, 1.0, 0.8607843137254902, 0.0, 0.0, 1.0, 0.8529411764705882, 0.0, 0.0, 1.0, 0.8450980392156863, 0.0, 0.0, 1.0, 0.8372549019607846, 0.0, 0.0, 1.0, 0.8294117647058823, 0.0, 0.0, 1.0, 0.8215686274509804, 0.0, 0.0, 1.0, 0.8137254901960784, 0.0, 0.0, 1.0, 0.8058823529411765, 0.0, 0.0, 1.0, 0.7980392156862746, 0.0, 0.0, 1.0, 0.7901960784313725, 0.0, 0.0, 1.0, 0.7823529411764706, 0.0, 0.0, 1.0, 0.7745098039215687, 0.0, 0.0, 1.0, 0.7666666666666666, 0.0, 0.0, 1.0, 0.7588235294117647, 0.0, 0.0, 1.0, 0.7509803921568627, 0.0, 0.0, 1.0, 0.7431372549019608, 0.0, 0.0, 1.0, 0.7352941176470589, 0.0, 0.0, 1.0, 0.7274509803921569, 0.0, 0.0, 1.0, 0.7196078431372549, 0.0, 0.0, 1.0, 0.7117647058823532, 0.0, 0.0, 1.0, 0.7039215686274509, 0.0, 0.0, 1.0, 0.696078431372549, 0.0, 0.0, 1.0, 0.6882352941176471, 0.0, 0.0, 1.0, 0.6803921568627451, 0.0, 0.0, 1.0, 0.6725490196078432, 0.0, 0.0, 1.0, 0.6647058823529413, 0.0, 0.0, 1.0, 0.6568627450980392, 0.0, 0.0, 1.0, 0.6490196078431373, 0.0, 0.0, 1.0, 0.6411764705882352, 0.0, 0.0, 1.0, 0.6333333333333333, 0.0, 0.0, 1.0, 0.6254901960784314, 0.0, 0.0, 1.0, 0.6176470588235294, 0.0, 0.0, 1.0, 0.6098039215686275, 0.0, 0.0, 1.0, 0.6019607843137256, 0.0, 0.0, 1.0, 0.5941176470588235, 0.0, 0.0, 1.0, 0.5862745098039218, 0.0, 0.0, 1.0, 0.5784313725490196, 0.0, 0.0, 1.0, 0.5705882352941176, 0.0, 0.0, 1.0, 0.5627450980392157, 0.0, 0.0, 1.0, 0.5549019607843138, 0.0, 0.0, 1.0, 0.5470588235294118, 0.0, 0.0, 1.0, 0.5392156862745099, 0.0, 0.0, 1.0, 0.5313725490196078, 0.0, 0.0, 1.0, 0.5235294117647059, 0.0, 0.0, 1.0, 0.5156862745098039, 0.0, 0.0, 1.0, 0.5078431372549019, 0.0, 0.0, 1.0, 0.5, 0.0, 0.0, 1.0
        ];
        this.colormapSeismic = new Float32Array(colormap);
        this.colormapSeismicTex = new tgl.Texture(colormap.length / 4, 1, 4, true, false, true, this.colormapSeismic);

        // Laplacian filter
        this.lapKernel = new Float32Array(9);
        this.lapKernel[0] = this.lapKernel[1] = this.lapKernel[2] = this.lapKernel[3] = -1.0;
        this.lapKernel[4] = 8.0;
        this.lapKernel[5] = this.lapKernel[6] = this.lapKernel[7] = this.lapKernel[8] = -1.0;

        // LoG filter
        var dim = 45;
        var logKernel = [
            3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 7.89043545250869e-16, 3.55924947140632e-15, 1.04421086204378e-14, 1.99104938996080e-14, 2.46874904599223e-14, 1.99104938996080e-14, 1.04421086204378e-14, 3.55924947140632e-15, 7.89043545250869e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.50442518642114e-15, 1.60571405581474e-14, 1.11082625574244e-13, 4.98464144278520e-13, 1.45386782543190e-12, 2.76124516943131e-12, 3.41902928426874e-12, 2.76124516943131e-12, 1.45386782543190e-12, 4.98464144278520e-13, 1.11082625574244e-13, 1.60571405581474e-14, 1.50442518642114e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 8.42024432865574e-15, 1.37677697881142e-13, 1.45386782543190e-12, 9.94033299275190e-12, 4.41378777215618e-11, 1.27663763210872e-10, 2.41157917297869e-10, 2.98048861059931e-10, 2.41157917297869e-10, 1.27663763210872e-10, 4.41378777215618e-11, 9.94033299275190e-12, 1.45386782543190e-12, 1.37677697881142e-13, 8.42024432865574e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 5.13493963614977e-16, 1.99104938996080e-14, 4.98464144278520e-13, 8.03098352477328e-12, 8.35008390467833e-11, 5.62283682263459e-10, 2.46234586464539e-09, 7.04252251552669e-09, 1.32057697485752e-08, 1.62792104771307e-08, 1.32057697485752e-08, 7.04252251552669e-09, 2.46234586464539e-09, 5.62283682263459e-10, 8.35008390467833e-11, 8.03098352477328e-12, 4.98464144278520e-13, 1.99104938996080e-14, 5.13493963614977e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.99104938996080e-14, 7.65025657570040e-13, 1.88401950938749e-11, 2.98048861059931e-10, 3.03913179073640e-09, 2.00645183815359e-08, 8.62465146266664e-08, 2.42870144732111e-07, 4.50697797340099e-07, 5.53550071915819e-07, 4.50697797340099e-07, 2.42870144732111e-07, 8.62465146266664e-08, 2.00645183815359e-08, 3.03913179073640e-09, 2.98048861059931e-10, 1.88401950938749e-11, 7.65025657570040e-13, 1.99104938996080e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 8.42024432865574e-15, 4.98464144278520e-13, 1.88401950938749e-11, 4.55109052509882e-10, 7.04252251552669e-09, 7.00689971425924e-08, 4.50697797340099e-07, 1.88822192893507e-06, 5.19984523722407e-06, 9.50144657200695e-06, 1.16050824359822e-05, 9.50144657200695e-06, 5.19984523722407e-06, 1.88822192893507e-06, 4.50697797340099e-07, 7.00689971425924e-08, 7.04252251552669e-09, 4.55109052509882e-10, 1.88401950938749e-11, 4.98464144278520e-13, 8.42024432865574e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.50442518642114e-15, 1.37677697881142e-13, 8.03098352477328e-12, 2.98048861059931e-10, 7.04252251552669e-09, 1.06136470096558e-07, 1.02380689067265e-06, 6.35992763022253e-06, 2.56911048452451e-05, 6.84077861326287e-05, 0.000121980440732971, 0.000147647900512783, 0.000121980440732971, 6.84077861326287e-05, 2.56911048452451e-05, 6.35992763022253e-06, 1.02380689067265e-06, 1.06136470096558e-07, 7.04252251552669e-09, 2.98048861059931e-10, 8.03098352477328e-12, 1.37677697881142e-13, 1.50442518642114e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.60571405581474e-14, 1.45386782543190e-12, 8.35008390467833e-11, 3.03913179073640e-09, 7.00689971425924e-08, 1.02380689067265e-06, 9.50144657200695e-06, 5.63196778805704e-05, 0.000215654491519215, 0.000544066518487493, 0.000929938077188085, 0.00110733573845245, 0.000929938077188085, 0.000544066518487493, 0.000215654491519215, 5.63196778805704e-05, 9.50144657200695e-06, 1.02380689067265e-06, 7.00689971425924e-08, 3.03913179073640e-09, 8.35008390467833e-11, 1.45386782543190e-12, 1.60571405581474e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 7.89043545250869e-16, 1.11082625574244e-13, 9.94033299275190e-12, 5.62283682263459e-10, 2.00645183815359e-08, 4.50697797340099e-07, 6.35992763022253e-06, 5.63196778805704e-05, 0.000313537113196262, 0.00110733573845245, 0.00254335262910760, 0.00399497943074096, 0.00458999550026456, 0.00399497943074096, 0.00254335262910760, 0.00110733573845245, 0.000313537113196262, 5.63196778805704e-05, 6.35992763022253e-06, 4.50697797340099e-07, 2.00645183815359e-08, 5.62283682263459e-10, 9.94033299275190e-12, 1.11082625574244e-13, 7.89043545250869e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.55924947140632e-15, 4.98464144278520e-13, 4.41378777215618e-11, 2.46234586464539e-09, 8.62465146266664e-08, 1.88822192893507e-06, 2.56911048452451e-05, 0.000215654491519215, 0.00110733573845245, 0.00345484381040379, 0.00660789296654792, 0.00832791757508839, 0.00850934490937230, 0.00832791757508839, 0.00660789296654792, 0.00345484381040379, 0.00110733573845245, 0.000215654491519215, 2.56911048452451e-05, 1.88822192893507e-06, 8.62465146266664e-08, 2.46234586464539e-09, 4.41378777215618e-11, 4.98464144278520e-13, 3.55924947140632e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.04421086204378e-14, 1.45386782543190e-12, 1.27663763210872e-10, 7.04252251552669e-09, 2.42870144732111e-07, 5.19984523722407e-06, 6.84077861326287e-05, 0.000544066518487493, 0.00254335262910760, 0.00660789296654792, 0.00826535559578931, 0.00229981635076294, -0.00287212304856187, 0.00229981635076294, 0.00826535559578931, 0.00660789296654792, 0.00254335262910760, 0.000544066518487493, 6.84077861326287e-05, 5.19984523722407e-06, 2.42870144732111e-07, 7.04252251552669e-09, 1.27663763210872e-10, 1.45386782543190e-12, 1.04421086204378e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.99104938996080e-14, 2.76124516943131e-12, 2.41157917297869e-10, 1.32057697485752e-08, 4.50697797340099e-07, 9.50144657200695e-06, 0.000121980440732971, 0.000929938077188085, 0.00399497943074096, 0.00832791757508839, 0.00229981635076294, -0.0223971529727756, -0.0391589228224718, -0.0223971529727756, 0.00229981635076294, 0.00832791757508839, 0.00399497943074096, 0.000929938077188085, 0.000121980440732971, 9.50144657200695e-06, 4.50697797340099e-07, 1.32057697485752e-08, 2.41157917297869e-10, 2.76124516943131e-12, 1.99104938996080e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 2.46874904599223e-14, 3.41902928426874e-12, 2.98048861059931e-10, 1.62792104771307e-08, 5.53550071915819e-07, 1.16050824359822e-05, 0.000147647900512783, 0.00110733573845245, 0.00458999550026456, 0.00850934490937230, -0.00287212304856187, -0.0391589228224718, -0.0628760269005019, -0.0391589228224718, -0.00287212304856187, 0.00850934490937230, 0.00458999550026456, 0.00110733573845245, 0.000147647900512783, 1.16050824359822e-05, 5.53550071915819e-07, 1.62792104771307e-08, 2.98048861059931e-10, 3.41902928426874e-12, 2.46874904599223e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.99104938996080e-14, 2.76124516943131e-12, 2.41157917297869e-10, 1.32057697485752e-08, 4.50697797340099e-07, 9.50144657200695e-06, 0.000121980440732971, 0.000929938077188085, 0.00399497943074096, 0.00832791757508839, 0.00229981635076294, -0.0223971529727756, -0.0391589228224718, -0.0223971529727756, 0.00229981635076294, 0.00832791757508839, 0.00399497943074096, 0.000929938077188085, 0.000121980440732971, 9.50144657200695e-06, 4.50697797340099e-07, 1.32057697485752e-08, 2.41157917297869e-10, 2.76124516943131e-12, 1.99104938996080e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.04421086204378e-14, 1.45386782543190e-12, 1.27663763210872e-10, 7.04252251552669e-09, 2.42870144732111e-07, 5.19984523722407e-06, 6.84077861326287e-05, 0.000544066518487493, 0.00254335262910760, 0.00660789296654792, 0.00826535559578931, 0.00229981635076294, -0.00287212304856187, 0.00229981635076294, 0.00826535559578931, 0.00660789296654792, 0.00254335262910760, 0.000544066518487493, 6.84077861326287e-05, 5.19984523722407e-06, 2.42870144732111e-07, 7.04252251552669e-09, 1.27663763210872e-10, 1.45386782543190e-12, 1.04421086204378e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.55924947140632e-15, 4.98464144278520e-13, 4.41378777215618e-11, 2.46234586464539e-09, 8.62465146266664e-08, 1.88822192893507e-06, 2.56911048452451e-05, 0.000215654491519215, 0.00110733573845245, 0.00345484381040379, 0.00660789296654792, 0.00832791757508839, 0.00850934490937230, 0.00832791757508839, 0.00660789296654792, 0.00345484381040379, 0.00110733573845245, 0.000215654491519215, 2.56911048452451e-05, 1.88822192893507e-06, 8.62465146266664e-08, 2.46234586464539e-09, 4.41378777215618e-11, 4.98464144278520e-13, 3.55924947140632e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 7.89043545250869e-16, 1.11082625574244e-13, 9.94033299275190e-12, 5.62283682263459e-10, 2.00645183815359e-08, 4.50697797340099e-07, 6.35992763022253e-06, 5.63196778805704e-05, 0.000313537113196262, 0.00110733573845245, 0.00254335262910760, 0.00399497943074096, 0.00458999550026456, 0.00399497943074096, 0.00254335262910760, 0.00110733573845245, 0.000313537113196262, 5.63196778805704e-05, 6.35992763022253e-06, 4.50697797340099e-07, 2.00645183815359e-08, 5.62283682263459e-10, 9.94033299275190e-12, 1.11082625574244e-13, 7.89043545250869e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.60571405581474e-14, 1.45386782543190e-12, 8.35008390467833e-11, 3.03913179073640e-09, 7.00689971425924e-08, 1.02380689067265e-06, 9.50144657200695e-06, 5.63196778805704e-05, 0.000215654491519215, 0.000544066518487493, 0.000929938077188085, 0.00110733573845245, 0.000929938077188085, 0.000544066518487493, 0.000215654491519215, 5.63196778805704e-05, 9.50144657200695e-06, 1.02380689067265e-06, 7.00689971425924e-08, 3.03913179073640e-09, 8.35008390467833e-11, 1.45386782543190e-12, 1.60571405581474e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.50442518642114e-15, 1.37677697881142e-13, 8.03098352477328e-12, 2.98048861059931e-10, 7.04252251552669e-09, 1.06136470096558e-07, 1.02380689067265e-06, 6.35992763022253e-06, 2.56911048452451e-05, 6.84077861326287e-05, 0.000121980440732971, 0.000147647900512783, 0.000121980440732971, 6.84077861326287e-05, 2.56911048452451e-05, 6.35992763022253e-06, 1.02380689067265e-06, 1.06136470096558e-07, 7.04252251552669e-09, 2.98048861059931e-10, 8.03098352477328e-12, 1.37677697881142e-13, 1.50442518642114e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 8.42024432865574e-15, 4.98464144278520e-13, 1.88401950938749e-11, 4.55109052509882e-10, 7.04252251552669e-09, 7.00689971425924e-08, 4.50697797340099e-07, 1.88822192893507e-06, 5.19984523722407e-06, 9.50144657200695e-06, 1.16050824359822e-05, 9.50144657200695e-06, 5.19984523722407e-06, 1.88822192893507e-06, 4.50697797340099e-07, 7.00689971425924e-08, 7.04252251552669e-09, 4.55109052509882e-10, 1.88401950938749e-11, 4.98464144278520e-13, 8.42024432865574e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.99104938996080e-14, 7.65025657570040e-13, 1.88401950938749e-11, 2.98048861059931e-10, 3.03913179073640e-09, 2.00645183815359e-08, 8.62465146266664e-08, 2.42870144732111e-07, 4.50697797340099e-07, 5.53550071915819e-07, 4.50697797340099e-07, 2.42870144732111e-07, 8.62465146266664e-08, 2.00645183815359e-08, 3.03913179073640e-09, 2.98048861059931e-10, 1.88401950938749e-11, 7.65025657570040e-13, 1.99104938996080e-14, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 5.13493963614977e-16, 1.99104938996080e-14, 4.98464144278520e-13, 8.03098352477328e-12, 8.35008390467833e-11, 5.62283682263459e-10, 2.46234586464539e-09, 7.04252251552669e-09, 1.32057697485752e-08, 1.62792104771307e-08, 1.32057697485752e-08, 7.04252251552669e-09, 2.46234586464539e-09, 5.62283682263459e-10, 8.35008390467833e-11, 8.03098352477328e-12, 4.98464144278520e-13, 1.99104938996080e-14, 5.13493963614977e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 8.42024432865574e-15, 1.37677697881142e-13, 1.45386782543190e-12, 9.94033299275190e-12, 4.41378777215618e-11, 1.27663763210872e-10, 2.41157917297869e-10, 2.98048861059931e-10, 2.41157917297869e-10, 1.27663763210872e-10, 4.41378777215618e-11, 9.94033299275190e-12, 1.45386782543190e-12, 1.37677697881142e-13, 8.42024432865574e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 1.50442518642114e-15, 1.60571405581474e-14, 1.11082625574244e-13, 4.98464144278520e-13, 1.45386782543190e-12, 2.76124516943131e-12, 3.41902928426874e-12, 2.76124516943131e-12, 1.45386782543190e-12, 4.98464144278520e-13, 1.11082625574244e-13, 1.60571405581474e-14, 1.50442518642114e-15, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 7.89043545250869e-16, 3.55924947140632e-15, 1.04421086204378e-14, 1.99104938996080e-14, 2.46874904599223e-14, 1.99104938996080e-14, 1.04421086204378e-14, 3.55924947140632e-15, 7.89043545250869e-16, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18, 3.04563406744697e-18
        ];
        this.logKernel = new Float32Array(logKernel);
        this.logKernelTex = new tgl.Texture(dim, dim, 1, true, false, true, this.logKernel);

        this.timeVector = new Float32Array(linspace(0.0, this.numIntervals * this.deltaT, this.numIntervals));
        this.timeVectorTex = new tgl.Texture(this.numIntervals, 1, 1, true, false, true, this.timeVector);
        this.wl = 0.02;
        this.sigma = 0.02;

        this.filterType = 'none';
        this.computePFFilter();

        this.instant = 0;
        this.playing = false;
        this.usePhase = false;
        this.addModules = true;
        this.showGeometry = false;
        this.createSceneVBOs();

        this.timerExt = this.gl.getExtension('EXT_disjoint_timer_query');
        if (this.timerExt) {
            this.renderQueries = [];
            this.nlosQueries = [];
            this.renderMeasures = [];
            this.nlosMeasures = [];
        }

        this.frameTimestamps = [];
        this.totalFPS = 0;
    }

    Renderer.prototype.scene2canvas = function (pos) {
        var result = [0, 0];
        result[0] = pos[0] / (2 * this.aspect) + 0.5;
        result[1] = 0.5 - pos[1] / 2;
        result[0] *= this.width;
        result[1] *= this.height;
        return result;
    }

    Renderer.prototype.createSceneVBOs = function () {
        this.cameraVBO = new tgl.VertexBuffer();
        this.cameraVBO.addAttribute("Position", 2, this.gl.FLOAT, false);
        this.cameraVBO.init(8);
        var vboData = new Float32Array(8 * 2);
        vboData[0] = 0.0;
        vboData[1] = 0.05;
        vboData[2] = 0.0;
        vboData[3] = -0.05;
        vboData[4] = -0.05;
        vboData[5] = -0.025;
        vboData[6] = -0.05;
        vboData[7] = -0.05;
        vboData[8] = -0.175;
        vboData[9] = -0.05;
        vboData[10] = -0.175;
        vboData[11] = 0.05;
        vboData[12] = -0.05;
        vboData[13] = 0.05;
        vboData[14] = -0.05;
        vboData[15] = 0.025;
        this.cameraVBO.copy(vboData);

        this.sceneVBOs = [];
        var i = 0;

        // Line
        this.sceneVBOs.push(new tgl.VertexBuffer());
        this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        this.sceneVBOs[i].init(4);
        vboData = new Float32Array(4 * 2);
        addRelayWallVertices(vboData, this.aspect);
        vboData[4] = 0.0;
        vboData[5] = 0.2;
        vboData[6] = 0.0;
        vboData[7] = -0.2;
        this.sceneVBOs[i].copy(vboData);

        // Circle
        i++;
        this.sceneVBOs.push(new tgl.VertexBuffer());
        this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        var N = 32; // Draw using 32 segments
        this.sceneVBOs[i].init(2 + N * 2);
        vboData = new Float32Array((2 + N * 2) * 2);
        addRelayWallVertices(vboData, this.aspect);
        // center (-0.95, 0.25)
        // radius 0.4
        var angle = 0;
        for (var j = 0; j < N; j++) {
            vboData[4 + 4 * j] = (-0.95 + 0.4 * Math.cos(angle)) / this.aspect;
            vboData[5 + 4 * j] = 0.25 + 0.4 * Math.sin(angle);
            angle += 2 * Math.PI / N;
            vboData[6 + 4 * j] = (-0.95 + 0.4 * Math.cos(angle)) / this.aspect;
            vboData[7 + 4 * j] = 0.25 + 0.4 * Math.sin(angle);
        }
        this.sceneVBOs[i].copy(vboData);

        // Box
        i++;
        this.sceneVBOs.push(new tgl.VertexBuffer());
        this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        this.sceneVBOs[i].init(10);
        var vboData = new Float32Array(10 * 2);
        addRelayWallVertices(vboData, this.aspect);
        vboData[4] = 0.0;
        vboData[5] = 0.2;
        vboData[6] = 0.0;
        vboData[7] = -0.2;
        vboData[8] = 0.0;
        vboData[9] = -0.2;
        vboData[10] = -0.2 / this.aspect;
        vboData[11] = -0.2;
        vboData[12] = -0.2 / this.aspect;
        vboData[13] = -0.2;
        vboData[14] = -0.2 / this.aspect;
        vboData[15] = 0.2;
        vboData[16] = -0.2 / this.aspect;
        vboData[17] = 0.2;
        vboData[18] = 0.0;
        vboData[19] = 0.2;
        this.sceneVBOs[i].copy(vboData);

        // Visibility test
        i++;
        this.sceneVBOs.push(new tgl.VertexBuffer());
        this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        this.sceneVBOs[i].init(8);
        vboData = new Float32Array(8 * 2);
        addRelayWallVertices(vboData, this.aspect);
        vboData[4] = 0.0;
        vboData[5] = 0.2;
        vboData[6] = 0.0;
        vboData[7] = -0.2;
        vboData[8] = 0.2 / this.aspect;
        vboData[9] = 0.54641;
        vboData[10] = 0.0;
        vboData[11] = 0.2;
        vboData[12] = 0.0;
        vboData[13] = -0.2;
        vboData[14] = -0.2 / this.aspect;
        vboData[15] = -0.54641;
        this.sceneVBOs[i].copy(vboData);

        // Virtual mirror
        i++;
        this.sceneVBOs.push(new tgl.VertexBuffer());
        this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        this.sceneVBOs[i].init(4);
        vboData = new Float32Array(4 * 2);
        addRelayWallVertices(vboData, this.aspect);
        vboData[4] = 0.4 / this.aspect;
        vboData[5] = 0.2;
        vboData[6] = 0.4 / this.aspect;
        vboData[7] = -0.2;
        this.sceneVBOs[i].copy(vboData);

        // Virtual mirror 2
        // i++;
        // this.sceneVBOs.push(new tgl.VertexBuffer());
        // this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        // this.sceneVBOs[i].init(6);
        // vboData = new Float32Array(6 * 2);
        // vboData[0] = 1.2 / this.aspect;
        // vboData[1] = -1.0;
        // vboData[2] = 1.2 / this.aspect;
        // vboData[3] = 0.0;
        // vboData[4] = 0.3 / this.aspect;
        // vboData[5] = -0.2;
        // vboData[6] = 0.5 / this.aspect;
        // vboData[7] = -0.8;
        // vboData[8] = -0.1 / this.aspect;
        // vboData[9] = 0.1;
        // vboData[10] = 1.3 / this.aspect;
        // vboData[11] = 0.1;
        // this.sceneVBOs[i].copy(vboData);

        // Rotated segment
        i++;
        this.sceneVBOs.push(new tgl.VertexBuffer());
        this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        this.sceneVBOs[i].init(4);
        vboData = new Float32Array(4 * 2);
        addRelayWallVertices(vboData, this.aspect);
        vboData[4] = 0.5355 / this.aspect;
        vboData[5] = 0.2349;
        vboData[6] = 0.3645 / this.aspect;
        vboData[7] = -0.2349;
        this.sceneVBOs[i].copy(vboData);

        // Second corner
        // i++;
        // this.sceneVBOs.push(new tgl.VertexBuffer());
        // this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        // this.sceneVBOs[i].init(6);
        // vboData = new Float32Array(6 * 2);
        // vboData[0] = 1.2 / this.aspect;
        // vboData[1] = -1.0;
        // vboData[2] = 1.2 / this.aspect;
        // vboData[3] = -0.2;
        // vboData[4] = 0.4 / this.aspect;
        // vboData[5] = -0.6;
        // vboData[6] = 0.4 / this.aspect;
        // vboData[7] = 0.2;
        // vboData[8] = 1.2 / this.aspect;
        // vboData[9] = 1.0;
        // vboData[10] = 1.6 / this.aspect;
        // vboData[11] = 0.6;
        // this.sceneVBOs[i].copy(vboData);

        // Second corner target
        // i++;
        // this.sceneVBOs.push(new tgl.VertexBuffer());
        // this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        // this.sceneVBOs[i].init(4);
        // vboData = new Float32Array(4 * 2);
        // vboData[0] = 1.2 / this.aspect;
        // vboData[1] = -1.0;
        // vboData[2] = 1.2 / this.aspect;
        // vboData[3] = -0.2;
        // vboData[4] = -0.4 / this.aspect;
        // vboData[5] = 1.0;
        // vboData[6] = -0.8 / this.aspect;
        // vboData[7] = 0.6;
        // this.sceneVBOs[i].copy(vboData);

        // Two boxes
        i++;
        this.sceneVBOs.push(new tgl.VertexBuffer());
        this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        this.sceneVBOs[i].init(18);
        vboData = new Float32Array(18 * 2);
        addRelayWallVertices(vboData, this.aspect);
        // First box
        vboData[4] = 0.125 / this.aspect;
        vboData[5] = 0.1;
        vboData[6] = 0.125 / this.aspect;
        vboData[7] = 0.4;
        vboData[8] = 0.125 / this.aspect;
        vboData[9] = 0.4;
        vboData[10] = 0.25 / this.aspect;
        vboData[11] = 0.4;
        vboData[12] = 0.25 / this.aspect;
        vboData[13] = 0.4;
        vboData[14] = 0.25 / this.aspect;
        vboData[15] = 0.1;
        vboData[16] = 0.25 / this.aspect;
        vboData[17] = 0.1;
        vboData[18] = 0.125 / this.aspect;
        vboData[19] = 0.1;
        // Second box
        vboData[20] = -0.325 / this.aspect;
        vboData[21] = -0.25;
        vboData[22] = -0.25 / this.aspect;
        vboData[23] = -0.5;
        vboData[24] = -0.25 / this.aspect;
        vboData[25] = -0.5;
        vboData[26] = -0.325 / this.aspect;
        vboData[27] = -0.75;
        vboData[28] = -0.325 / this.aspect;
        vboData[29] = -0.75;
        vboData[30] = -0.575 / this.aspect;
        vboData[31] = -0.325;
        vboData[32] = -0.575 / this.aspect;
        vboData[33] = -0.325;
        vboData[34] = -0.325 / this.aspect;
        vboData[35] = -0.25;
        this.sceneVBOs[i].copy(vboData);

        // Triangle
        // i++;
        // this.sceneVBOs.push(new tgl.VertexBuffer());
        // this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        // this.sceneVBOs[i].init(8);
        // vboData = new Float32Array(8 * 2);
        // addRelayWallVertices(vboData, this.aspect);
        // vboData[4] = 0.0;
        // vboData[5] = 0.4;
        // vboData[6] = 0.2 / this.aspect;
        // vboData[7] = 0.0;
        // vboData[8] = 0.2 / this.aspect;
        // vboData[9] = 0.0;
        // vboData[10] = 0.0;
        // vboData[11] = -0.4;
        // vboData[12] = 0.0;
        // vboData[13] = -0.4;
        // vboData[14] = 0.0;
        // vboData[15] = 0.4;
        // this.sceneVBOs[i].copy(vboData);

        // bunny_vertices.txt
        // i++;
        // this.sceneVBOs.push(new tgl.VertexBuffer());
        // this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        // this.sceneVBOs[i].init(136);
        // vboData = new Float32Array(136 * 2);
        // addRelayWallVertices(vboData, this.aspect);
        // vboData[4] = 0.61 / this.aspect;
        // vboData[5] = 0.08;
        // vboData[6] = 0.61 / this.aspect;
        // vboData[7] = 0.1;
        // vboData[8] = 0.61 / this.aspect;
        // vboData[9] = 0.1;
        // vboData[10] = 0.615 / this.aspect;
        // vboData[11] = 0.15;
        // vboData[12] = 0.615 / this.aspect;
        // vboData[13] = 0.15;
        // vboData[14] = 0.605 / this.aspect;
        // vboData[15] = 0.165;
        // vboData[16] = 0.605 / this.aspect;
        // vboData[17] = 0.165;
        // vboData[18] = 0.48 / this.aspect;
        // vboData[19] = 0.2;
        // vboData[20] = 0.48 / this.aspect;
        // vboData[21] = 0.2;
        // vboData[22] = 0.3999999999999999 / this.aspect;
        // vboData[23] = 0.25;
        // vboData[24] = 0.3999999999999999 / this.aspect;
        // vboData[25] = 0.25;
        // vboData[26] = 0.38 / this.aspect;
        // vboData[27] = 0.32;
        // vboData[28] = 0.38 / this.aspect;
        // vboData[29] = 0.32;
        // vboData[30] = 0.3899999999999999 / this.aspect;
        // vboData[31] = 0.36;
        // vboData[32] = 0.3899999999999999 / this.aspect;
        // vboData[33] = 0.36;
        // vboData[34] = 0.4099999999999999 / this.aspect;
        // vboData[35] = 0.37;
        // vboData[36] = 0.4099999999999999 / this.aspect;
        // vboData[37] = 0.37;
        // vboData[38] = 0.49 / this.aspect;
        // vboData[39] = 0.32;
        // vboData[40] = 0.49 / this.aspect;
        // vboData[41] = 0.32;
        // vboData[42] = 0.5499999999999999 / this.aspect;
        // vboData[43] = 0.3;
        // vboData[44] = 0.5499999999999999 / this.aspect;
        // vboData[45] = 0.3;
        // vboData[46] = 0.5299999999999999 / this.aspect;
        // vboData[47] = 0.32;
        // vboData[48] = 0.5299999999999999 / this.aspect;
        // vboData[49] = 0.32;
        // vboData[50] = 0.5199999999999999 / this.aspect;
        // vboData[51] = 0.35;
        // vboData[52] = 0.5199999999999999 / this.aspect;
        // vboData[53] = 0.35;
        // vboData[54] = 0.5299999999999999 / this.aspect;
        // vboData[55] = 0.39;
        // vboData[56] = 0.5299999999999999 / this.aspect;
        // vboData[57] = 0.39;
        // vboData[58] = 0.5499999999999999 / this.aspect;
        // vboData[59] = 0.4;
        // vboData[60] = 0.5499999999999999 / this.aspect;
        // vboData[61] = 0.4;
        // vboData[62] = 0.6 / this.aspect;
        // vboData[63] = 0.38;
        // vboData[64] = 0.6 / this.aspect;
        // vboData[65] = 0.38;
        // vboData[66] = 0.6599999999999999 / this.aspect;
        // vboData[67] = 0.3;
        // vboData[68] = 0.6599999999999999 / this.aspect;
        // vboData[69] = 0.3;
        // vboData[70] = 0.69 / this.aspect;
        // vboData[71] = 0.24;
        // vboData[72] = 0.69 / this.aspect;
        // vboData[73] = 0.24;
        // vboData[74] = 0.75 / this.aspect;
        // vboData[75] = 0.24;
        // vboData[76] = 0.75 / this.aspect;
        // vboData[77] = 0.24;
        // vboData[78] = 0.7999999999999999 / this.aspect;
        // vboData[79] = 0.22;
        // vboData[80] = 0.7999999999999999 / this.aspect;
        // vboData[81] = 0.22;
        // vboData[82] = 0.82 / this.aspect;
        // vboData[83] = 0.2;
        // vboData[84] = 0.82 / this.aspect;
        // vboData[85] = 0.2;
        // vboData[86] = 0.85 / this.aspect;
        // vboData[87] = 0.16;
        // vboData[88] = 0.85 / this.aspect;
        // vboData[89] = 0.16;
        // vboData[90] = 0.8699999999999999 / this.aspect;
        // vboData[91] = 0.125;
        // vboData[92] = 0.8699999999999999 / this.aspect;
        // vboData[93] = 0.125;
        // vboData[94] = 0.875 / this.aspect;
        // vboData[95] = 0.1;
        // vboData[96] = 0.875 / this.aspect;
        // vboData[97] = 0.1;
        // vboData[98] = 0.8699999999999999 / this.aspect;
        // vboData[99] = 0.08;
        // vboData[100] = 0.8699999999999999 / this.aspect;
        // vboData[101] = 0.08;
        // vboData[102] = 0.8799999999999999 / this.aspect;
        // vboData[103] = 0.06;
        // vboData[104] = 0.8799999999999999 / this.aspect;
        // vboData[105] = 0.06;
        // vboData[106] = 0.8699999999999999 / this.aspect;
        // vboData[107] = 0.04;
        // vboData[108] = 0.8699999999999999 / this.aspect;
        // vboData[109] = 0.04;
        // vboData[110] = 0.8599999999999999 / this.aspect;
        // vboData[111] = 0.02;
        // vboData[112] = 0.8599999999999999 / this.aspect;
        // vboData[113] = 0.02;
        // vboData[114] = 0.84 / this.aspect;
        // vboData[115] = 0.0;
        // vboData[116] = 0.84 / this.aspect;
        // vboData[117] = 0.0;
        // vboData[118] = 0.835 / this.aspect;
        // vboData[119] = -0.005;
        // vboData[120] = 0.835 / this.aspect;
        // vboData[121] = -0.005;
        // vboData[122] = 0.838 / this.aspect;
        // vboData[123] = -0.01;
        // vboData[124] = 0.838 / this.aspect;
        // vboData[125] = -0.01;
        // vboData[126] = 0.838 / this.aspect;
        // vboData[127] = -0.02;
        // vboData[128] = 0.838 / this.aspect;
        // vboData[129] = -0.02;
        // vboData[130] = 0.847 / this.aspect;
        // vboData[131] = -0.03;
        // vboData[132] = 0.847 / this.aspect;
        // vboData[133] = -0.03;
        // vboData[134] = 0.853 / this.aspect;
        // vboData[135] = -0.045;
        // vboData[136] = 0.853 / this.aspect;
        // vboData[137] = -0.045;
        // vboData[138] = 0.865 / this.aspect;
        // vboData[139] = -0.05;
        // vboData[140] = 0.865 / this.aspect;
        // vboData[141] = -0.05;
        // vboData[142] = 0.8699999999999999 / this.aspect;
        // vboData[143] = -0.06;
        // vboData[144] = 0.8699999999999999 / this.aspect;
        // vboData[145] = -0.06;
        // vboData[146] = 0.8799999999999999 / this.aspect;
        // vboData[147] = -0.07;
        // vboData[148] = 0.8799999999999999 / this.aspect;
        // vboData[149] = -0.07;
        // vboData[150] = 0.8899999999999999 / this.aspect;
        // vboData[151] = -0.087;
        // vboData[152] = 0.8899999999999999 / this.aspect;
        // vboData[153] = -0.087;
        // vboData[154] = 0.8919999999999999 / this.aspect;
        // vboData[155] = -0.1;
        // vboData[156] = 0.8919999999999999 / this.aspect;
        // vboData[157] = -0.1;
        // vboData[158] = 0.895 / this.aspect;
        // vboData[159] = -0.135;
        // vboData[160] = 0.895 / this.aspect;
        // vboData[161] = -0.135;
        // vboData[162] = 0.8979999999999999 / this.aspect;
        // vboData[163] = -0.137;
        // vboData[164] = 0.8979999999999999 / this.aspect;
        // vboData[165] = -0.137;
        // vboData[166] = 0.8979999999999999 / this.aspect;
        // vboData[167] = -0.15;
        // vboData[168] = 0.8979999999999999 / this.aspect;
        // vboData[169] = -0.15;
        // vboData[170] = 0.8999999999999999 / this.aspect;
        // vboData[171] = -0.17;
        // vboData[172] = 0.8999999999999999 / this.aspect;
        // vboData[173] = -0.17;
        // vboData[174] = 0.9019999999999999 / this.aspect;
        // vboData[175] = -0.18;
        // vboData[176] = 0.9019999999999999 / this.aspect;
        // vboData[177] = -0.18;
        // vboData[178] = 0.8999999999999999 / this.aspect;
        // vboData[179] = -0.186;
        // vboData[180] = 0.8999999999999999 / this.aspect;
        // vboData[181] = -0.186;
        // vboData[182] = 0.8979999999999999 / this.aspect;
        // vboData[183] = -0.192;
        // vboData[184] = 0.8979999999999999 / this.aspect;
        // vboData[185] = -0.192;
        // vboData[186] = 0.8899999999999999 / this.aspect;
        // vboData[187] = -0.21;
        // vboData[188] = 0.8899999999999999 / this.aspect;
        // vboData[189] = -0.21;
        // vboData[190] = 0.8899999999999999 / this.aspect;
        // vboData[191] = -0.22;
        // vboData[192] = 0.8899999999999999 / this.aspect;
        // vboData[193] = -0.22;
        // vboData[194] = 0.891 / this.aspect;
        // vboData[195] = -0.24;
        // vboData[196] = 0.891 / this.aspect;
        // vboData[197] = -0.24;
        // vboData[198] = 0.8799999999999999 / this.aspect;
        // vboData[199] = -0.265;
        // vboData[200] = 0.8799999999999999 / this.aspect;
        // vboData[201] = -0.265;
        // vboData[202] = 0.883 / this.aspect;
        // vboData[203] = -0.28;
        // vboData[204] = 0.883 / this.aspect;
        // vboData[205] = -0.28;
        // vboData[206] = 0.883 / this.aspect;
        // vboData[207] = -0.29;
        // vboData[208] = 0.883 / this.aspect;
        // vboData[209] = -0.29;
        // vboData[210] = 0.875 / this.aspect;
        // vboData[211] = -0.3;
        // vboData[212] = 0.875 / this.aspect;
        // vboData[213] = -0.3;
        // vboData[214] = 0.8599999999999999 / this.aspect;
        // vboData[215] = -0.32;
        // vboData[216] = 0.8599999999999999 / this.aspect;
        // vboData[217] = -0.32;
        // vboData[218] = 0.875 / this.aspect;
        // vboData[219] = -0.33;
        // vboData[220] = 0.875 / this.aspect;
        // vboData[221] = -0.33;
        // vboData[222] = 0.879 / this.aspect;
        // vboData[223] = -0.34;
        // vboData[224] = 0.879 / this.aspect;
        // vboData[225] = -0.34;
        // vboData[226] = 0.8799999999999999 / this.aspect;
        // vboData[227] = -0.35;
        // vboData[228] = 0.8799999999999999 / this.aspect;
        // vboData[229] = -0.35;
        // vboData[230] = 0.8799999999999999 / this.aspect;
        // vboData[231] = -0.375;
        // vboData[232] = 0.8799999999999999 / this.aspect;
        // vboData[233] = -0.375;
        // vboData[234] = 0.8779999999999999 / this.aspect;
        // vboData[235] = -0.38;
        // vboData[236] = 0.8779999999999999 / this.aspect;
        // vboData[237] = -0.38;
        // vboData[238] = 0.8739999999999999 / this.aspect;
        // vboData[239] = -0.38;
        // vboData[240] = 0.8739999999999999 / this.aspect;
        // vboData[241] = -0.38;
        // vboData[242] = 0.873 / this.aspect;
        // vboData[243] = -0.383;
        // vboData[244] = 0.873 / this.aspect;
        // vboData[245] = -0.383;
        // vboData[246] = 0.8599999999999999 / this.aspect;
        // vboData[247] = -0.387;
        // vboData[248] = 0.8599999999999999 / this.aspect;
        // vboData[249] = -0.387;
        // vboData[250] = 0.845 / this.aspect;
        // vboData[251] = -0.387;
        // vboData[252] = 0.845 / this.aspect;
        // vboData[253] = -0.387;
        // vboData[254] = 0.835 / this.aspect;
        // vboData[255] = -0.39;
        // vboData[256] = 0.835 / this.aspect;
        // vboData[257] = -0.39;
        // vboData[258] = 0.76 / this.aspect;
        // vboData[259] = -0.395;
        // vboData[260] = 0.76 / this.aspect;
        // vboData[261] = -0.395;
        // vboData[262] = 0.725 / this.aspect;
        // vboData[263] = -0.398;
        // vboData[264] = 0.725 / this.aspect;
        // vboData[265] = -0.398;
        // vboData[266] = 0.71 / this.aspect;
        // vboData[267] = -0.396;
        // vboData[268] = 0.71 / this.aspect;
        // vboData[269] = -0.396;
        // vboData[270] = 0.6399999999999999 / this.aspect;
        // vboData[271] = -0.398;
        // this.sceneVBOs[i].copy(vboData);

        // singleLineBunny.obj
        i++;
        this.sceneVBOs.push(new tgl.VertexBuffer());
        this.sceneVBOs[i].addAttribute("Position", 2, this.gl.FLOAT, false);
        this.sceneVBOs[i].init(1560);
        vboData = new Float32Array(1560 * 2);
        addRelayWallVertices(vboData, this.aspect);
        vboData[4] = 0.8206739999999999 / this.aspect;
        vboData[5] = 0.198216;
        vboData[6] = 0.815566 / this.aspect;
        vboData[7] = 0.203342;
        vboData[8] = 0.574719 / this.aspect;
        vboData[9] = -0.39353;
        vboData[10] = 0.576287 / this.aspect;
        vboData[11] = -0.393524;
        vboData[12] = 0.815566 / this.aspect;
        vboData[13] = 0.203342;
        vboData[14] = 0.810534 / this.aspect;
        vboData[15] = 0.208006;
        vboData[16] = 0.478313 / this.aspect;
        vboData[17] = -0.11591;
        vboData[18] = 0.48021899999999995 / this.aspect;
        vboData[19] = -0.110733;
        vboData[20] = 0.431303 / this.aspect;
        vboData[21] = 0.223654;
        vboData[22] = 0.429651 / this.aspect;
        vboData[23] = 0.224844;
        vboData[24] = 0.7673829999999999 / this.aspect;
        vboData[25] = -0.392205;
        vboData[26] = 0.766969 / this.aspect;
        vboData[27] = -0.392324;
        vboData[28] = 0.523787 / this.aspect;
        vboData[29] = -0.331268;
        vboData[30] = 0.523708 / this.aspect;
        vboData[31] = -0.331167;
        vboData[32] = 0.858198 / this.aspect;
        vboData[33] = -0.047289;
        vboData[34] = 0.86227 / this.aspect;
        vboData[35] = -0.049948;
        vboData[36] = 0.603587 / this.aspect;
        vboData[37] = -0.395019;
        vboData[38] = 0.6040589999999999 / this.aspect;
        vboData[39] = -0.395049;
        vboData[40] = 0.894415 / this.aspect;
        vboData[41] = -0.12157;
        vboData[42] = 0.8936089999999999 / this.aspect;
        vboData[43] = -0.114564;
        vboData[44] = 0.6040589999999999 / this.aspect;
        vboData[45] = -0.395049;
        vboData[46] = 0.6052109999999999 / this.aspect;
        vboData[47] = -0.395277;
        vboData[48] = 0.8763259999999999 / this.aspect;
        vboData[49] = 0.0736;
        vboData[50] = 0.875251 / this.aspect;
        vboData[51] = 0.080882;
        vboData[52] = 0.8250519999999999 / this.aspect;
        vboData[53] = -0.390514;
        vboData[54] = 0.821863 / this.aspect;
        vboData[55] = -0.390445;
        vboData[56] = 0.609435 / this.aspect;
        vboData[57] = 0.130471;
        vboData[58] = 0.6103179999999999 / this.aspect;
        vboData[59] = 0.138074;
        vboData[60] = 0.897988 / this.aspect;
        vboData[61] = -0.156566;
        vboData[62] = 0.897009 / this.aspect;
        vboData[63] = -0.153703;
        vboData[64] = 0.7423219999999999 / this.aspect;
        vboData[65] = 0.237806;
        vboData[66] = 0.7439359999999999 / this.aspect;
        vboData[67] = 0.237578;
        vboData[68] = 0.379108 / this.aspect;
        vboData[69] = 0.334827;
        vboData[70] = 0.379108 / this.aspect;
        vboData[71] = 0.334794;
        vboData[72] = 0.5299659999999999 / this.aspect;
        vboData[73] = -0.39328;
        vboData[74] = 0.5297879999999999 / this.aspect;
        vboData[75] = -0.393263;
        vboData[76] = 0.565152 / this.aspect;
        vboData[77] = 0.034239;
        vboData[78] = 0.568762 / this.aspect;
        vboData[79] = 0.039782;
        vboData[80] = 0.50708 / this.aspect;
        vboData[81] = -0.067216;
        vboData[82] = 0.5100429999999999 / this.aspect;
        vboData[83] = -0.065493;
        vboData[84] = 0.858198 / this.aspect;
        vboData[85] = -0.047289;
        vboData[86] = 0.8553459999999999 / this.aspect;
        vboData[87] = -0.046413;
        vboData[88] = 0.8785529999999999 / this.aspect;
        vboData[89] = -0.34331;
        vboData[90] = 0.879782 / this.aspect;
        vboData[91] = -0.350252;
        vboData[92] = 0.580668 / this.aspect;
        vboData[93] = -0.393746;
        vboData[94] = 0.576967 / this.aspect;
        vboData[95] = -0.393558;
        vboData[96] = 0.7673829999999999 / this.aspect;
        vboData[97] = -0.392205;
        vboData[98] = 0.7673989999999999 / this.aspect;
        vboData[99] = -0.392204;
        vboData[100] = 0.528434 / this.aspect;
        vboData[101] = 0.321658;
        vboData[102] = 0.5323509999999999 / this.aspect;
        vboData[103] = 0.316382;
        vboData[104] = 0.44313199999999997 / this.aspect;
        vboData[105] = 0.34892;
        vboData[106] = 0.438446 / this.aspect;
        vboData[107] = 0.35271;
        vboData[108] = 0.540993 / this.aspect;
        vboData[109] = -0.03681;
        vboData[110] = 0.540744 / this.aspect;
        vboData[111] = -0.045676;
        vboData[112] = 0.766097 / this.aspect;
        vboData[113] = -0.392574;
        vboData[114] = 0.766905 / this.aspect;
        vboData[115] = -0.392346;
        vboData[116] = 0.817371 / this.aspect;
        vboData[117] = -0.390734;
        vboData[118] = 0.818827 / this.aspect;
        vboData[119] = -0.390556;
        vboData[120] = 0.431994 / this.aspect;
        vboData[121] = 0.357087;
        vboData[122] = 0.433453 / this.aspect;
        vboData[123] = 0.356124;
        vboData[124] = 0.553245 / this.aspect;
        vboData[125] = 0.29435;
        vboData[126] = 0.554781 / this.aspect;
        vboData[127] = 0.293478;
        vboData[128] = 0.8096509999999999 / this.aspect;
        vboData[129] = -0.390906;
        vboData[130] = 0.811364 / this.aspect;
        vboData[131] = -0.390814;
        vboData[132] = 0.44985299999999995 / this.aspect;
        vboData[133] = 0.344915;
        vboData[134] = 0.45236699999999996 / this.aspect;
        vboData[135] = 0.342801;
        vboData[136] = 0.469441 / this.aspect;
        vboData[137] = 0.332418;
        vboData[138] = 0.471055 / this.aspect;
        vboData[139] = 0.331682;
        vboData[140] = 0.540993 / this.aspect;
        vboData[141] = -0.03681;
        vboData[142] = 0.5424859999999999 / this.aspect;
        vboData[143] = -0.03175;
        vboData[144] = 0.553245 / this.aspect;
        vboData[145] = 0.29435;
        vboData[146] = 0.548137 / this.aspect;
        vboData[147] = 0.297074;
        vboData[148] = 0.891573 / this.aspect;
        vboData[149] = -0.23561;
        vboData[150] = 0.8913039999999999 / this.aspect;
        vboData[151] = -0.232274;
        vboData[152] = 0.475086 / this.aspect;
        vboData[153] = -0.14453;
        vboData[154] = 0.4755959999999999 / this.aspect;
        vboData[155] = -0.146364;
        vboData[156] = 0.546716 / this.aspect;
        vboData[157] = 0.298082;
        vboData[158] = 0.548137 / this.aspect;
        vboData[159] = 0.297074;
        vboData[160] = 0.5147219999999999 / this.aspect;
        vboData[161] = 0.312555;
        vboData[162] = 0.5094989999999999 / this.aspect;
        vboData[163] = 0.314078;
        vboData[164] = 0.489259 / this.aspect;
        vboData[165] = 0.322138;
        vboData[166] = 0.493054 / this.aspect;
        vboData[167] = 0.320154;
        vboData[168] = 0.4766229999999999 / this.aspect;
        vboData[169] = -0.181434;
        vboData[170] = 0.47723799999999994 / this.aspect;
        vboData[171] = -0.188713;
        vboData[172] = 0.843143 / this.aspect;
        vboData[173] = -0.386071;
        vboData[174] = 0.8431249999999999 / this.aspect;
        vboData[175] = -0.386072;
        vboData[176] = 0.513389 / this.aspect;
        vboData[177] = -0.063084;
        vboData[178] = 0.513413 / this.aspect;
        vboData[179] = -0.063073;
        vboData[180] = 0.518218 / this.aspect;
        vboData[181] = -0.059718;
        vboData[182] = 0.51791 / this.aspect;
        vboData[183] = -0.059974;
        vboData[184] = 0.54879 / this.aspect;
        vboData[185] = 0.298294;
        vboData[186] = 0.543412 / this.aspect;
        vboData[187] = 0.303896;
        vboData[188] = 0.894261 / this.aspect;
        vboData[189] = -0.199976;
        vboData[190] = 0.897565 / this.aspect;
        vboData[191] = -0.192602;
        vboData[192] = 0.4980549999999999 / this.aspect;
        vboData[193] = -0.076729;
        vboData[194] = 0.5023559999999999 / this.aspect;
        vboData[195] = -0.071696;
        vboData[196] = 0.8528209999999999 / this.aspect;
        vboData[197] = 0.007771;
        vboData[198] = 0.847482 / this.aspect;
        vboData[199] = 0.004782;
        vboData[200] = 0.546716 / this.aspect;
        vboData[201] = 0.298082;
        vboData[202] = 0.541531 / this.aspect;
        vboData[203] = 0.300715;
        vboData[204] = 0.589155 / this.aspect;
        vboData[205] = 0.06539;
        vboData[206] = 0.5941099999999999 / this.aspect;
        vboData[207] = 0.069458;
        vboData[208] = 0.8509769999999999 / this.aspect;
        vboData[209] = -0.036604;
        vboData[210] = 0.850938 / this.aspect;
        vboData[211] = -0.036514;
        vboData[212] = 0.5295099999999999 / this.aspect;
        vboData[213] = -0.052594;
        vboData[214] = 0.524596 / this.aspect;
        vboData[215] = -0.056015;
        vboData[216] = 0.45941699999999996 / this.aspect;
        vboData[217] = 0.206846;
        vboData[218] = 0.4574579999999999 / this.aspect;
        vboData[219] = 0.207959;
        vboData[220] = 0.45941699999999996 / this.aspect;
        vboData[221] = 0.206846;
        vboData[222] = 0.4662529999999999 / this.aspect;
        vboData[223] = 0.203999;
        vboData[224] = 0.59242 / this.aspect;
        vboData[225] = 0.388496;
        vboData[226] = 0.585982 / this.aspect;
        vboData[227] = 0.391856;
        vboData[228] = 0.475086 / this.aspect;
        vboData[229] = -0.14453;
        vboData[230] = 0.4751559999999999 / this.aspect;
        vboData[231] = -0.140198;
        vboData[232] = 0.796132 / this.aspect;
        vboData[233] = -0.391346;
        vboData[234] = 0.8030839999999999 / this.aspect;
        vboData[235] = -0.391357;
        vboData[236] = 0.556279 / this.aspect;
        vboData[237] = 0.014435;
        vboData[238] = 0.5585 / this.aspect;
        vboData[239] = 0.017285;
        vboData[240] = 0.50708 / this.aspect;
        vboData[241] = -0.067216;
        vboData[242] = 0.505234 / this.aspect;
        vboData[243] = -0.069281;
        vboData[244] = 0.513303 / this.aspect;
        vboData[245] = -0.391705;
        vboData[246] = 0.514608 / this.aspect;
        vboData[247] = -0.392258;
        vboData[248] = 0.8250519999999999 / this.aspect;
        vboData[249] = -0.390514;
        vboData[250] = 0.825358 / this.aspect;
        vboData[251] = -0.390431;
        vboData[252] = 0.523211 / this.aspect;
        vboData[253] = 0.381379;
        vboData[254] = 0.5215209999999999 / this.aspect;
        vboData[255] = 0.378716;
        vboData[256] = 0.523787 / this.aspect;
        vboData[257] = -0.331268;
        vboData[258] = 0.524107 / this.aspect;
        vboData[259] = -0.331405;
        vboData[260] = 0.514377 / this.aspect;
        vboData[261] = -0.362104;
        vboData[262] = 0.5142399999999999 / this.aspect;
        vboData[263] = -0.365158;
        vboData[264] = 0.513303 / this.aspect;
        vboData[265] = -0.391705;
        vboData[266] = 0.5111399999999999 / this.aspect;
        vboData[267] = -0.384584;
        vboData[268] = 0.523864 / this.aspect;
        vboData[269] = -0.332673;
        vboData[270] = 0.524011 / this.aspect;
        vboData[271] = -0.332309;
        vboData[272] = 0.607116 / this.aspect;
        vboData[273] = -0.395373;
        vboData[274] = 0.607618 / this.aspect;
        vboData[275] = -0.395455;
        vboData[276] = 0.5323509999999999 / this.aspect;
        vboData[277] = 0.316382;
        vboData[278] = 0.5341349999999999 / this.aspect;
        vboData[279] = 0.314302;
        vboData[280] = 0.6454529999999999 / this.aspect;
        vboData[281] = -0.396474;
        vboData[282] = 0.645602 / this.aspect;
        vboData[283] = -0.396475;
        vboData[284] = 0.523941 / this.aspect;
        vboData[285] = -0.056344;
        vboData[286] = 0.524596 / this.aspect;
        vboData[287] = -0.056015;
        vboData[288] = 0.5961449999999999 / this.aspect;
        vboData[289] = -0.394471;
        vboData[290] = 0.5959409999999999 / this.aspect;
        vboData[291] = -0.394428;
        vboData[292] = 0.8829309999999999 / this.aspect;
        vboData[293] = -0.071796;
        vboData[294] = 0.879222 / this.aspect;
        vboData[295] = -0.066635;
        vboData[296] = 0.704684 / this.aspect;
        vboData[297] = -0.395058;
        vboData[298] = 0.708739 / this.aspect;
        vboData[299] = -0.395012;
        vboData[300] = 0.647208 / this.aspect;
        vboData[301] = 0.319839;
        vboData[302] = 0.646917 / this.aspect;
        vboData[303] = 0.320197;
        vboData[304] = 0.8829309999999999 / this.aspect;
        vboData[305] = -0.071796;
        vboData[306] = 0.8842939999999999 / this.aspect;
        vboData[307] = -0.074425;
        vboData[308] = 0.552055 / this.aspect;
        vboData[309] = 0.401813;
        vboData[310] = 0.5494249999999999 / this.aspect;
        vboData[311] = 0.400445;
        vboData[312] = 0.5469849999999999 / this.aspect;
        vboData[313] = -0.016876;
        vboData[314] = 0.5471389999999999 / this.aspect;
        vboData[315] = -0.009413;
        vboData[316] = 0.6103179999999999 / this.aspect;
        vboData[317] = -0.395898;
        vboData[318] = 0.616713 / this.aspect;
        vboData[319] = -0.395954;
        vboData[320] = 0.722428 / this.aspect;
        vboData[321] = 0.237835;
        vboData[322] = 0.720815 / this.aspect;
        vboData[323] = 0.237831;
        vboData[324] = 0.863065 / this.aspect;
        vboData[325] = -0.317053;
        vboData[326] = 0.8637269999999999 / this.aspect;
        vboData[327] = -0.316031;
        vboData[328] = 0.535885 / this.aspect;
        vboData[329] = -0.050058;
        vboData[330] = 0.5372509999999999 / this.aspect;
        vboData[331] = -0.049286;
        vboData[332] = 0.580668 / this.aspect;
        vboData[333] = -0.393746;
        vboData[334] = 0.5826439999999999 / this.aspect;
        vboData[335] = -0.393763;
        vboData[336] = 0.509597 / this.aspect;
        vboData[337] = -0.305223;
        vboData[338] = 0.5096849999999999 / this.aspect;
        vboData[339] = -0.305385;
        vboData[340] = 0.8364469999999999 / this.aspect;
        vboData[341] = -0.015215;
        vboData[342] = 0.836452 / this.aspect;
        vboData[343] = -0.01531;
        vboData[344] = 0.817371 / this.aspect;
        vboData[345] = -0.390734;
        vboData[346] = 0.8154539999999999 / this.aspect;
        vboData[347] = -0.390718;
        vboData[348] = 0.489259 / this.aspect;
        vboData[349] = 0.322138;
        vboData[350] = 0.487201 / this.aspect;
        vboData[351] = 0.322787;
        vboData[352] = 0.865034 / this.aspect;
        vboData[353] = -0.051302;
        vboData[354] = 0.870142 / this.aspect;
        vboData[355] = -0.055548;
        vboData[356] = 0.431303 / this.aspect;
        vboData[357] = 0.223654;
        vboData[358] = 0.437179 / this.aspect;
        vboData[359] = 0.21985;
        vboData[360] = 0.518218 / this.aspect;
        vboData[361] = -0.059718;
        vboData[362] = 0.5185909999999999 / this.aspect;
        vboData[363] = -0.059539;
        vboData[364] = 0.894415 / this.aspect;
        vboData[365] = -0.12157;
        vboData[366] = 0.8945179999999999 / this.aspect;
        vboData[367] = -0.123488;
        vboData[368] = 0.8748659999999999 / this.aspect;
        vboData[369] = -0.302374;
        vboData[370] = 0.877831 / this.aspect;
        vboData[371] = -0.297929;
        vboData[372] = 0.8992549999999999 / this.aspect;
        vboData[373] = -0.163616;
        vboData[374] = 0.898928 / this.aspect;
        vboData[375] = -0.162134;
        vboData[376] = 0.8492489999999999 / this.aspect;
        vboData[377] = -0.386014;
        vboData[378] = 0.8496859999999999 / this.aspect;
        vboData[379] = -0.38584;
        vboData[380] = 0.469441 / this.aspect;
        vboData[381] = 0.332418;
        vboData[382] = 0.46499099999999993 / this.aspect;
        vboData[383] = 0.335;
        vboData[384] = 0.8749039999999999 / this.aspect;
        vboData[385] = 0.03733;
        vboData[386] = 0.8748659999999999 / this.aspect;
        vboData[387] = 0.037238;
        vboData[388] = 0.4861869999999999 / this.aspect;
        vboData[389] = -0.239777;
        vboData[390] = 0.486178 / this.aspect;
        vboData[391] = -0.239712;
        vboData[392] = 0.607015 / this.aspect;
        vboData[393] = 0.373355;
        vboData[394] = 0.608706 / this.aspect;
        vboData[395] = 0.372347;
        vboData[396] = 0.5108999999999999 / this.aspect;
        vboData[397] = -0.064873;
        vboData[398] = 0.511478 / this.aspect;
        vboData[399] = -0.064455;
        vboData[400] = 0.514377 / this.aspect;
        vboData[401] = -0.362104;
        vboData[402] = 0.515338 / this.aspect;
        vboData[403] = -0.354822;
        vboData[404] = 0.6111249999999999 / this.aspect;
        vboData[405] = 0.368752;
        vboData[406] = 0.608706 / this.aspect;
        vboData[407] = 0.372347;
        vboData[408] = 0.609435 / this.aspect;
        vboData[409] = 0.130471;
        vboData[410] = 0.609281 / this.aspect;
        vboData[411] = 0.122916;
        vboData[412] = 0.868068 / this.aspect;
        vboData[413] = -0.384886;
        vboData[414] = 0.866073 / this.aspect;
        vboData[415] = -0.385117;
        vboData[416] = 0.8866189999999999 / this.aspect;
        vboData[417] = -0.078754;
        vboData[418] = 0.889653 / this.aspect;
        vboData[419] = -0.085898;
        vboData[420] = 0.6681549999999999 / this.aspect;
        vboData[421] = -0.395772;
        vboData[422] = 0.668296 / this.aspect;
        vboData[423] = -0.395764;
        vboData[424] = 0.515952 / this.aspect;
        vboData[425] = -0.322665;
        vboData[426] = 0.514898 / this.aspect;
        vboData[427] = -0.318372;
        vboData[428] = 0.59242 / this.aspect;
        vboData[429] = 0.168882;
        vboData[430] = 0.590312 / this.aspect;
        vboData[431] = 0.169894;
        vboData[432] = 0.545372 / this.aspect;
        vboData[433] = -0.022257;
        vboData[434] = 0.5468679999999999 / this.aspect;
        vboData[435] = -0.017814;
        vboData[436] = 0.545372 / this.aspect;
        vboData[437] = -0.022257;
        vboData[438] = 0.544161 / this.aspect;
        vboData[439] = -0.026206;
        vboData[440] = 0.776839 / this.aspect;
        vboData[441] = -0.391713;
        vboData[442] = 0.776566 / this.aspect;
        vboData[443] = -0.391698;
        vboData[444] = 0.412033 / this.aspect;
        vboData[445] = 0.241775;
        vboData[446] = 0.40883099999999994 / this.aspect;
        vboData[447] = 0.245267;
        vboData[448] = 0.5396369999999999 / this.aspect;
        vboData[449] = -0.047377;
        vboData[450] = 0.539767 / this.aspect;
        vboData[451] = -0.047351;
        vboData[452] = 0.5396369999999999 / this.aspect;
        vboData[453] = -0.047377;
        vboData[454] = 0.5394359999999999 / this.aspect;
        vboData[455] = -0.047606;
        vboData[456] = 0.6744199999999999 / this.aspect;
        vboData[457] = -0.39551;
        vboData[458] = 0.676653 / this.aspect;
        vboData[459] = -0.395396;
        vboData[460] = 0.7493509999999999 / this.aspect;
        vboData[461] = 0.236883;
        vboData[462] = 0.7509649999999999 / this.aspect;
        vboData[463] = 0.236703;
        vboData[464] = 0.854584 / this.aspect;
        vboData[465] = -0.046098;
        vboData[466] = 0.853691 / this.aspect;
        vboData[467] = -0.045676;
        vboData[468] = 0.5640759999999999 / this.aspect;
        vboData[469] = 0.401994;
        vboData[470] = 0.568031 / this.aspect;
        vboData[471] = 0.399999;
        vboData[472] = 0.6066689999999999 / this.aspect;
        vboData[473] = 0.08505;
        vboData[474] = 0.606055 / this.aspect;
        vboData[475] = 0.092606;
        vboData[476] = 0.521636 / this.aspect;
        vboData[477] = -0.33063;
        vboData[478] = 0.521598 / this.aspect;
        vboData[479] = -0.330586;
        vboData[480] = 0.5108999999999999 / this.aspect;
        vboData[481] = -0.064873;
        vboData[482] = 0.5100429999999999 / this.aspect;
        vboData[483] = -0.065493;
        vboData[484] = 0.529218 / this.aspect;
        vboData[485] = -0.393213;
        vboData[486] = 0.52918 / this.aspect;
        vboData[487] = -0.393211;
        vboData[488] = 0.4810399999999999 / this.aspect;
        vboData[489] = -0.217885;
        vboData[490] = 0.48182499999999995 / this.aspect;
        vboData[491] = -0.222138;
        vboData[492] = 0.5140699999999999 / this.aspect;
        vboData[493] = -0.366529;
        vboData[494] = 0.51311 / this.aspect;
        vboData[495] = -0.375948;
        vboData[496] = 0.873453 / this.aspect;
        vboData[497] = -0.382612;
        vboData[498] = 0.873248 / this.aspect;
        vboData[499] = -0.38262;
        vboData[500] = 0.377764 / this.aspect;
        vboData[501] = 0.320794;
        vboData[502] = 0.378339 / this.aspect;
        vboData[503] = 0.311454;
        vboData[504] = 0.6178159999999999 / this.aspect;
        vboData[505] = -0.395962;
        vboData[506] = 0.6177809999999999 / this.aspect;
        vboData[507] = -0.395956;
        vboData[508] = 0.523211 / this.aspect;
        vboData[509] = 0.381379;
        vboData[510] = 0.5249389999999999 / this.aspect;
        vboData[511] = 0.384071;
        vboData[512] = 0.6103179999999999 / this.aspect;
        vboData[513] = 0.138074;
        vboData[514] = 0.611393 / this.aspect;
        vboData[515] = 0.145582;
        vboData[516] = 0.9002539999999999 / this.aspect;
        vboData[517] = -0.17076;
        vboData[518] = 0.9002539999999999 / this.aspect;
        vboData[519] = -0.17795;
        vboData[520] = 0.388825 / this.aspect;
        vboData[521] = 0.362431;
        vboData[522] = 0.391864 / this.aspect;
        vboData[523] = 0.363565;
        vboData[524] = 0.8352679999999999 / this.aspect;
        vboData[525] = 0.181767;
        vboData[526] = 0.840568 / this.aspect;
        vboData[527] = 0.174486;
        vboData[528] = 0.523134 / this.aspect;
        vboData[529] = -0.331086;
        vboData[530] = 0.523708 / this.aspect;
        vboData[531] = -0.331167;
        vboData[532] = 0.8721779999999999 / this.aspect;
        vboData[533] = -0.383462;
        vboData[534] = 0.8727719999999999 / this.aspect;
        vboData[535] = -0.382995;
        vboData[536] = 0.8820479999999999 / this.aspect;
        vboData[537] = -0.26533;
        vboData[538] = 0.882795 / this.aspect;
        vboData[539] = -0.262113;
        vboData[540] = 0.8764029999999999 / this.aspect;
        vboData[541] = 0.087847;
        vboData[542] = 0.8761589999999999 / this.aspect;
        vboData[543] = 0.08688;
        vboData[544] = 0.4980549999999999 / this.aspect;
        vboData[545] = -0.076729;
        vboData[546] = 0.497718 / this.aspect;
        vboData[547] = -0.077228;
        vboData[548] = 0.6029829999999999 / this.aspect;
        vboData[549] = 0.078466;
        vboData[550] = 0.600283 / this.aspect;
        vboData[551] = 0.074266;
        vboData[552] = 0.653872 / this.aspect;
        vboData[553] = 0.309484;
        vboData[554] = 0.652763 / this.aspect;
        vboData[555] = 0.310916;
        vboData[556] = 0.620112 / this.aspect;
        vboData[557] = 0.358326;
        vboData[558] = 0.621188 / this.aspect;
        vboData[559] = 0.356454;
        vboData[560] = 0.516413 / this.aspect;
        vboData[561] = -0.060976;
        vboData[562] = 0.51791 / this.aspect;
        vboData[563] = -0.059974;
        vboData[564] = 0.853205 / this.aspect;
        vboData[565] = -0.043518;
        vboData[566] = 0.853525 / this.aspect;
        vboData[567] = -0.045308;
        vboData[568] = 0.47646999999999995 / this.aspect;
        vboData[569] = -0.152442;
        vboData[570] = 0.47646999999999995 / this.aspect;
        vboData[571] = -0.152443;
        vboData[572] = 0.6681549999999999 / this.aspect;
        vboData[573] = -0.395772;
        vboData[574] = 0.6680189999999999 / this.aspect;
        vboData[575] = -0.395745;
        vboData[576] = 0.8777469999999999 / this.aspect;
        vboData[577] = -0.340536;
        vboData[578] = 0.877113 / this.aspect;
        vboData[579] = -0.338757;
        vboData[580] = 0.516681 / this.aspect;
        vboData[581] = 0.357586;
        vboData[582] = 0.517489 / this.aspect;
        vboData[583] = 0.365638;
        vboData[584] = 0.581743 / this.aspect;
        vboData[585] = 0.054488;
        vboData[586] = 0.581024 / this.aspect;
        vboData[587] = 0.053354;
        vboData[588] = 0.8399159999999999 / this.aspect;
        vboData[589] = 0.000272;
        vboData[590] = 0.8442209999999999 / this.aspect;
        vboData[591] = 0.00375;
        vboData[592] = 0.6287919999999999 / this.aspect;
        vboData[593] = -0.396634;
        vboData[594] = 0.6214569999999999 / this.aspect;
        vboData[595] = -0.39657;
        vboData[596] = 0.6088199999999999 / this.aspect;
        vboData[597] = 0.115314;
        vboData[598] = 0.609281 / this.aspect;
        vboData[599] = 0.122916;
        vboData[600] = 0.605248 / this.aspect;
        vboData[601] = -0.39548;
        vboData[602] = 0.60666 / this.aspect;
        vboData[603] = -0.395399;
        vboData[604] = 0.8757109999999999 / this.aspect;
        vboData[605] = -0.381342;
        vboData[606] = 0.8741159999999999 / this.aspect;
        vboData[607] = -0.38217;
        vboData[608] = 0.8367789999999999 / this.aspect;
        vboData[609] = -0.018299;
        vboData[610] = 0.8367829999999999 / this.aspect;
        vboData[611] = -0.018415;
        vboData[612] = 0.5394359999999999 / this.aspect;
        vboData[613] = -0.047606;
        vboData[614] = 0.5372509999999999 / this.aspect;
        vboData[615] = -0.049286;
        vboData[616] = 0.8827019999999999 / this.aspect;
        vboData[617] = -0.28708;
        vboData[618] = 0.880166 / this.aspect;
        vboData[619] = -0.294634;
        vboData[620] = 0.45208099999999996 / this.aspect;
        vboData[621] = 0.211982;
        vboData[622] = 0.4574579999999999 / this.aspect;
        vboData[623] = 0.207959;
        vboData[624] = 0.649493 / this.aspect;
        vboData[625] = -0.396722;
        vboData[626] = 0.6484949999999999 / this.aspect;
        vboData[627] = -0.396674;
        vboData[628] = 0.704531 / this.aspect;
        vboData[629] = 0.237066;
        vboData[630] = 0.7007789999999999 / this.aspect;
        vboData[631] = 0.236697;
        vboData[632] = 0.7932509999999999 / this.aspect;
        vboData[633] = -0.391388;
        vboData[634] = 0.788351 / this.aspect;
        vboData[635] = -0.391412;
        vboData[636] = 0.653872 / this.aspect;
        vboData[637] = 0.309484;
        vboData[638] = 0.6555639999999999 / this.aspect;
        vboData[639] = 0.306137;
        vboData[640] = 0.48219199999999995 / this.aspect;
        vboData[641] = -0.225074;
        vboData[642] = 0.4835959999999999 / this.aspect;
        vboData[643] = -0.230126;
        vboData[644] = 0.846675 / this.aspect;
        vboData[645] = -0.029732;
        vboData[646] = 0.8506589999999999 / this.aspect;
        vboData[647] = -0.036096;
        vboData[648] = 0.385022 / this.aspect;
        vboData[649] = 0.284403;
        vboData[650] = 0.387903 / this.aspect;
        vboData[651] = 0.27699;
        vboData[652] = 0.44985299999999995 / this.aspect;
        vboData[653] = 0.344915;
        vboData[654] = 0.44481499999999996 / this.aspect;
        vboData[655] = 0.347601;
        vboData[656] = 0.385022 / this.aspect;
        vboData[657] = 0.284403;
        vboData[658] = 0.3835179999999999 / this.aspect;
        vboData[659] = 0.291126;
        vboData[660] = 0.45208099999999996 / this.aspect;
        vboData[661] = 0.211982;
        vboData[662] = 0.4474349999999999 / this.aspect;
        vboData[663] = 0.214457;
        vboData[664] = 0.4766229999999999 / this.aspect;
        vboData[665] = -0.181434;
        vboData[666] = 0.4766229999999999 / this.aspect;
        vboData[667] = -0.179087;
        vboData[668] = 0.493753 / this.aspect;
        vboData[669] = -0.081953;
        vboData[670] = 0.49021799999999993 / this.aspect;
        vboData[671] = -0.087488;
        vboData[672] = 0.627563 / this.aspect;
        vboData[673] = 0.349095;
        vboData[674] = 0.624683 / this.aspect;
        vboData[675] = 0.352642;
        vboData[676] = 0.37787799999999994 / this.aspect;
        vboData[677] = 0.329434;
        vboData[678] = 0.377764 / this.aspect;
        vboData[679] = 0.320794;
        vboData[680] = 0.858044 / this.aspect;
        vboData[681] = 0.145683;
        vboData[682] = 0.8546 / this.aspect;
        vboData[683] = 0.151689;
        vboData[684] = 0.528434 / this.aspect;
        vboData[685] = 0.321658;
        vboData[686] = 0.5275059999999999 / this.aspect;
        vboData[687] = 0.324183;
        vboData[688] = 0.6471619999999999 / this.aspect;
        vboData[689] = -0.396574;
        vboData[690] = 0.645602 / this.aspect;
        vboData[691] = -0.396475;
        vboData[692] = 0.521598 / this.aspect;
        vboData[693] = 0.190994;
        vboData[694] = 0.524909 / this.aspect;
        vboData[695] = 0.190416;
        vboData[696] = 0.59539 / this.aspect;
        vboData[697] = -0.394427;
        vboData[698] = 0.5959409999999999 / this.aspect;
        vboData[699] = -0.394428;
        vboData[700] = 0.7233499999999999 / this.aspect;
        vboData[701] = -0.397677;
        vboData[702] = 0.708739 / this.aspect;
        vboData[703] = -0.395012;
        vboData[704] = 0.49598 / this.aspect;
        vboData[705] = 0.319282;
        vboData[706] = 0.49971999999999994 / this.aspect;
        vboData[707] = 0.317594;
        vboData[708] = 0.493753 / this.aspect;
        vboData[709] = -0.081953;
        vboData[710] = 0.497718 / this.aspect;
        vboData[711] = -0.077228;
        vboData[712] = 0.572757 / this.aspect;
        vboData[713] = 0.044958;
        vboData[714] = 0.577109 / this.aspect;
        vboData[715] = 0.049351;
        vboData[716] = 0.620112 / this.aspect;
        vboData[717] = 0.358326;
        vboData[718] = 0.6184919999999999 / this.aspect;
        vboData[719] = 0.359683;
        vboData[720] = 0.6176539999999999 / this.aspect;
        vboData[721] = -0.395962;
        vboData[722] = 0.616713 / this.aspect;
        vboData[723] = -0.395954;
        vboData[724] = 0.649493 / this.aspect;
        vboData[725] = -0.396722;
        vboData[726] = 0.652509 / this.aspect;
        vboData[727] = -0.396502;
        vboData[728] = 0.51891 / this.aspect;
        vboData[729] = -0.393094;
        vboData[730] = 0.5191079999999999 / this.aspect;
        vboData[731] = -0.393112;
        vboData[732] = 0.7932509999999999 / this.aspect;
        vboData[733] = -0.391388;
        vboData[734] = 0.7937449999999999 / this.aspect;
        vboData[735] = -0.391358;
        vboData[736] = 0.607618 / this.aspect;
        vboData[737] = -0.395455;
        vboData[738] = 0.6075429999999999 / this.aspect;
        vboData[739] = -0.395349;
        vboData[740] = 0.775844 / this.aspect;
        vboData[741] = -0.391726;
        vboData[742] = 0.775288 / this.aspect;
        vboData[743] = -0.391704;
        vboData[744] = 0.8763259999999999 / this.aspect;
        vboData[745] = -0.380696;
        vboData[746] = 0.8800509999999999 / this.aspect;
        vboData[747] = -0.37595;
        vboData[748] = 0.8763259999999999 / this.aspect;
        vboData[749] = -0.380696;
        vboData[750] = 0.8757109999999999 / this.aspect;
        vboData[751] = -0.381342;
        vboData[752] = 0.7839179999999999 / this.aspect;
        vboData[753] = 0.225604;
        vboData[754] = 0.784411 / this.aspect;
        vboData[755] = 0.225384;
        vboData[756] = 0.516413 / this.aspect;
        vboData[757] = -0.060976;
        vboData[758] = 0.5178619999999999 / this.aspect;
        vboData[759] = -0.060014;
        vboData[760] = 0.5573549999999999 / this.aspect;
        vboData[761] = 0.179863;
        vboData[762] = 0.559429 / this.aspect;
        vboData[763] = 0.179303;
        vboData[764] = 0.836729 / this.aspect;
        vboData[765] = -0.016712;
        vboData[766] = 0.8367789999999999 / this.aspect;
        vboData[767] = -0.018299;
        vboData[768] = 0.8912329999999999 / this.aspect;
        vboData[769] = -0.231397;
        vboData[770] = 0.8913039999999999 / this.aspect;
        vboData[771] = -0.232274;
        vboData[772] = 0.7096389999999999 / this.aspect;
        vboData[773] = 0.237366;
        vboData[774] = 0.704962 / this.aspect;
        vboData[775] = 0.237056;
        vboData[776] = 0.704531 / this.aspect;
        vboData[777] = 0.237066;
        vboData[778] = 0.7048429999999999 / this.aspect;
        vboData[779] = 0.237048;
        vboData[780] = 0.872101 / this.aspect;
        vboData[781] = -0.326572;
        vboData[782] = 0.871281 / this.aspect;
        vboData[783] = -0.32564;
        vboData[784] = 0.6976169999999999 / this.aspect;
        vboData[785] = -0.395186;
        vboData[786] = 0.694781 / this.aspect;
        vboData[787] = -0.395089;
        vboData[788] = 0.640967 / this.aspect;
        vboData[789] = 0.328918;
        vboData[790] = 0.6389309999999999 / this.aspect;
        vboData[791] = 0.333114;
        vboData[792] = 0.518678 / this.aspect;
        vboData[793] = -0.059487;
        vboData[794] = 0.5185909999999999 / this.aspect;
        vboData[795] = -0.059539;
        vboData[796] = 0.6817249999999999 / this.aspect;
        vboData[797] = 0.256026;
        vboData[798] = 0.681657 / this.aspect;
        vboData[799] = 0.256124;
        vboData[800] = 0.8540869999999999 / this.aspect;
        vboData[801] = -0.385834;
        vboData[802] = 0.851569 / this.aspect;
        vboData[803] = -0.38578;
        vboData[804] = 0.85985 / this.aspect;
        vboData[805] = -0.385798;
        vboData[806] = 0.8605039999999999 / this.aspect;
        vboData[807] = -0.385536;
        vboData[808] = 0.8605039999999999 / this.aspect;
        vboData[809] = -0.385536;
        vboData[810] = 0.86053 / this.aspect;
        vboData[811] = -0.385526;
        vboData[812] = 0.8912329999999999 / this.aspect;
        vboData[813] = -0.231397;
        vboData[814] = 0.8912329999999999 / this.aspect;
        vboData[815] = -0.231378;
        vboData[816] = 0.7493509999999999 / this.aspect;
        vboData[817] = 0.236883;
        vboData[818] = 0.7463549999999999 / this.aspect;
        vboData[819] = 0.237267;
        vboData[820] = 0.7352559999999999 / this.aspect;
        vboData[821] = 0.238264;
        vboData[822] = 0.738594 / this.aspect;
        vboData[823] = 0.237926;
        vboData[824] = 0.863652 / this.aspect;
        vboData[825] = -0.385433;
        vboData[826] = 0.8633679999999999 / this.aspect;
        vboData[827] = -0.385431;
        vboData[828] = 0.8280099999999999 / this.aspect;
        vboData[829] = -0.390472;
        vboData[830] = 0.8328059999999999 / this.aspect;
        vboData[831] = -0.389986;
        vboData[832] = 0.87767 / this.aspect;
        vboData[833] = 0.051846;
        vboData[834] = 0.8770169999999999 / this.aspect;
        vboData[835] = 0.04461;
        vboData[836] = 0.539188 / this.aspect;
        vboData[837] = 0.396611;
        vboData[838] = 0.534771 / this.aspect;
        vboData[839] = 0.392988;
        vboData[840] = 0.865034 / this.aspect;
        vboData[841] = -0.051302;
        vboData[842] = 0.86227 / this.aspect;
        vboData[843] = -0.049948;
        vboData[844] = 0.5469849999999999 / this.aspect;
        vboData[845] = -0.016876;
        vboData[846] = 0.5468679999999999 / this.aspect;
        vboData[847] = -0.017814;
        vboData[848] = 0.4140959999999999 / this.aspect;
        vboData[849] = 0.23931;
        vboData[850] = 0.412033 / this.aspect;
        vboData[851] = 0.241775;
        vboData[852] = 0.873983 / this.aspect;
        vboData[853] = 0.109646;
        vboData[854] = 0.8756729999999999 / this.aspect;
        vboData[855] = 0.102412;
        vboData[856] = 0.38905499999999993 / this.aspect;
        vboData[857] = 0.274728;
        vboData[858] = 0.387903 / this.aspect;
        vboData[859] = 0.27699;
        vboData[860] = 0.8777469999999999 / this.aspect;
        vboData[861] = -0.340536;
        vboData[862] = 0.8785529999999999 / this.aspect;
        vboData[863] = -0.34331;
        vboData[864] = 0.87767 / this.aspect;
        vboData[865] = 0.051846;
        vboData[866] = 0.878015 / this.aspect;
        vboData[867] = 0.059175;
        vboData[868] = 0.767172 / this.aspect;
        vboData[869] = 0.232606;
        vboData[870] = 0.77255 / this.aspect;
        vboData[871] = 0.230944;
        vboData[872] = 0.666546 / this.aspect;
        vboData[873] = 0.285768;
        vboData[874] = 0.664438 / this.aspect;
        vboData[875] = 0.289486;
        vboData[876] = 0.8909969999999999 / this.aspect;
        vboData[877] = -0.24271;
        vboData[878] = 0.888501 / this.aspect;
        vboData[879] = -0.250174;
        vboData[880] = 0.7096389999999999 / this.aspect;
        vboData[881] = 0.237366;
        vboData[882] = 0.71517 / this.aspect;
        vboData[883] = 0.237551;
        vboData[884] = 0.549558 / this.aspect;
        vboData[885] = 0.002654;
        vboData[886] = 0.55263 / this.aspect;
        vboData[887] = 0.0088;
        vboData[888] = 0.704684 / this.aspect;
        vboData[889] = -0.395058;
        vboData[890] = 0.6976169999999999 / this.aspect;
        vboData[891] = -0.395186;
        vboData[892] = 0.676653 / this.aspect;
        vboData[893] = -0.395396;
        vboData[894] = 0.676751 / this.aspect;
        vboData[895] = -0.395391;
        vboData[896] = 0.722428 / this.aspect;
        vboData[897] = 0.237835;
        vboData[898] = 0.722556 / this.aspect;
        vboData[899] = 0.237832;
        vboData[900] = 0.666546 / this.aspect;
        vboData[901] = 0.285768;
        vboData[902] = 0.66691 / this.aspect;
        vboData[903] = 0.284705;
        vboData[904] = 0.3847529999999999 / this.aspect;
        vboData[905] = 0.358448;
        vboData[906] = 0.38386699999999996 / this.aspect;
        vboData[907] = 0.354003;
        vboData[908] = 0.8805499999999999 / this.aspect;
        vboData[909] = -0.365192;
        vboData[910] = 0.8808959999999999 / this.aspect;
        vboData[911] = -0.368784;
        vboData[912] = 0.617817 / this.aspect;
        vboData[913] = -0.395962;
        vboData[914] = 0.6178159999999999 / this.aspect;
        vboData[915] = -0.395962;
        vboData[916] = 0.6176539999999999 / this.aspect;
        vboData[917] = -0.395962;
        vboData[918] = 0.617749 / this.aspect;
        vboData[919] = -0.395958;
        vboData[920] = 0.5993339999999999 / this.aspect;
        vboData[921] = 0.073335;
        vboData[922] = 0.600283 / this.aspect;
        vboData[923] = 0.074266;
        vboData[924] = 0.5199079999999999 / this.aspect;
        vboData[925] = -0.393186;
        vboData[926] = 0.525845 / this.aspect;
        vboData[927] = -0.393089;
        vboData[928] = 0.836729 / this.aspect;
        vboData[929] = -0.016712;
        vboData[930] = 0.8365469999999999 / this.aspect;
        vboData[931] = -0.01582;
        vboData[932] = 0.875121 / this.aspect;
        vboData[933] = 0.081383;
        vboData[934] = 0.875116 / this.aspect;
        vboData[935] = 0.081402;
        vboData[936] = 0.462835 / this.aspect;
        vboData[937] = 0.336478;
        vboData[938] = 0.4612219999999999 / this.aspect;
        vboData[939] = 0.337214;
        vboData[940] = 0.5249389999999999 / this.aspect;
        vboData[941] = 0.384071;
        vboData[942] = 0.529241 / this.aspect;
        vboData[943] = 0.38893;
        vboData[944] = 0.607015 / this.aspect;
        vboData[945] = 0.373355;
        vboData[946] = 0.602499 / this.aspect;
        vboData[947] = 0.376443;
        vboData[948] = 0.478313 / this.aspect;
        vboData[949] = -0.11591;
        vboData[950] = 0.476892 / this.aspect;
        vboData[951] = -0.122962;
        vboData[952] = 0.40145999999999993 / this.aspect;
        vboData[953] = 0.367227;
        vboData[954] = 0.3979269999999999 / this.aspect;
        vboData[955] = 0.365899;
        vboData[956] = 0.568762 / this.aspect;
        vboData[957] = 0.039782;
        vboData[958] = 0.572757 / this.aspect;
        vboData[959] = 0.044958;
        vboData[960] = 0.581743 / this.aspect;
        vboData[961] = 0.054488;
        vboData[962] = 0.585239 / this.aspect;
        vboData[963] = 0.060174;
        vboData[964] = 0.525845 / this.aspect;
        vboData[965] = -0.393089;
        vboData[966] = 0.526285 / this.aspect;
        vboData[967] = -0.393082;
        vboData[968] = 0.853205 / this.aspect;
        vboData[969] = -0.043518;
        vboData[970] = 0.8509769999999999 / this.aspect;
        vboData[971] = -0.036604;
        vboData[972] = 0.8145669999999999 / this.aspect;
        vboData[973] = -0.390773;
        vboData[974] = 0.8124939999999999 / this.aspect;
        vboData[975] = -0.390755;
        vboData[976] = 0.6098889999999999 / this.aspect;
        vboData[977] = 0.157346;
        vboData[978] = 0.6104989999999999 / this.aspect;
        vboData[979] = 0.155727;
        vboData[980] = 0.59242 / this.aspect;
        vboData[981] = 0.168882;
        vboData[982] = 0.594495 / this.aspect;
        vboData[983] = 0.16823;
        vboData[984] = 0.847482 / this.aspect;
        vboData[985] = 0.004782;
        vboData[986] = 0.8442209999999999 / this.aspect;
        vboData[987] = 0.00375;
        vboData[988] = 0.48995 / this.aspect;
        vboData[989] = -0.254797;
        vboData[990] = 0.491012 / this.aspect;
        vboData[991] = -0.257722;
        vboData[992] = 0.671315 / this.aspect;
        vboData[993] = 0.274363;
        vboData[994] = 0.6727989999999999 / this.aspect;
        vboData[995] = 0.271822;
        vboData[996] = 0.379108 / this.aspect;
        vboData[997] = 0.334827;
        vboData[998] = 0.37995199999999996 / this.aspect;
        vboData[999] = 0.341198;
        vboData[1000] = 0.6330169999999999 / this.aspect;
        vboData[1001] = 0.341122;
        vboData[1002] = 0.6300009999999999 / this.aspect;
        vboData[1003] = 0.34348;
        vboData[1004] = 0.8741159999999999 / this.aspect;
        vboData[1005] = -0.38217;
        vboData[1006] = 0.873248 / this.aspect;
        vboData[1007] = -0.38262;
        vboData[1008] = 0.38317899999999994 / this.aspect;
        vboData[1009] = 0.291926;
        vboData[1010] = 0.38233399999999995 / this.aspect;
        vboData[1011] = 0.294094;
        vboData[1012] = 0.8748009999999999 / this.aspect;
        vboData[1013] = 0.037115;
        vboData[1014] = 0.8747879999999999 / this.aspect;
        vboData[1015] = 0.037088;
        vboData[1016] = 0.871372 / this.aspect;
        vboData[1017] = -0.383782;
        vboData[1018] = 0.8721779999999999 / this.aspect;
        vboData[1019] = -0.383462;
        vboData[1020] = 0.868721 / this.aspect;
        vboData[1021] = 0.124254;
        vboData[1022] = 0.865456 / this.aspect;
        vboData[1023] = 0.131351;
        vboData[1024] = 0.868145 / this.aspect;
        vboData[1025] = -0.310029;
        vboData[1026] = 0.8691309999999999 / this.aspect;
        vboData[1027] = -0.308435;
        vboData[1028] = 0.792368 / this.aspect;
        vboData[1029] = 0.221547;
        vboData[1030] = 0.7935939999999999 / this.aspect;
        vboData[1031] = 0.220789;
        vboData[1032] = 0.543951 / this.aspect;
        vboData[1033] = 0.183146;
        vboData[1034] = 0.536922 / this.aspect;
        vboData[1035] = 0.186462;
        vboData[1036] = 0.521598 / this.aspect;
        vboData[1037] = -0.330586;
        vboData[1038] = 0.515952 / this.aspect;
        vboData[1039] = -0.322665;
        vboData[1040] = 0.524208 / this.aspect;
        vboData[1041] = -0.331537;
        vboData[1042] = 0.524262 / this.aspect;
        vboData[1043] = -0.331608;
        vboData[1044] = 0.872101 / this.aspect;
        vboData[1045] = -0.326572;
        vboData[1046] = 0.872314 / this.aspect;
        vboData[1047] = -0.327094;
        vboData[1048] = 0.559083 / this.aspect;
        vboData[1049] = 0.02112;
        vboData[1050] = 0.5585 / this.aspect;
        vboData[1051] = 0.017285;
        vboData[1052] = 0.5162209999999999 / this.aspect;
        vboData[1053] = -0.39323;
        vboData[1054] = 0.514608 / this.aspect;
        vboData[1055] = -0.392258;
        vboData[1056] = 0.767172 / this.aspect;
        vboData[1057] = 0.232606;
        vboData[1058] = 0.761873 / this.aspect;
        vboData[1059] = 0.234314;
        vboData[1060] = 0.8761589999999999 / this.aspect;
        vboData[1061] = 0.08688;
        vboData[1062] = 0.875116 / this.aspect;
        vboData[1063] = 0.081402;
        vboData[1064] = 0.524208 / this.aspect;
        vboData[1065] = -0.331537;
        vboData[1066] = 0.524107 / this.aspect;
        vboData[1067] = -0.331405;
        vboData[1068] = 0.44340099999999993 / this.aspect;
        vboData[1069] = 0.21627;
        vboData[1070] = 0.4474349999999999 / this.aspect;
        vboData[1071] = 0.214457;
        vboData[1072] = 0.696645 / this.aspect;
        vboData[1073] = 0.236344;
        vboData[1074] = 0.696658 / this.aspect;
        vboData[1075] = 0.236345;
        vboData[1076] = 0.696645 / this.aspect;
        vboData[1077] = 0.236344;
        vboData[1078] = 0.6965279999999999 / this.aspect;
        vboData[1079] = 0.236371;
        vboData[1080] = 0.8827019999999999 / this.aspect;
        vboData[1081] = -0.28708;
        vboData[1082] = 0.882922 / this.aspect;
        vboData[1083] = -0.283863;
        vboData[1084] = 0.524747 / this.aspect;
        vboData[1085] = 0.329047;
        vboData[1086] = 0.5275059999999999 / this.aspect;
        vboData[1087] = 0.324183;
        vboData[1088] = 0.889653 / this.aspect;
        vboData[1089] = -0.085898;
        vboData[1090] = 0.891458 / this.aspect;
        vboData[1091] = -0.092906;
        vboData[1092] = 0.6330169999999999 / this.aspect;
        vboData[1093] = 0.341122;
        vboData[1094] = 0.63374 / this.aspect;
        vboData[1095] = 0.338707;
        vboData[1096] = 0.589155 / this.aspect;
        vboData[1097] = 0.06539;
        vboData[1098] = 0.58527 / this.aspect;
        vboData[1099] = 0.060211;
        vboData[1100] = 0.868145 / this.aspect;
        vboData[1101] = -0.310029;
        vboData[1102] = 0.8637269999999999 / this.aspect;
        vboData[1103] = -0.316031;
        vboData[1104] = 0.5993339999999999 / this.aspect;
        vboData[1105] = 0.073335;
        vboData[1106] = 0.598196 / this.aspect;
        vboData[1107] = 0.072457;
        vboData[1108] = 0.54879 / this.aspect;
        vboData[1109] = 0.298294;
        vboData[1110] = 0.5495359999999999 / this.aspect;
        vboData[1111] = 0.298001;
        vboData[1112] = 0.6052109999999999 / this.aspect;
        vboData[1113] = -0.395277;
        vboData[1114] = 0.6052179999999999 / this.aspect;
        vboData[1115] = -0.395319;
        vboData[1116] = 0.688746 / this.aspect;
        vboData[1117] = -0.395446;
        vboData[1118] = 0.6930609999999999 / this.aspect;
        vboData[1119] = -0.395131;
        vboData[1120] = 0.580668 / this.aspect;
        vboData[1121] = 0.173286;
        vboData[1122] = 0.5751689999999999 / this.aspect;
        vboData[1123] = 0.175196;
        vboData[1124] = 0.766905 / this.aspect;
        vboData[1125] = -0.392346;
        vboData[1126] = 0.766969 / this.aspect;
        vboData[1127] = -0.392324;
        vboData[1128] = 0.775288 / this.aspect;
        vboData[1129] = -0.391704;
        vboData[1130] = 0.774154 / this.aspect;
        vboData[1131] = -0.39171;
        vboData[1132] = 0.8950689999999999 / this.aspect;
        vboData[1133] = -0.128804;
        vboData[1134] = 0.896106 / this.aspect;
        vboData[1135] = -0.135856;
        vboData[1136] = 0.8145669999999999 / this.aspect;
        vboData[1137] = -0.390773;
        vboData[1138] = 0.8154539999999999 / this.aspect;
        vboData[1139] = -0.390718;
        vboData[1140] = 0.8353459999999999 / this.aspect;
        vboData[1141] = -0.389882;
        vboData[1142] = 0.8328059999999999 / this.aspect;
        vboData[1143] = -0.389986;
        vboData[1144] = 0.5596979999999999 / this.aspect;
        vboData[1145] = 0.402323;
        vboData[1146] = 0.5640759999999999 / this.aspect;
        vboData[1147] = 0.401994;
        vboData[1148] = 0.6066689999999999 / this.aspect;
        vboData[1149] = 0.08505;
        vboData[1150] = 0.6068939999999999 / this.aspect;
        vboData[1151] = 0.082714;
        vboData[1152] = 0.6029829999999999 / this.aspect;
        vboData[1153] = 0.078466;
        vboData[1154] = 0.606885 / this.aspect;
        vboData[1155] = 0.082705;
        vboData[1156] = 0.888501 / this.aspect;
        vboData[1157] = -0.250174;
        vboData[1158] = 0.884859 / this.aspect;
        vboData[1159] = -0.256726;
        vboData[1160] = 0.539188 / this.aspect;
        vboData[1161] = 0.396611;
        vboData[1162] = 0.544488 / this.aspect;
        vboData[1163] = 0.399698;
        vboData[1164] = 0.4861869999999999 / this.aspect;
        vboData[1165] = -0.239777;
        vboData[1166] = 0.4878389999999999 / this.aspect;
        vboData[1167] = -0.247241;
        vboData[1168] = 0.5494049999999999 / this.aspect;
        vboData[1169] = -0.394004;
        vboData[1170] = 0.5437639999999999 / this.aspect;
        vboData[1171] = -0.393753;
        vboData[1172] = 0.880166 / this.aspect;
        vboData[1173] = -0.294634;
        vboData[1174] = 0.877831 / this.aspect;
        vboData[1175] = -0.297929;
        vboData[1176] = 0.47739699999999996 / this.aspect;
        vboData[1177] = -0.189448;
        vboData[1178] = 0.47738899999999995 / this.aspect;
        vboData[1179] = -0.189409;
        vboData[1180] = 0.8206739999999999 / this.aspect;
        vboData[1181] = 0.198216;
        vboData[1182] = 0.822657 / this.aspect;
        vboData[1183] = 0.196273;
        vboData[1184] = 0.462835 / this.aspect;
        vboData[1185] = 0.336478;
        vboData[1186] = 0.46499099999999993 / this.aspect;
        vboData[1187] = 0.335;
        vboData[1188] = 0.645542 / this.aspect;
        vboData[1189] = 0.322872;
        vboData[1190] = 0.6444669999999999 / this.aspect;
        vboData[1191] = 0.324376;
        vboData[1192] = 0.6441929999999999 / this.aspect;
        vboData[1193] = 0.325326;
        vboData[1194] = 0.6444129999999999 / this.aspect;
        vboData[1195] = 0.324561;
        vboData[1196] = 0.7233499999999999 / this.aspect;
        vboData[1197] = -0.397677;
        vboData[1198] = 0.737945 / this.aspect;
        vboData[1199] = -0.395348;
        vboData[1200] = 0.85985 / this.aspect;
        vboData[1201] = -0.385798;
        vboData[1202] = 0.857667 / this.aspect;
        vboData[1203] = -0.385639;
        vboData[1204] = 0.529241 / this.aspect;
        vboData[1205] = 0.38893;
        vboData[1206] = 0.529655 / this.aspect;
        vboData[1207] = 0.388902;
        vboData[1208] = 0.8536029999999999 / this.aspect;
        vboData[1209] = -0.045634;
        vboData[1210] = 0.853594 / this.aspect;
        vboData[1211] = -0.045597;
        vboData[1212] = 0.51891 / this.aspect;
        vboData[1213] = -0.393094;
        vboData[1214] = 0.5188109999999999 / this.aspect;
        vboData[1215] = -0.393033;
        vboData[1216] = 0.884199 / this.aspect;
        vboData[1217] = -0.258722;
        vboData[1218] = 0.8846369999999999 / this.aspect;
        vboData[1219] = -0.257124;
        vboData[1220] = 0.796209 / this.aspect;
        vboData[1221] = 0.219375;
        vboData[1222] = 0.7935939999999999 / this.aspect;
        vboData[1223] = 0.220789;
        vboData[1224] = 0.863652 / this.aspect;
        vboData[1225] = -0.385433;
        vboData[1226] = 0.864146 / this.aspect;
        vboData[1227] = -0.385341;
        vboData[1228] = 0.871372 / this.aspect;
        vboData[1229] = -0.383782;
        vboData[1230] = 0.8705639999999999 / this.aspect;
        vboData[1231] = -0.384013;
        vboData[1232] = 0.5215209999999999 / this.aspect;
        vboData[1233] = 0.336866;
        vboData[1234] = 0.5192169999999999 / this.aspect;
        vboData[1235] = 0.343472;
        vboData[1236] = 0.515338 / this.aspect;
        vboData[1237] = -0.354822;
        vboData[1238] = 0.516874 / this.aspect;
        vboData[1239] = -0.348056;
        vboData[1240] = 0.8280099999999999 / this.aspect;
        vboData[1241] = -0.390472;
        vboData[1242] = 0.825358 / this.aspect;
        vboData[1243] = -0.390431;
        vboData[1244] = 0.4793879999999999 / this.aspect;
        vboData[1245] = -0.20305;
        vboData[1246] = 0.48003299999999993 / this.aspect;
        vboData[1247] = -0.207315;
        vboData[1248] = 0.7509649999999999 / this.aspect;
        vboData[1249] = 0.236703;
        vboData[1250] = 0.754361 / this.aspect;
        vboData[1251] = 0.236217;
        vboData[1252] = 0.5292009999999999 / this.aspect;
        vboData[1253] = -0.393213;
        vboData[1254] = 0.529218 / this.aspect;
        vboData[1255] = -0.393213;
        vboData[1256] = 0.57026 / this.aspect;
        vboData[1257] = 0.176451;
        vboData[1258] = 0.5751689999999999 / this.aspect;
        vboData[1259] = 0.175196;
        vboData[1260] = 0.8748659999999999 / this.aspect;
        vboData[1261] = 0.037238;
        vboData[1262] = 0.8748009999999999 / this.aspect;
        vboData[1263] = 0.037115;
        vboData[1264] = 0.556279 / this.aspect;
        vboData[1265] = 0.014435;
        vboData[1266] = 0.55263 / this.aspect;
        vboData[1267] = 0.0088;
        vboData[1268] = 0.565152 / this.aspect;
        vboData[1269] = 0.034239;
        vboData[1270] = 0.5618489999999999 / this.aspect;
        vboData[1271] = 0.028231;
        vboData[1272] = 0.652509 / this.aspect;
        vboData[1273] = -0.396502;
        vboData[1274] = 0.654164 / this.aspect;
        vboData[1275] = -0.396381;
        vboData[1276] = 0.5140699999999999 / this.aspect;
        vboData[1277] = -0.366529;
        vboData[1278] = 0.5142399999999999 / this.aspect;
        vboData[1279] = -0.365158;
        vboData[1280] = 0.6697329999999999 / this.aspect;
        vboData[1281] = 0.278171;
        vboData[1282] = 0.66691 / this.aspect;
        vboData[1283] = 0.284705;
        vboData[1284] = 0.382795 / this.aspect;
        vboData[1285] = 0.351244;
        vboData[1286] = 0.38386699999999996 / this.aspect;
        vboData[1287] = 0.354003;
        vboData[1288] = 0.8800509999999999 / this.aspect;
        vboData[1289] = -0.37595;
        vboData[1290] = 0.8808959999999999 / this.aspect;
        vboData[1291] = -0.368784;
        vboData[1292] = 0.47723799999999994 / this.aspect;
        vboData[1293] = -0.188713;
        vboData[1294] = 0.477371 / this.aspect;
        vboData[1295] = -0.18933;
        vboData[1296] = 0.5220579999999999 / this.aspect;
        vboData[1297] = 0.335274;
        vboData[1298] = 0.524747 / this.aspect;
        vboData[1299] = 0.329047;
        vboData[1300] = 0.523057 / this.aspect;
        vboData[1301] = 0.309058;
        vboData[1302] = 0.5282429999999999 / this.aspect;
        vboData[1303] = 0.307071;
        vboData[1304] = 0.438446 / this.aspect;
        vboData[1305] = 0.35271;
        vboData[1306] = 0.433453 / this.aspect;
        vboData[1307] = 0.356124;
        vboData[1308] = 0.894261 / this.aspect;
        vboData[1309] = -0.199976;
        vboData[1310] = 0.892354 / this.aspect;
        vboData[1311] = -0.204342;
        vboData[1312] = 0.512918 / this.aspect;
        vboData[1313] = -0.063317;
        vboData[1314] = 0.511478 / this.aspect;
        vboData[1315] = -0.064455;
        vboData[1316] = 0.48219199999999995 / this.aspect;
        vboData[1317] = -0.225074;
        vboData[1318] = 0.48182499999999995 / this.aspect;
        vboData[1319] = -0.222138;
        vboData[1320] = 0.4759319999999999 / this.aspect;
        vboData[1321] = 0.328731;
        vboData[1322] = 0.471055 / this.aspect;
        vboData[1323] = 0.331682;
        vboData[1324] = 0.865456 / this.aspect;
        vboData[1325] = 0.131351;
        vboData[1326] = 0.861807 / this.aspect;
        vboData[1327] = 0.138495;
        vboData[1328] = 0.7423219999999999 / this.aspect;
        vboData[1329] = 0.237806;
        vboData[1330] = 0.7418799999999999 / this.aspect;
        vboData[1331] = 0.237799;
        vboData[1332] = 0.624683 / this.aspect;
        vboData[1333] = 0.352642;
        vboData[1334] = 0.621188 / this.aspect;
        vboData[1335] = 0.356454;
        vboData[1336] = 0.779425 / this.aspect;
        vboData[1337] = 0.227902;
        vboData[1338] = 0.78204 / this.aspect;
        vboData[1339] = 0.226489;
        vboData[1340] = 0.611432 / this.aspect;
        vboData[1341] = 0.150202;
        vboData[1342] = 0.611432 / this.aspect;
        vboData[1343] = 0.150411;
        vboData[1344] = 0.611432 / this.aspect;
        vboData[1345] = 0.150411;
        vboData[1346] = 0.6104989999999999 / this.aspect;
        vboData[1347] = 0.155727;
        vboData[1348] = 0.8399159999999999 / this.aspect;
        vboData[1349] = 0.000272;
        vboData[1350] = 0.839148 / this.aspect;
        vboData[1351] = -0.00028;
        vboData[1352] = 0.6727989999999999 / this.aspect;
        vboData[1353] = 0.271822;
        vboData[1354] = 0.672635 / this.aspect;
        vboData[1355] = 0.27216;
        vboData[1356] = 0.6697329999999999 / this.aspect;
        vboData[1357] = 0.278171;
        vboData[1358] = 0.670744 / this.aspect;
        vboData[1359] = 0.275504;
        vboData[1360] = 0.549558 / this.aspect;
        vboData[1361] = 0.002654;
        vboData[1362] = 0.547792 / this.aspect;
        vboData[1363] = -0.00213;
        vboData[1364] = 0.9002539999999999 / this.aspect;
        vboData[1365] = -0.17795;
        vboData[1366] = 0.8996 / this.aspect;
        vboData[1367] = -0.185182;
        vboData[1368] = 0.5292009999999999 / this.aspect;
        vboData[1369] = -0.393213;
        vboData[1370] = 0.5299659999999999 / this.aspect;
        vboData[1371] = -0.39328;
        vboData[1372] = 0.37995199999999996 / this.aspect;
        vboData[1373] = 0.341198;
        vboData[1374] = 0.382795 / this.aspect;
        vboData[1375] = 0.351244;
        vboData[1376] = 0.534771 / this.aspect;
        vboData[1377] = 0.392988;
        vboData[1378] = 0.534003 / this.aspect;
        vboData[1379] = 0.39245;
        vboData[1380] = 0.5851609999999999 / this.aspect;
        vboData[1381] = 0.393088;
        vboData[1382] = 0.585982 / this.aspect;
        vboData[1383] = 0.391856;
        vboData[1384] = 0.8748659999999999 / this.aspect;
        vboData[1385] = -0.302374;
        vboData[1386] = 0.870064 / this.aspect;
        vboData[1387] = -0.306925;
        vboData[1388] = 0.8096509999999999 / this.aspect;
        vboData[1389] = -0.390906;
        vboData[1390] = 0.8030839999999999 / this.aspect;
        vboData[1391] = -0.391357;
        vboData[1392] = 0.4839589999999999 / this.aspect;
        vboData[1393] = -0.23245;
        vboData[1394] = 0.4835959999999999 / this.aspect;
        vboData[1395] = -0.230126;
        vboData[1396] = 0.524011 / this.aspect;
        vboData[1397] = -0.332309;
        vboData[1398] = 0.524123 / this.aspect;
        vboData[1399] = -0.33203;
        vboData[1400] = 0.5023559999999999 / this.aspect;
        vboData[1401] = -0.071696;
        vboData[1402] = 0.505234 / this.aspect;
        vboData[1403] = -0.069281;
        vboData[1404] = 0.866073 / this.aspect;
        vboData[1405] = -0.385117;
        vboData[1406] = 0.8660509999999999 / this.aspect;
        vboData[1407] = -0.38512;
        vboData[1408] = 0.388825 / this.aspect;
        vboData[1409] = 0.362431;
        vboData[1410] = 0.3847529999999999 / this.aspect;
        vboData[1411] = 0.358448;
        vboData[1412] = 0.5596979999999999 / this.aspect;
        vboData[1413] = 0.402323;
        vboData[1414] = 0.552055 / this.aspect;
        vboData[1415] = 0.401813;
        vboData[1416] = 0.394624 / this.aspect;
        vboData[1417] = 0.366104;
        vboData[1418] = 0.391864 / this.aspect;
        vboData[1419] = 0.363565;
        vboData[1420] = 0.38317899999999994 / this.aspect;
        vboData[1421] = 0.291926;
        vboData[1422] = 0.3835179999999999 / this.aspect;
        vboData[1423] = 0.291126;
        vboData[1424] = 0.6984239999999999 / this.aspect;
        vboData[1425] = 0.23648;
        vboData[1426] = 0.698298 / this.aspect;
        vboData[1427] = 0.236466;
        vboData[1428] = 0.5215209999999999 / this.aspect;
        vboData[1429] = 0.336866;
        vboData[1430] = 0.5220579999999999 / this.aspect;
        vboData[1431] = 0.335274;
        vboData[1432] = 0.4766229999999999 / this.aspect;
        vboData[1433] = -0.167006;
        vboData[1434] = 0.47654699999999994 / this.aspect;
        vboData[1435] = -0.159728;
        vboData[1436] = 0.4759319999999999 / this.aspect;
        vboData[1437] = 0.328731;
        vboData[1438] = 0.478166 / this.aspect;
        vboData[1439] = 0.327306;
        vboData[1440] = 0.6452019999999999 / this.aspect;
        vboData[1441] = -0.396472;
        vboData[1442] = 0.6454529999999999 / this.aspect;
        vboData[1443] = -0.396474;
        vboData[1444] = 0.8763259999999999 / this.aspect;
        vboData[1445] = 0.0736;
        vboData[1446] = 0.877477 / this.aspect;
        vboData[1447] = 0.066319;
        vboData[1448] = 0.535885 / this.aspect;
        vboData[1449] = -0.050058;
        vboData[1450] = 0.534164 / this.aspect;
        vboData[1451] = -0.050902;
        vboData[1452] = 0.6452019999999999 / this.aspect;
        vboData[1453] = -0.396472;
        vboData[1454] = 0.6410779999999999 / this.aspect;
        vboData[1455] = -0.396437;
        vboData[1456] = 0.859043 / this.aspect;
        vboData[1457] = 0.012928;
        vboData[1458] = 0.85852 / this.aspect;
        vboData[1459] = 0.012615;
        vboData[1460] = 0.378339 / this.aspect;
        vboData[1461] = 0.311454;
        vboData[1462] = 0.37949199999999994 / this.aspect;
        vboData[1463] = 0.306564;
        vboData[1464] = 0.38233399999999995 / this.aspect;
        vboData[1465] = 0.294094;
        vboData[1466] = 0.380721 / this.aspect;
        vboData[1467] = 0.299814;
        vboData[1468] = 0.523057 / this.aspect;
        vboData[1469] = 0.309058;
        vboData[1470] = 0.5215209999999999 / this.aspect;
        vboData[1471] = 0.310022;
        vboData[1472] = 0.8866189999999999 / this.aspect;
        vboData[1473] = -0.078754;
        vboData[1474] = 0.8842939999999999 / this.aspect;
        vboData[1475] = -0.074425;
        vboData[1476] = 0.720815 / this.aspect;
        vboData[1477] = 0.237831;
        vboData[1478] = 0.7178519999999999 / this.aspect;
        vboData[1479] = 0.237684;
        vboData[1480] = 0.572333 / this.aspect;
        vboData[1481] = -0.393681;
        vboData[1482] = 0.5686009999999999 / this.aspect;
        vboData[1483] = -0.393697;
        vboData[1484] = 0.585239 / this.aspect;
        vboData[1485] = 0.060174;
        vboData[1486] = 0.58527 / this.aspect;
        vboData[1487] = 0.060211;
        vboData[1488] = 0.8630909999999999 / this.aspect;
        vboData[1489] = -0.317074;
        vboData[1490] = 0.863065 / this.aspect;
        vboData[1491] = -0.317053;
        vboData[1492] = 0.5941099999999999 / this.aspect;
        vboData[1493] = 0.069458;
        vboData[1494] = 0.598196 / this.aspect;
        vboData[1495] = 0.072457;
        vboData[1496] = 0.59242 / this.aspect;
        vboData[1497] = 0.388496;
        vboData[1498] = 0.593783 / this.aspect;
        vboData[1499] = 0.385378;
        vboData[1500] = 0.796132 / this.aspect;
        vboData[1501] = -0.391346;
        vboData[1502] = 0.7937449999999999 / this.aspect;
        vboData[1503] = -0.391358;
        vboData[1504] = 0.6103179999999999 / this.aspect;
        vboData[1505] = -0.395898;
        vboData[1506] = 0.608277 / this.aspect;
        vboData[1507] = -0.395494;
        vboData[1508] = 0.774154 / this.aspect;
        vboData[1509] = -0.39171;
        vboData[1510] = 0.7734179999999999 / this.aspect;
        vboData[1511] = -0.39176;
        vboData[1512] = 0.5857899999999999 / this.aspect;
        vboData[1513] = -0.393958;
        vboData[1514] = 0.5826439999999999 / this.aspect;
        vboData[1515] = -0.393763;
        vboData[1516] = 0.8630909999999999 / this.aspect;
        vboData[1517] = -0.317074;
        vboData[1518] = 0.863046 / this.aspect;
        vboData[1519] = -0.317137;
        vboData[1520] = 0.8365469999999999 / this.aspect;
        vboData[1521] = -0.01582;
        vboData[1522] = 0.836452 / this.aspect;
        vboData[1523] = -0.01531;
        vboData[1524] = 0.8293539999999999 / this.aspect;
        vboData[1525] = 0.189183;
        vboData[1526] = 0.835166 / this.aspect;
        vboData[1527] = 0.181888;
        vboData[1528] = 0.568147 / this.aspect;
        vboData[1529] = 0.177014;
        vboData[1530] = 0.57026 / this.aspect;
        vboData[1531] = 0.176451;
        vboData[1532] = 0.879782 / this.aspect;
        vboData[1533] = -0.350252;
        vboData[1534] = 0.8798269999999999 / this.aspect;
        vboData[1535] = -0.35146;
        vboData[1536] = 0.882778 / this.aspect;
        vboData[1537] = -0.272562;
        vboData[1538] = 0.882085 / this.aspect;
        vboData[1539] = -0.268808;
        vboData[1540] = 0.4810399999999999 / this.aspect;
        vboData[1541] = -0.217885;
        vboData[1542] = 0.48023399999999994 / this.aspect;
        vboData[1543] = -0.210422;
        vboData[1544] = 0.486494 / this.aspect;
        vboData[1545] = 0.198414;
        vboData[1546] = 0.48759699999999995 / this.aspect;
        vboData[1547] = 0.198309;
        vboData[1548] = 0.897988 / this.aspect;
        vboData[1549] = -0.156566;
        vboData[1550] = 0.898928 / this.aspect;
        vboData[1551] = -0.162134;
        vboData[1552] = 0.8950689999999999 / this.aspect;
        vboData[1553] = -0.128804;
        vboData[1554] = 0.8945179999999999 / this.aspect;
        vboData[1555] = -0.123488;
        vboData[1556] = 0.523864 / this.aspect;
        vboData[1557] = -0.332673;
        vboData[1558] = 0.5232669999999999 / this.aspect;
        vboData[1559] = -0.334586;
        vboData[1560] = 0.477371 / this.aspect;
        vboData[1561] = -0.18933;
        vboData[1562] = 0.47738899999999995 / this.aspect;
        vboData[1563] = -0.189409;
        vboData[1564] = 0.8492489999999999 / this.aspect;
        vboData[1565] = -0.386014;
        vboData[1566] = 0.845248 / this.aspect;
        vboData[1567] = -0.385954;
        vboData[1568] = 0.861769 / this.aspect;
        vboData[1569] = -0.385616;
        vboData[1570] = 0.86053 / this.aspect;
        vboData[1571] = -0.385526;
        vboData[1572] = 0.883277 / this.aspect;
        vboData[1573] = -0.279706;
        vboData[1574] = 0.882778 / this.aspect;
        vboData[1575] = -0.272562;
        vboData[1576] = 0.8633299999999999 / this.aspect;
        vboData[1577] = -0.385435;
        vboData[1578] = 0.8633679999999999 / this.aspect;
        vboData[1579] = -0.385431;
        vboData[1580] = 0.534003 / this.aspect;
        vboData[1581] = 0.39245;
        vboData[1582] = 0.529655 / this.aspect;
        vboData[1583] = 0.388902;
        vboData[1584] = 0.853525 / this.aspect;
        vboData[1585] = -0.045308;
        vboData[1586] = 0.853594 / this.aspect;
        vboData[1587] = -0.045597;
        vboData[1588] = 0.6699259999999999 / this.aspect;
        vboData[1589] = -0.395877;
        vboData[1590] = 0.674291 / this.aspect;
        vboData[1591] = -0.3955;
        vboData[1592] = 0.42634799999999995 / this.aspect;
        vboData[1593] = 0.227391;
        vboData[1594] = 0.429651 / this.aspect;
        vboData[1595] = 0.224844;
        vboData[1596] = 0.861769 / this.aspect;
        vboData[1597] = -0.385616;
        vboData[1598] = 0.8633299999999999 / this.aspect;
        vboData[1599] = -0.385435;
        vboData[1600] = 0.6699259999999999 / this.aspect;
        vboData[1601] = -0.395877;
        vboData[1602] = 0.668296 / this.aspect;
        vboData[1603] = -0.395764;
        vboData[1604] = 0.513725 / this.aspect;
        vboData[1605] = -0.315154;
        vboData[1606] = 0.514898 / this.aspect;
        vboData[1607] = -0.318372;
        vboData[1608] = 0.543029 / this.aspect;
        vboData[1609] = -0.029514;
        vboData[1610] = 0.544161 / this.aspect;
        vboData[1611] = -0.026206;
        vboData[1612] = 0.4067989999999999 / this.aspect;
        vboData[1613] = 0.246722;
        vboData[1614] = 0.40883099999999994 / this.aspect;
        vboData[1615] = 0.245267;
        vboData[1616] = 0.512918 / this.aspect;
        vboData[1617] = -0.063317;
        vboData[1618] = 0.513389 / this.aspect;
        vboData[1619] = -0.063084;
        vboData[1620] = 0.6625899999999999 / this.aspect;
        vboData[1621] = 0.293646;
        vboData[1622] = 0.661751 / this.aspect;
        vboData[1623] = 0.294775;
        vboData[1624] = 0.6609689999999999 / this.aspect;
        vboData[1625] = 0.296407;
        vboData[1626] = 0.6602709999999999 / this.aspect;
        vboData[1627] = 0.29734;
        vboData[1628] = 0.498745 / this.aspect;
        vboData[1629] = -0.277645;
        vboData[1630] = 0.49544299999999997 / this.aspect;
        vboData[1631] = -0.269998;
        vboData[1632] = 0.6609689999999999 / this.aspect;
        vboData[1633] = 0.296407;
        vboData[1634] = 0.6614899999999999 / this.aspect;
        vboData[1635] = 0.295127;
        vboData[1636] = 0.8730229999999999 / this.aspect;
        vboData[1637] = -0.058498;
        vboData[1638] = 0.8752199999999999 / this.aspect;
        vboData[1639] = -0.06123;
        vboData[1640] = 0.785531 / this.aspect;
        vboData[1641] = -0.391653;
        vboData[1642] = 0.784642 / this.aspect;
        vboData[1643] = -0.391658;
        vboData[1644] = 0.6625899999999999 / this.aspect;
        vboData[1645] = 0.293646;
        vboData[1646] = 0.664438 / this.aspect;
        vboData[1647] = 0.289486;
        vboData[1648] = 0.869758 / this.aspect;
        vboData[1649] = -0.38429;
        vboData[1650] = 0.868875 / this.aspect;
        vboData[1651] = -0.38461;
        vboData[1652] = 0.843488 / this.aspect;
        vboData[1653] = -0.38605;
        vboData[1654] = 0.843143 / this.aspect;
        vboData[1655] = -0.386071;
        vboData[1656] = 0.6633199999999999 / this.aspect;
        vboData[1657] = -0.396058;
        vboData[1658] = 0.660006 / this.aspect;
        vboData[1659] = -0.396137;
        vboData[1660] = 0.677723 / this.aspect;
        vboData[1661] = -0.39543;
        vboData[1662] = 0.676751 / this.aspect;
        vboData[1663] = -0.395391;
        vboData[1664] = 0.7225929999999999 / this.aspect;
        vboData[1665] = 0.237833;
        vboData[1666] = 0.722556 / this.aspect;
        vboData[1667] = 0.237832;
        vboData[1668] = 0.8705639999999999 / this.aspect;
        vboData[1669] = -0.384013;
        vboData[1670] = 0.869758 / this.aspect;
        vboData[1671] = -0.38429;
        vboData[1672] = 0.587313 / this.aspect;
        vboData[1673] = -0.39413;
        vboData[1674] = 0.5886899999999999 / this.aspect;
        vboData[1675] = -0.394124;
        vboData[1676] = 0.5282429999999999 / this.aspect;
        vboData[1677] = 0.307071;
        vboData[1678] = 0.529855 / this.aspect;
        vboData[1679] = 0.306383;
        vboData[1680] = 0.841452 / this.aspect;
        vboData[1681] = -0.387261;
        vboData[1682] = 0.842276 / this.aspect;
        vboData[1683] = -0.386554;
        vboData[1684] = 0.5749449999999999 / this.aspect;
        vboData[1685] = 0.398154;
        vboData[1686] = 0.5712579999999999 / this.aspect;
        vboData[1687] = 0.399772;
        vboData[1688] = 0.785531 / this.aspect;
        vboData[1689] = -0.391653;
        vboData[1690] = 0.786457 / this.aspect;
        vboData[1691] = -0.391534;
        vboData[1692] = 0.543029 / this.aspect;
        vboData[1693] = -0.029514;
        vboData[1694] = 0.5424859999999999 / this.aspect;
        vboData[1695] = -0.03175;
        vboData[1696] = 0.5348109999999999 / this.aspect;
        vboData[1697] = 0.303759;
        vboData[1698] = 0.539631 / this.aspect;
        vboData[1699] = 0.301353;
        vboData[1700] = 0.47573999999999994 / this.aspect;
        vboData[1701] = -0.130106;
        vboData[1702] = 0.476892 / this.aspect;
        vboData[1703] = -0.122962;
        vboData[1704] = 0.6518039999999999 / this.aspect;
        vboData[1705] = 0.312662;
        vboData[1706] = 0.652763 / this.aspect;
        vboData[1707] = 0.310916;
        vboData[1708] = 0.492294 / this.aspect;
        vboData[1709] = -0.262305;
        vboData[1710] = 0.49544299999999997 / this.aspect;
        vboData[1711] = -0.269998;
        vboData[1712] = 0.8909969999999999 / this.aspect;
        vboData[1713] = -0.24271;
        vboData[1714] = 0.8911149999999999 / this.aspect;
        vboData[1715] = -0.239957;
        vboData[1716] = 0.72961 / this.aspect;
        vboData[1717] = 0.238074;
        vboData[1718] = 0.727557 / this.aspect;
        vboData[1719] = 0.237905;
        vboData[1720] = 0.51311 / this.aspect;
        vboData[1721] = -0.375948;
        vboData[1722] = 0.512381 / this.aspect;
        vboData[1723] = -0.379142;
        vboData[1724] = 0.529855 / this.aspect;
        vboData[1725] = 0.306383;
        vboData[1726] = 0.5348109999999999 / this.aspect;
        vboData[1727] = 0.303759;
        vboData[1728] = 0.495788 / this.aspect;
        vboData[1729] = 0.196363;
        vboData[1730] = 0.4966339999999999 / this.aspect;
        vboData[1731] = 0.196226;
        vboData[1732] = 0.601101 / this.aspect;
        vboData[1733] = 0.164876;
        vboData[1734] = 0.594495 / this.aspect;
        vboData[1735] = 0.16823;
        vboData[1736] = 0.876595 / this.aspect;
        vboData[1737] = 0.09513;
        vboData[1738] = 0.8764029999999999 / this.aspect;
        vboData[1739] = 0.087847;
        vboData[1740] = 0.818827 / this.aspect;
        vboData[1741] = -0.390556;
        vboData[1742] = 0.8189009999999999 / this.aspect;
        vboData[1743] = -0.390547;
        vboData[1744] = 0.824437 / this.aspect;
        vboData[1745] = 0.194606;
        vboData[1746] = 0.8258589999999999 / this.aspect;
        vboData[1747] = 0.193136;
        vboData[1748] = 0.6633199999999999 / this.aspect;
        vboData[1749] = -0.396058;
        vboData[1750] = 0.6649689999999999 / this.aspect;
        vboData[1751] = -0.395925;
        vboData[1752] = 0.47500999999999993 / this.aspect;
        vboData[1753] = -0.137432;
        vboData[1754] = 0.4751559999999999 / this.aspect;
        vboData[1755] = -0.140198;
        vboData[1756] = 0.861807 / this.aspect;
        vboData[1757] = 0.138495;
        vboData[1758] = 0.858044 / this.aspect;
        vboData[1759] = 0.145683;
        vboData[1760] = 0.47635399999999994 / this.aspect;
        vboData[1761] = 0.201071;
        vboData[1762] = 0.478313 / this.aspect;
        vboData[1763] = 0.20009;
        vboData[1764] = 0.6984239999999999 / this.aspect;
        vboData[1765] = 0.23648;
        vboData[1766] = 0.698511 / this.aspect;
        vboData[1767] = 0.236488;
        vboData[1768] = 0.8540869999999999 / this.aspect;
        vboData[1769] = -0.385834;
        vboData[1770] = 0.857667 / this.aspect;
        vboData[1771] = -0.385639;
        vboData[1772] = 0.851131 / this.aspect;
        vboData[1773] = -0.38583;
        vboData[1774] = 0.8497619999999999 / this.aspect;
        vboData[1775] = -0.38581;
        vboData[1776] = 0.39166599999999996 / this.aspect;
        vboData[1777] = 0.269434;
        vboData[1778] = 0.39531799999999995 / this.aspect;
        vboData[1779] = 0.263292;
        vboData[1780] = 0.518948 / this.aspect;
        vboData[1781] = 0.372198;
        vboData[1782] = 0.5215209999999999 / this.aspect;
        vboData[1783] = 0.378716;
        vboData[1784] = 0.489989 / this.aspect;
        vboData[1785] = -0.087824;
        vboData[1786] = 0.49021799999999993 / this.aspect;
        vboData[1787] = -0.087488;
        vboData[1788] = 0.510575 / this.aspect;
        vboData[1789] = -0.307913;
        vboData[1790] = 0.513393 / this.aspect;
        vboData[1791] = -0.313967;
        vboData[1792] = 0.510652 / this.aspect;
        vboData[1793] = -0.383754;
        vboData[1794] = 0.5111399999999999 / this.aspect;
        vboData[1795] = -0.384584;
        vboData[1796] = 0.853934 / this.aspect;
        vboData[1797] = 0.15301;
        vboData[1798] = 0.8546 / this.aspect;
        vboData[1799] = 0.151689;
        vboData[1800] = 0.60666 / this.aspect;
        vboData[1801] = -0.395399;
        vboData[1802] = 0.607116 / this.aspect;
        vboData[1803] = -0.395373;
        vboData[1804] = 0.6518039999999999 / this.aspect;
        vboData[1805] = 0.312662;
        vboData[1806] = 0.6524099999999999 / this.aspect;
        vboData[1807] = 0.311372;
        vboData[1808] = 0.6360509999999999 / this.aspect;
        vboData[1809] = -0.396694;
        vboData[1810] = 0.6410779999999999 / this.aspect;
        vboData[1811] = -0.396437;
        vboData[1812] = 0.682561 / this.aspect;
        vboData[1813] = 0.254822;
        vboData[1814] = 0.685164 / this.aspect;
        vboData[1815] = 0.249911;
        vboData[1816] = 0.553245 / this.aspect;
        vboData[1817] = 0.294674;
        vboData[1818] = 0.5548829999999999 / this.aspect;
        vboData[1819] = 0.293417;
        vboData[1820] = 0.5939949999999999 / this.aspect;
        vboData[1821] = -0.394424;
        vboData[1822] = 0.5886899999999999 / this.aspect;
        vboData[1823] = -0.394124;
        vboData[1824] = 0.44313199999999997 / this.aspect;
        vboData[1825] = 0.34892;
        vboData[1826] = 0.44481499999999996 / this.aspect;
        vboData[1827] = 0.347601;
        vboData[1828] = 0.547792 / this.aspect;
        vboData[1829] = -0.00213;
        vboData[1830] = 0.5471389999999999 / this.aspect;
        vboData[1831] = -0.009413;
        vboData[1832] = 0.6111249999999999 / this.aspect;
        vboData[1833] = 0.368752;
        vboData[1834] = 0.615695 / this.aspect;
        vboData[1835] = 0.36465;
        vboData[1836] = 0.615695 / this.aspect;
        vboData[1837] = 0.36465;
        vboData[1838] = 0.6184919999999999 / this.aspect;
        vboData[1839] = 0.359683;
        vboData[1840] = 0.871486 / this.aspect;
        vboData[1841] = 0.116926;
        vboData[1842] = 0.870678 / this.aspect;
        vboData[1843] = 0.118987;
        vboData[1844] = 0.5977969999999999 / this.aspect;
        vboData[1845] = 0.382104;
        vboData[1846] = 0.593783 / this.aspect;
        vboData[1847] = 0.385378;
        vboData[1848] = 0.559429 / this.aspect;
        vboData[1849] = 0.179303;
        vboData[1850] = 0.568147 / this.aspect;
        vboData[1851] = 0.177014;
        vboData[1852] = 0.740019 / this.aspect;
        vboData[1853] = 0.237998;
        vboData[1854] = 0.7414499999999999 / this.aspect;
        vboData[1855] = 0.237791;
        vboData[1856] = 0.524909 / this.aspect;
        vboData[1857] = 0.190416;
        vboData[1858] = 0.529454 / this.aspect;
        vboData[1859] = 0.189276;
        vboData[1860] = 0.608277 / this.aspect;
        vboData[1861] = -0.395494;
        vboData[1862] = 0.6075429999999999 / this.aspect;
        vboData[1863] = -0.395349;
        vboData[1864] = 0.523941 / this.aspect;
        vboData[1865] = -0.056344;
        vboData[1866] = 0.518678 / this.aspect;
        vboData[1867] = -0.059487;
        vboData[1868] = 0.753192 / this.aspect;
        vboData[1869] = -0.39422;
        vboData[1870] = 0.7540849999999999 / this.aspect;
        vboData[1871] = -0.39389;
        vboData[1872] = 0.878015 / this.aspect;
        vboData[1873] = 0.059175;
        vboData[1874] = 0.8775059999999999 / this.aspect;
        vboData[1875] = 0.064506;
        vboData[1876] = 0.7807689999999999 / this.aspect;
        vboData[1877] = -0.391921;
        vboData[1878] = 0.776839 / this.aspect;
        vboData[1879] = -0.391713;
        vboData[1880] = 0.510293 / this.aspect;
        vboData[1881] = -0.307031;
        vboData[1882] = 0.5096849999999999 / this.aspect;
        vboData[1883] = -0.305385;
        vboData[1884] = 0.824437 / this.aspect;
        vboData[1885] = 0.194606;
        vboData[1886] = 0.822657 / this.aspect;
        vboData[1887] = 0.196273;
        vboData[1888] = 0.8407229999999999 / this.aspect;
        vboData[1889] = -0.02291;
        vboData[1890] = 0.8437539999999999 / this.aspect;
        vboData[1891] = -0.026527;
        vboData[1892] = 0.704962 / this.aspect;
        vboData[1893] = 0.237056;
        vboData[1894] = 0.7048429999999999 / this.aspect;
        vboData[1895] = 0.237048;
        vboData[1896] = 0.8668769999999999 / this.aspect;
        vboData[1897] = -0.320158;
        vboData[1898] = 0.871281 / this.aspect;
        vboData[1899] = -0.32564;
        vboData[1900] = 0.3979269999999999 / this.aspect;
        vboData[1901] = 0.365899;
        vboData[1902] = 0.394624 / this.aspect;
        vboData[1903] = 0.366104;
        vboData[1904] = 0.8820479999999999 / this.aspect;
        vboData[1905] = -0.26533;
        vboData[1906] = 0.882085 / this.aspect;
        vboData[1907] = -0.268808;
        vboData[1908] = 0.775844 / this.aspect;
        vboData[1909] = -0.391726;
        vboData[1910] = 0.776566 / this.aspect;
        vboData[1911] = -0.391698;
        vboData[1912] = 0.8644339999999999 / this.aspect;
        vboData[1913] = -0.38531;
        vboData[1914] = 0.8643919999999999 / this.aspect;
        vboData[1915] = -0.385312;
        vboData[1916] = 0.543412 / this.aspect;
        vboData[1917] = 0.303896;
        vboData[1918] = 0.5419649999999999 / this.aspect;
        vboData[1919] = 0.306108;
        vboData[1920] = 0.843488 / this.aspect;
        vboData[1921] = -0.38605;
        vboData[1922] = 0.845248 / this.aspect;
        vboData[1923] = -0.385954;
        vboData[1924] = 0.510652 / this.aspect;
        vboData[1925] = -0.383754;
        vboData[1926] = 0.512381 / this.aspect;
        vboData[1927] = -0.379142;
        vboData[1928] = 0.9002539999999999 / this.aspect;
        vboData[1929] = -0.17076;
        vboData[1930] = 0.8992549999999999 / this.aspect;
        vboData[1931] = -0.163616;
        vboData[1932] = 0.498745 / this.aspect;
        vboData[1933] = -0.277645;
        vboData[1934] = 0.49890999999999996 / this.aspect;
        vboData[1935] = -0.278088;
        vboData[1936] = 0.8536819999999999 / this.aspect;
        vboData[1937] = -0.045637;
        vboData[1938] = 0.8536029999999999 / this.aspect;
        vboData[1939] = -0.045634;
        vboData[1940] = 0.4782369999999999 / this.aspect;
        vboData[1941] = -0.195678;
        vboData[1942] = 0.4793879999999999 / this.aspect;
        vboData[1943] = -0.20305;
        vboData[1944] = 0.598873 / this.aspect;
        vboData[1945] = -0.395038;
        vboData[1946] = 0.603587 / this.aspect;
        vboData[1947] = -0.395019;
        vboData[1948] = 0.6963509999999999 / this.aspect;
        vboData[1949] = 0.236408;
        vboData[1950] = 0.6956239999999999 / this.aspect;
        vboData[1951] = 0.23681;
        vboData[1952] = 0.531354 / this.aspect;
        vboData[1953] = -0.393402;
        vboData[1954] = 0.533103 / this.aspect;
        vboData[1955] = -0.393406;
        vboData[1956] = 0.8499789999999999 / this.aspect;
        vboData[1957] = 0.160154;
        vboData[1958] = 0.853934 / this.aspect;
        vboData[1959] = 0.15301;
        vboData[1960] = 0.640967 / this.aspect;
        vboData[1961] = 0.328918;
        vboData[1962] = 0.6441929999999999 / this.aspect;
        vboData[1963] = 0.325326;
        vboData[1964] = 0.48021899999999995 / this.aspect;
        vboData[1965] = -0.110733;
        vboData[1966] = 0.480363 / this.aspect;
        vboData[1967] = -0.110288;
        vboData[1968] = 0.5068109999999999 / this.aspect;
        vboData[1969] = -0.300088;
        vboData[1970] = 0.5014719999999999 / this.aspect;
        vboData[1971] = -0.291936;
        vboData[1972] = 0.5014719999999999 / this.aspect;
        vboData[1973] = -0.291936;
        vboData[1974] = 0.49982099999999996 / this.aspect;
        vboData[1975] = -0.284564;
        vboData[1976] = 0.78699 / this.aspect;
        vboData[1977] = 0.224366;
        vboData[1978] = 0.792368 / this.aspect;
        vboData[1979] = 0.221547;
        vboData[1980] = 0.8352679999999999 / this.aspect;
        vboData[1981] = 0.181767;
        vboData[1982] = 0.835166 / this.aspect;
        vboData[1983] = 0.181888;
        vboData[1984] = 0.395968 / this.aspect;
        vboData[1985] = 0.261968;
        vboData[1986] = 0.39984699999999995 / this.aspect;
        vboData[1987] = 0.256138;
        vboData[1988] = 0.540686 / this.aspect;
        vboData[1989] = -0.046184;
        vboData[1990] = 0.5398879999999999 / this.aspect;
        vboData[1991] = -0.047198;
        vboData[1992] = 0.42707699999999993 / this.aspect;
        vboData[1993] = 0.360134;
        vboData[1994] = 0.42204699999999995 / this.aspect;
        vboData[1995] = 0.36249;
        vboData[1996] = 0.6602709999999999 / this.aspect;
        vboData[1997] = 0.29734;
        vboData[1998] = 0.659897 / this.aspect;
        vboData[1999] = 0.298232;
        vboData[2000] = 0.8780919999999999 / this.aspect;
        vboData[2001] = -0.064702;
        vboData[2002] = 0.8752199999999999 / this.aspect;
        vboData[2003] = -0.06123;
        vboData[2004] = 0.855086 / this.aspect;
        vboData[2005] = -0.046281;
        vboData[2006] = 0.854584 / this.aspect;
        vboData[2007] = -0.046098;
        vboData[2008] = 0.6065929999999999 / this.aspect;
        vboData[2009] = 0.10007;
        vboData[2010] = 0.606055 / this.aspect;
        vboData[2011] = 0.092606;
        vboData[2012] = 0.531354 / this.aspect;
        vboData[2013] = -0.393402;
        vboData[2014] = 0.5297879999999999 / this.aspect;
        vboData[2015] = -0.393263;
        vboData[2016] = 0.855086 / this.aspect;
        vboData[2017] = -0.046281;
        vboData[2018] = 0.8553459999999999 / this.aspect;
        vboData[2019] = -0.046413;
        vboData[2020] = 0.7700799999999999 / this.aspect;
        vboData[2021] = -0.391986;
        vboData[2022] = 0.7673989999999999 / this.aspect;
        vboData[2023] = -0.392204;
        vboData[2024] = 0.540686 / this.aspect;
        vboData[2025] = -0.046184;
        vboData[2026] = 0.540744 / this.aspect;
        vboData[2027] = -0.045676;
        vboData[2028] = 0.8756729999999999 / this.aspect;
        vboData[2029] = 0.102412;
        vboData[2030] = 0.876595 / this.aspect;
        vboData[2031] = 0.09513;
        vboData[2032] = 0.6214569999999999 / this.aspect;
        vboData[2033] = -0.39657;
        vboData[2034] = 0.617817 / this.aspect;
        vboData[2035] = -0.395962;
        vboData[2036] = 0.842873 / this.aspect;
        vboData[2037] = -0.386292;
        vboData[2038] = 0.842276 / this.aspect;
        vboData[2039] = -0.386554;
        vboData[2040] = 0.47635399999999994 / this.aspect;
        vboData[2041] = 0.201071;
        vboData[2042] = 0.4682879999999999 / this.aspect;
        vboData[2043] = 0.203108;
        vboData[2044] = 0.83619 / this.aspect;
        vboData[2045] = -0.009834;
        vboData[2046] = 0.8364469999999999 / this.aspect;
        vboData[2047] = -0.015215;
        vboData[2048] = 0.8913039999999999 / this.aspect;
        vboData[2049] = -0.20735;
        vboData[2050] = 0.892354 / this.aspect;
        vboData[2051] = -0.204342;
        vboData[2052] = 0.6492239999999999 / this.aspect;
        vboData[2053] = 0.317358;
        vboData[2054] = 0.650134 / this.aspect;
        vboData[2055] = 0.315227;
        vboData[2056] = 0.8805499999999999 / this.aspect;
        vboData[2057] = -0.365192;
        vboData[2058] = 0.88032 / this.aspect;
        vboData[2059] = -0.357958;
        vboData[2060] = 0.4777079999999999 / this.aspect;
        vboData[2061] = -0.191595;
        vboData[2062] = 0.47739699999999996 / this.aspect;
        vboData[2063] = -0.189448;
        vboData[2064] = 0.4777079999999999 / this.aspect;
        vboData[2065] = -0.191595;
        vboData[2066] = 0.4777929999999999 / this.aspect;
        vboData[2067] = -0.192253;
        vboData[2068] = 0.598873 / this.aspect;
        vboData[2069] = -0.395038;
        vboData[2070] = 0.5961449999999999 / this.aspect;
        vboData[2071] = -0.394471;
        vboData[2072] = 0.4766229999999999 / this.aspect;
        vboData[2073] = -0.167006;
        vboData[2074] = 0.47646999999999995 / this.aspect;
        vboData[2075] = -0.174244;
        vboData[2076] = 0.7414499999999999 / this.aspect;
        vboData[2077] = 0.237791;
        vboData[2078] = 0.7418799999999999 / this.aspect;
        vboData[2079] = 0.237799;
        vboData[2080] = 0.553245 / this.aspect;
        vboData[2081] = 0.294674;
        vboData[2082] = 0.5495359999999999 / this.aspect;
        vboData[2083] = 0.298001;
        vboData[2084] = 0.541531 / this.aspect;
        vboData[2085] = 0.300715;
        vboData[2086] = 0.539631 / this.aspect;
        vboData[2087] = 0.301353;
        vboData[2088] = 0.513725 / this.aspect;
        vboData[2089] = -0.315154;
        vboData[2090] = 0.513393 / this.aspect;
        vboData[2091] = -0.313967;
        vboData[2092] = 0.587313 / this.aspect;
        vboData[2093] = -0.39413;
        vboData[2094] = 0.5857899999999999 / this.aspect;
        vboData[2095] = -0.393958;
        vboData[2096] = 0.842873 / this.aspect;
        vboData[2097] = -0.386292;
        vboData[2098] = 0.8431249999999999 / this.aspect;
        vboData[2099] = -0.386072;
        vboData[2100] = 0.52918 / this.aspect;
        vboData[2101] = -0.393211;
        vboData[2102] = 0.526285 / this.aspect;
        vboData[2103] = -0.393082;
        vboData[2104] = 0.40145999999999993 / this.aspect;
        vboData[2105] = 0.367227;
        vboData[2106] = 0.40787399999999996 / this.aspect;
        vboData[2107] = 0.367014;
        vboData[2108] = 0.83619 / this.aspect;
        vboData[2109] = -0.009834;
        vboData[2110] = 0.834382 / this.aspect;
        vboData[2111] = -0.00301;
        vboData[2112] = 0.7256549999999999 / this.aspect;
        vboData[2113] = 0.237936;
        vboData[2114] = 0.727557 / this.aspect;
        vboData[2115] = 0.237905;
        vboData[2116] = 0.8116099999999999 / this.aspect;
        vboData[2117] = -0.390816;
        vboData[2118] = 0.8124939999999999 / this.aspect;
        vboData[2119] = -0.390755;
        vboData[2120] = 0.891458 / this.aspect;
        vboData[2121] = -0.092906;
        vboData[2122] = 0.891683 / this.aspect;
        vboData[2123] = -0.094506;
        vboData[2124] = 0.667045 / this.aspect;
        vboData[2125] = -0.39583;
        vboData[2126] = 0.667893 / this.aspect;
        vboData[2127] = -0.395756;
        vboData[2128] = 0.44340099999999993 / this.aspect;
        vboData[2129] = 0.21627;
        vboData[2130] = 0.437179 / this.aspect;
        vboData[2131] = 0.21985;
        vboData[2132] = 0.609719 / this.aspect;
        vboData[2133] = 0.157639;
        vboData[2134] = 0.6098889999999999 / this.aspect;
        vboData[2135] = 0.157346;
        vboData[2136] = 0.518948 / this.aspect;
        vboData[2137] = 0.372198;
        vboData[2138] = 0.517489 / this.aspect;
        vboData[2139] = 0.365638;
        vboData[2140] = 0.5064649999999999 / this.aspect;
        vboData[2141] = 0.194358;
        vboData[2142] = 0.4966339999999999 / this.aspect;
        vboData[2143] = 0.196226;
        vboData[2144] = 0.8749039999999999 / this.aspect;
        vboData[2145] = 0.03733;
        vboData[2146] = 0.8749819999999999 / this.aspect;
        vboData[2147] = 0.037636;
        vboData[2148] = 0.492294 / this.aspect;
        vboData[2149] = -0.262305;
        vboData[2150] = 0.491012 / this.aspect;
        vboData[2151] = -0.257722;
        vboData[2152] = 0.670863 / this.aspect;
        vboData[2153] = 0.27519;
        vboData[2154] = 0.671315 / this.aspect;
        vboData[2155] = 0.274363;
        vboData[2156] = 0.67369 / this.aspect;
        vboData[2157] = 0.270296;
        vboData[2158] = 0.672635 / this.aspect;
        vboData[2159] = 0.27216;
        vboData[2160] = 0.670863 / this.aspect;
        vboData[2161] = 0.27519;
        vboData[2162] = 0.670744 / this.aspect;
        vboData[2163] = 0.275504;
        vboData[2164] = 0.609719 / this.aspect;
        vboData[2165] = 0.157639;
        vboData[2166] = 0.6091759999999999 / this.aspect;
        vboData[2167] = 0.158581;
        vboData[2168] = 0.4168609999999999 / this.aspect;
        vboData[2169] = 0.364802;
        vboData[2170] = 0.415523 / this.aspect;
        vboData[2171] = 0.364904;
        vboData[2172] = 0.486571 / this.aspect;
        vboData[2173] = -0.094016;
        vboData[2174] = 0.48388299999999995 / this.aspect;
        vboData[2175] = -0.101082;
        vboData[2176] = 0.667045 / this.aspect;
        vboData[2177] = -0.39583;
        vboData[2178] = 0.6659809999999999 / this.aspect;
        vboData[2179] = -0.395848;
        vboData[2180] = 0.871294 / this.aspect;
        vboData[2181] = 0.029819;
        vboData[2182] = 0.8747879999999999 / this.aspect;
        vboData[2183] = 0.037088;
        vboData[2184] = 0.7439359999999999 / this.aspect;
        vboData[2185] = 0.237578;
        vboData[2186] = 0.746035 / this.aspect;
        vboData[2187] = 0.237309;
        vboData[2188] = 0.5427599999999999 / this.aspect;
        vboData[2189] = -0.393757;
        vboData[2190] = 0.53531 / this.aspect;
        vboData[2191] = -0.393786;
        vboData[2192] = 0.8691309999999999 / this.aspect;
        vboData[2193] = -0.308435;
        vboData[2194] = 0.870064 / this.aspect;
        vboData[2195] = -0.306925;
        vboData[2196] = 0.5377289999999999 / this.aspect;
        vboData[2197] = 0.31011;
        vboData[2198] = 0.5348109999999999 / this.aspect;
        vboData[2199] = 0.312646;
        vboData[2200] = 0.8913039999999999 / this.aspect;
        vboData[2201] = -0.20735;
        vboData[2202] = 0.891011 / this.aspect;
        vboData[2203] = -0.211954;
        vboData[2204] = 0.6492239999999999 / this.aspect;
        vboData[2205] = 0.317358;
        vboData[2206] = 0.647208 / this.aspect;
        vboData[2207] = 0.319839;
        vboData[2208] = 0.8936089999999999 / this.aspect;
        vboData[2209] = -0.114564;
        vboData[2210] = 0.8933389999999999 / this.aspect;
        vboData[2211] = -0.107421;
        vboData[2212] = 0.4682879999999999 / this.aspect;
        vboData[2213] = 0.203108;
        vboData[2214] = 0.4662529999999999 / this.aspect;
        vboData[2215] = 0.203999;
        vboData[2216] = 0.556817 / this.aspect;
        vboData[2217] = -0.393974;
        vboData[2218] = 0.5494049999999999 / this.aspect;
        vboData[2219] = -0.394004;
        vboData[2220] = 0.67369 / this.aspect;
        vboData[2221] = 0.270296;
        vboData[2222] = 0.6747479999999999 / this.aspect;
        vboData[2223] = 0.268202;
        vboData[2224] = 0.6963509999999999 / this.aspect;
        vboData[2225] = 0.236408;
        vboData[2226] = 0.6965199999999999 / this.aspect;
        vboData[2227] = 0.236371;
        vboData[2228] = 0.5068109999999999 / this.aspect;
        vboData[2229] = -0.300088;
        vboData[2230] = 0.509597 / this.aspect;
        vboData[2231] = -0.305223;
        vboData[2232] = 0.647129 / this.aspect;
        vboData[2233] = -0.396584;
        vboData[2234] = 0.6471619999999999 / this.aspect;
        vboData[2235] = -0.396574;
        vboData[2236] = 0.647129 / this.aspect;
        vboData[2237] = -0.396584;
        vboData[2238] = 0.6478809999999999 / this.aspect;
        vboData[2239] = -0.396628;
        vboData[2240] = 0.6965199999999999 / this.aspect;
        vboData[2241] = 0.236371;
        vboData[2242] = 0.6965279999999999 / this.aspect;
        vboData[2243] = 0.236371;
        vboData[2244] = 0.5295099999999999 / this.aspect;
        vboData[2245] = -0.052594;
        vboData[2246] = 0.534164 / this.aspect;
        vboData[2247] = -0.050902;
        vboData[2248] = 0.6503089999999999 / this.aspect;
        vboData[2249] = 0.314817;
        vboData[2250] = 0.6524099999999999 / this.aspect;
        vboData[2251] = 0.311372;
        vboData[2252] = 0.5749449999999999 / this.aspect;
        vboData[2253] = 0.398154;
        vboData[2254] = 0.5801299999999999 / this.aspect;
        vboData[2255] = 0.395946;
        vboData[2256] = 0.49890999999999996 / this.aspect;
        vboData[2257] = -0.278088;
        vboData[2258] = 0.498915 / this.aspect;
        vboData[2259] = -0.278101;
        vboData[2260] = 0.686979 / this.aspect;
        vboData[2261] = 0.247174;
        vboData[2262] = 0.685164 / this.aspect;
        vboData[2263] = 0.249911;
        vboData[2264] = 0.857659 / this.aspect;
        vboData[2265] = 0.011683;
        vboData[2266] = 0.8528209999999999 / this.aspect;
        vboData[2267] = 0.007771;
        vboData[2268] = 0.8780919999999999 / this.aspect;
        vboData[2269] = -0.064702;
        vboData[2270] = 0.879222 / this.aspect;
        vboData[2271] = -0.066635;
        vboData[2272] = 0.7168209999999999 / this.aspect;
        vboData[2273] = 0.23765;
        vboData[2274] = 0.7178519999999999 / this.aspect;
        vboData[2275] = 0.237684;
        vboData[2276] = 0.5773649999999999 / this.aspect;
        vboData[2277] = 0.04963;
        vboData[2278] = 0.577109 / this.aspect;
        vboData[2279] = 0.049351;
        vboData[2280] = 0.5641919999999999 / this.aspect;
        vboData[2281] = -0.393944;
        vboData[2282] = 0.5686009999999999 / this.aspect;
        vboData[2283] = -0.393697;
        vboData[2284] = 0.41908899999999993 / this.aspect;
        vboData[2285] = 0.234095;
        vboData[2286] = 0.4140959999999999 / this.aspect;
        vboData[2287] = 0.23931;
        vboData[2288] = 0.5618489999999999 / this.aspect;
        vboData[2289] = 0.028231;
        vboData[2290] = 0.559083 / this.aspect;
        vboData[2291] = 0.02112;
        vboData[2292] = 0.686979 / this.aspect;
        vboData[2293] = 0.247174;
        vboData[2294] = 0.68802 / this.aspect;
        vboData[2295] = 0.245271;
        vboData[2296] = 0.645542 / this.aspect;
        vboData[2297] = 0.322872;
        vboData[2298] = 0.6444129999999999 / this.aspect;
        vboData[2299] = 0.324561;
        vboData[2300] = 0.533735 / this.aspect;
        vboData[2301] = 0.18709;
        vboData[2302] = 0.529454 / this.aspect;
        vboData[2303] = 0.189276;
        vboData[2304] = 0.8641079999999999 / this.aspect;
        vboData[2305] = -0.318029;
        vboData[2306] = 0.863046 / this.aspect;
        vboData[2307] = -0.317137;
        vboData[2308] = 0.7700799999999999 / this.aspect;
        vboData[2309] = -0.391986;
        vboData[2310] = 0.7734179999999999 / this.aspect;
        vboData[2311] = -0.39176;
        vboData[2312] = 0.78699 / this.aspect;
        vboData[2313] = 0.224366;
        vboData[2314] = 0.784411 / this.aspect;
        vboData[2315] = 0.225384;
        vboData[2316] = 0.4839589999999999 / this.aspect;
        vboData[2317] = -0.23245;
        vboData[2318] = 0.486178 / this.aspect;
        vboData[2319] = -0.239712;
        vboData[2320] = 0.42707699999999993 / this.aspect;
        vboData[2321] = 0.360134;
        vboData[2322] = 0.431994 / this.aspect;
        vboData[2323] = 0.357087;
        vboData[2324] = 0.4825379999999999 / this.aspect;
        vboData[2325] = 0.325822;
        vboData[2326] = 0.487201 / this.aspect;
        vboData[2327] = 0.322787;
        vboData[2328] = 0.5215209999999999 / this.aspect;
        vboData[2329] = 0.310022;
        vboData[2330] = 0.5163359999999999 / this.aspect;
        vboData[2331] = 0.311775;
        vboData[2332] = 0.49598 / this.aspect;
        vboData[2333] = 0.319282;
        vboData[2334] = 0.493054 / this.aspect;
        vboData[2335] = 0.320154;
        vboData[2336] = 0.516605 / this.aspect;
        vboData[2337] = 0.192164;
        vboData[2338] = 0.521598 / this.aspect;
        vboData[2339] = 0.190994;
        vboData[2340] = 0.8770169999999999 / this.aspect;
        vboData[2341] = 0.04461;
        vboData[2342] = 0.8749819999999999 / this.aspect;
        vboData[2343] = 0.037636;
        vboData[2344] = 0.88032 / this.aspect;
        vboData[2345] = -0.357958;
        vboData[2346] = 0.8798269999999999 / this.aspect;
        vboData[2347] = -0.35146;
        vboData[2348] = 0.63801 / this.aspect;
        vboData[2349] = 0.333522;
        vboData[2350] = 0.6389309999999999 / this.aspect;
        vboData[2351] = 0.333114;
        vboData[2352] = 0.875251 / this.aspect;
        vboData[2353] = 0.080882;
        vboData[2354] = 0.875121 / this.aspect;
        vboData[2355] = 0.081383;
        vboData[2356] = 0.42634799999999995 / this.aspect;
        vboData[2357] = 0.227391;
        vboData[2358] = 0.42438999999999993 / this.aspect;
        vboData[2359] = 0.229104;
        vboData[2360] = 0.611393 / this.aspect;
        vboData[2361] = 0.145582;
        vboData[2362] = 0.611432 / this.aspect;
        vboData[2363] = 0.146381;
        vboData[2364] = 0.884859 / this.aspect;
        vboData[2365] = -0.256726;
        vboData[2366] = 0.8846369999999999 / this.aspect;
        vboData[2367] = -0.257124;
        vboData[2368] = 0.678068 / this.aspect;
        vboData[2369] = 0.262606;
        vboData[2370] = 0.678703 / this.aspect;
        vboData[2371] = 0.26131;
        vboData[2372] = 0.576967 / this.aspect;
        vboData[2373] = -0.393558;
        vboData[2374] = 0.576287 / this.aspect;
        vboData[2375] = -0.393524;
        vboData[2376] = 0.693873 / this.aspect;
        vboData[2377] = 0.237981;
        vboData[2378] = 0.6939179999999999 / this.aspect;
        vboData[2379] = 0.237929;
        vboData[2380] = 0.4810009999999999 / this.aspect;
        vboData[2381] = -0.108138;
        vboData[2382] = 0.480363 / this.aspect;
        vboData[2383] = -0.110288;
        vboData[2384] = 0.6744199999999999 / this.aspect;
        vboData[2385] = -0.39551;
        vboData[2386] = 0.674291 / this.aspect;
        vboData[2387] = -0.3955;
        vboData[2388] = 0.5573549999999999 / this.aspect;
        vboData[2389] = 0.179863;
        vboData[2390] = 0.546524 / this.aspect;
        vboData[2391] = 0.182714;
        vboData[2392] = 0.8969119999999999 / this.aspect;
        vboData[2393] = -0.143;
        vboData[2394] = 0.897181 / this.aspect;
        vboData[2395] = -0.150144;
        vboData[2396] = 0.580668 / this.aspect;
        vboData[2397] = 0.173286;
        vboData[2398] = 0.590312 / this.aspect;
        vboData[2399] = 0.169894;
        vboData[2400] = 0.412829 / this.aspect;
        vboData[2401] = 0.366086;
        vboData[2402] = 0.40787399999999996 / this.aspect;
        vboData[2403] = 0.367014;
        vboData[2404] = 0.8677219999999999 / this.aspect;
        vboData[2405] = 0.022275;
        vboData[2406] = 0.8683839999999999 / this.aspect;
        vboData[2407] = 0.023844;
        vboData[2408] = 0.476278 / this.aspect;
        vboData[2409] = -0.151813;
        vboData[2410] = 0.47646999999999995 / this.aspect;
        vboData[2411] = -0.152442;
        vboData[2412] = 0.5192169999999999 / this.aspect;
        vboData[2413] = 0.343472;
        vboData[2414] = 0.5180199999999999 / this.aspect;
        vboData[2415] = 0.350195;
        vboData[2416] = 0.39984699999999995 / this.aspect;
        vboData[2417] = 0.256138;
        vboData[2418] = 0.4009999999999999 / this.aspect;
        vboData[2419] = 0.254406;
        vboData[2420] = 0.607629 / this.aspect;
        vboData[2421] = 0.10785;
        vboData[2422] = 0.6088199999999999 / this.aspect;
        vboData[2423] = 0.115314;
        vboData[2424] = 0.611432 / this.aspect;
        vboData[2425] = 0.146381;
        vboData[2426] = 0.611432 / this.aspect;
        vboData[2427] = 0.150202;
        vboData[2428] = 0.627563 / this.aspect;
        vboData[2429] = 0.349095;
        vboData[2430] = 0.6300009999999999 / this.aspect;
        vboData[2431] = 0.34348;
        vboData[2432] = 0.7740859999999999 / this.aspect;
        vboData[2433] = 0.23021;
        vboData[2434] = 0.77255 / this.aspect;
        vboData[2435] = 0.230944;
        vboData[2436] = 0.48023399999999994 / this.aspect;
        vboData[2437] = -0.210422;
        vboData[2438] = 0.48003299999999993 / this.aspect;
        vboData[2439] = -0.207315;
        vboData[2440] = 0.7548819999999999 / this.aspect;
        vboData[2441] = 0.236148;
        vboData[2442] = 0.754361 / this.aspect;
        vboData[2443] = 0.236217;
        vboData[2444] = 0.39166599999999996 / this.aspect;
        vboData[2445] = 0.269434;
        vboData[2446] = 0.38905499999999993 / this.aspect;
        vboData[2447] = 0.274728;
        vboData[2448] = 0.7168209999999999 / this.aspect;
        vboData[2449] = 0.23765;
        vboData[2450] = 0.71517 / this.aspect;
        vboData[2451] = 0.237551;
        vboData[2452] = 0.395968 / this.aspect;
        vboData[2453] = 0.261968;
        vboData[2454] = 0.39531799999999995 / this.aspect;
        vboData[2455] = 0.263292;
        vboData[2456] = 0.7740859999999999 / this.aspect;
        vboData[2457] = 0.23021;
        vboData[2458] = 0.779425 / this.aspect;
        vboData[2459] = 0.227902;
        vboData[2460] = 0.546524 / this.aspect;
        vboData[2461] = 0.182714;
        vboData[2462] = 0.543951 / this.aspect;
        vboData[2463] = 0.183146;
        vboData[2464] = 0.8066929999999999 / this.aspect;
        vboData[2465] = 0.211523;
        vboData[2466] = 0.805234 / this.aspect;
        vboData[2467] = 0.212811;
        vboData[2468] = 0.8374189999999999 / this.aspect;
        vboData[2469] = -0.019195;
        vboData[2470] = 0.8367829999999999 / this.aspect;
        vboData[2471] = -0.018415;
        vboData[2472] = 0.819253 / this.aspect;
        vboData[2473] = -0.39055;
        vboData[2474] = 0.821863 / this.aspect;
        vboData[2475] = -0.390445;
        vboData[2476] = 0.617749 / this.aspect;
        vboData[2477] = -0.395958;
        vboData[2478] = 0.6177809999999999 / this.aspect;
        vboData[2479] = -0.395956;
        vboData[2480] = 0.8912659999999999 / this.aspect;
        vboData[2481] = -0.221548;
        vboData[2482] = 0.8913039999999999 / this.aspect;
        vboData[2483] = -0.228737;
        vboData[2484] = 0.568031 / this.aspect;
        vboData[2485] = 0.399999;
        vboData[2486] = 0.5712579999999999 / this.aspect;
        vboData[2487] = 0.399772;
        vboData[2488] = 0.7874129999999999 / this.aspect;
        vboData[2489] = -0.391469;
        vboData[2490] = 0.786457 / this.aspect;
        vboData[2491] = -0.391534;
        vboData[2492] = 0.600563 / this.aspect;
        vboData[2493] = 0.380166;
        vboData[2494] = 0.5977969999999999 / this.aspect;
        vboData[2495] = 0.382104;
        vboData[2496] = 0.4009999999999999 / this.aspect;
        vboData[2497] = 0.254406;
        vboData[2498] = 0.40357299999999996 / this.aspect;
        vboData[2499] = 0.250807;
        vboData[2500] = 0.4782369999999999 / this.aspect;
        vboData[2501] = -0.195678;
        vboData[2502] = 0.4777929999999999 / this.aspect;
        vboData[2503] = -0.192253;
        vboData[2504] = 0.689967 / this.aspect;
        vboData[2505] = 0.242455;
        vboData[2506] = 0.693873 / this.aspect;
        vboData[2507] = 0.237981;
        vboData[2508] = 0.882795 / this.aspect;
        vboData[2509] = -0.262113;
        vboData[2510] = 0.8830039999999999 / this.aspect;
        vboData[2511] = -0.261212;
        vboData[2512] = 0.600563 / this.aspect;
        vboData[2513] = 0.380166;
        vboData[2514] = 0.602499 / this.aspect;
        vboData[2515] = 0.376443;
        vboData[2516] = 0.47500999999999993 / this.aspect;
        vboData[2517] = -0.137432;
        vboData[2518] = 0.47573999999999994 / this.aspect;
        vboData[2519] = -0.130106;
        vboData[2520] = 0.863575 / this.aspect;
        vboData[2521] = 0.017395;
        vboData[2522] = 0.8677219999999999 / this.aspect;
        vboData[2523] = 0.022275;
        vboData[2524] = 0.688746 / this.aspect;
        vboData[2525] = -0.395446;
        vboData[2526] = 0.684314 / this.aspect;
        vboData[2527] = -0.39527;
        vboData[2528] = 0.868875 / this.aspect;
        vboData[2529] = -0.38461;
        vboData[2530] = 0.868068 / this.aspect;
        vboData[2531] = -0.384886;
        vboData[2532] = 0.607015 / this.aspect;
        vboData[2533] = 0.161071;
        vboData[2534] = 0.601101 / this.aspect;
        vboData[2535] = 0.164876;
        vboData[2536] = 0.853691 / this.aspect;
        vboData[2537] = -0.045676;
        vboData[2538] = 0.8536819999999999 / this.aspect;
        vboData[2539] = -0.045637;
        vboData[2540] = 0.839148 / this.aspect;
        vboData[2541] = -0.00028;
        vboData[2542] = 0.834382 / this.aspect;
        vboData[2543] = -0.00301;
        vboData[2544] = 0.819253 / this.aspect;
        vboData[2545] = -0.39055;
        vboData[2546] = 0.8189009999999999 / this.aspect;
        vboData[2547] = -0.390547;
        vboData[2548] = 0.8912659999999999 / this.aspect;
        vboData[2549] = -0.221548;
        vboData[2550] = 0.8909969999999999 / this.aspect;
        vboData[2551] = -0.214494;
        vboData[2552] = 0.801509 / this.aspect;
        vboData[2553] = 0.215542;
        vboData[2554] = 0.796209 / this.aspect;
        vboData[2555] = 0.219375;
        vboData[2556] = 0.5773649999999999 / this.aspect;
        vboData[2557] = 0.04963;
        vboData[2558] = 0.581024 / this.aspect;
        vboData[2559] = 0.053354;
        vboData[2560] = 0.5162209999999999 / this.aspect;
        vboData[2561] = -0.39323;
        vboData[2562] = 0.5188109999999999 / this.aspect;
        vboData[2563] = -0.393033;
        vboData[2564] = 0.607015 / this.aspect;
        vboData[2565] = 0.161071;
        vboData[2566] = 0.6072059999999999 / this.aspect;
        vboData[2567] = 0.160943;
        vboData[2568] = 0.897565 / this.aspect;
        vboData[2569] = -0.192602;
        vboData[2570] = 0.8996 / this.aspect;
        vboData[2571] = -0.185182;
        vboData[2572] = 0.665164 / this.aspect;
        vboData[2573] = -0.395919;
        vboData[2574] = 0.6649689999999999 / this.aspect;
        vboData[2575] = -0.395925;
        vboData[2576] = 0.7874129999999999 / this.aspect;
        vboData[2577] = -0.391469;
        vboData[2578] = 0.788351 / this.aspect;
        vboData[2579] = -0.391412;
        vboData[2580] = 0.665164 / this.aspect;
        vboData[2581] = -0.395919;
        vboData[2582] = 0.6659809999999999 / this.aspect;
        vboData[2583] = -0.395848;
        vboData[2584] = 0.8933389999999999 / this.aspect;
        vboData[2585] = -0.107421;
        vboData[2586] = 0.892873 / this.aspect;
        vboData[2587] = -0.102;
        vboData[2588] = 0.7007789999999999 / this.aspect;
        vboData[2589] = 0.236697;
        vboData[2590] = 0.698511 / this.aspect;
        vboData[2591] = 0.236488;
        vboData[2592] = 0.48561 / this.aspect;
        vboData[2593] = 0.198514;
        vboData[2594] = 0.486494 / this.aspect;
        vboData[2595] = 0.198414;
        vboData[2596] = 0.533735 / this.aspect;
        vboData[2597] = 0.18709;
        vboData[2598] = 0.536922 / this.aspect;
        vboData[2599] = 0.186462;
        vboData[2600] = 0.556817 / this.aspect;
        vboData[2601] = -0.393974;
        vboData[2602] = 0.5641919999999999 / this.aspect;
        vboData[2603] = -0.393944;
        vboData[2604] = 0.524262 / this.aspect;
        vboData[2605] = -0.331608;
        vboData[2606] = 0.524123 / this.aspect;
        vboData[2607] = -0.33203;
        vboData[2608] = 0.875404 / this.aspect;
        vboData[2609] = -0.333393;
        vboData[2610] = 0.872314 / this.aspect;
        vboData[2611] = -0.327094;
        vboData[2612] = 0.8928019999999999 / this.aspect;
        vboData[2613] = -0.100094;
        vboData[2614] = 0.891683 / this.aspect;
        vboData[2615] = -0.094506;
        vboData[2616] = 0.8909969999999999 / this.aspect;
        vboData[2617] = -0.214494;
        vboData[2618] = 0.891011 / this.aspect;
        vboData[2619] = -0.211954;
        vboData[2620] = 0.8913039999999999 / this.aspect;
        vboData[2621] = -0.228737;
        vboData[2622] = 0.8912329999999999 / this.aspect;
        vboData[2623] = -0.231378;
        vboData[2624] = 0.516874 / this.aspect;
        vboData[2625] = -0.348056;
        vboData[2626] = 0.519219 / this.aspect;
        vboData[2627] = -0.342525;
        vboData[2628] = 0.8496859999999999 / this.aspect;
        vboData[2629] = -0.38584;
        vboData[2630] = 0.8497619999999999 / this.aspect;
        vboData[2631] = -0.38581;
        vboData[2632] = 0.486571 / this.aspect;
        vboData[2633] = -0.094016;
        vboData[2634] = 0.489321 / this.aspect;
        vboData[2635] = -0.089327;
        vboData[2636] = 0.737945 / this.aspect;
        vboData[2637] = -0.395348;
        vboData[2638] = 0.7475559999999999 / this.aspect;
        vboData[2639] = -0.39448;
        vboData[2640] = 0.521636 / this.aspect;
        vboData[2641] = -0.33063;
        vboData[2642] = 0.523134 / this.aspect;
        vboData[2643] = -0.331086;
        vboData[2644] = 0.678068 / this.aspect;
        vboData[2645] = 0.262606;
        vboData[2646] = 0.6747479999999999 / this.aspect;
        vboData[2647] = 0.268202;
        vboData[2648] = 0.47646999999999995 / this.aspect;
        vboData[2649] = -0.174244;
        vboData[2650] = 0.4766229999999999 / this.aspect;
        vboData[2651] = -0.179087;
        vboData[2652] = 0.4825379999999999 / this.aspect;
        vboData[2653] = 0.325822;
        vboData[2654] = 0.478166 / this.aspect;
        vboData[2655] = 0.327306;
        vboData[2656] = 0.884199 / this.aspect;
        vboData[2657] = -0.258722;
        vboData[2658] = 0.8830039999999999 / this.aspect;
        vboData[2659] = -0.261212;
        vboData[2660] = 0.7839179999999999 / this.aspect;
        vboData[2661] = 0.225604;
        vboData[2662] = 0.7823819999999999 / this.aspect;
        vboData[2663] = 0.226339;
        vboData[2664] = 0.873453 / this.aspect;
        vboData[2665] = -0.382612;
        vboData[2666] = 0.8727719999999999 / this.aspect;
        vboData[2667] = -0.382995;
        vboData[2668] = 0.5178339999999999 / this.aspect;
        vboData[2669] = 0.350846;
        vboData[2670] = 0.5180199999999999 / this.aspect;
        vboData[2671] = 0.350195;
        vboData[2672] = 0.5094989999999999 / this.aspect;
        vboData[2673] = 0.314078;
        vboData[2674] = 0.5059859999999999 / this.aspect;
        vboData[2675] = 0.315296;
        vboData[2676] = 0.72961 / this.aspect;
        vboData[2677] = 0.238074;
        vboData[2678] = 0.7352559999999999 / this.aspect;
        vboData[2679] = 0.238264;
        vboData[2680] = 0.8258589999999999 / this.aspect;
        vboData[2681] = 0.193136;
        vboData[2682] = 0.8293539999999999 / this.aspect;
        vboData[2683] = 0.189183;
        vboData[2684] = 0.607629 / this.aspect;
        vboData[2685] = 0.10785;
        vboData[2686] = 0.606791 / this.aspect;
        vboData[2687] = 0.101293;
        vboData[2688] = 0.683631 / this.aspect;
        vboData[2689] = -0.395286;
        vboData[2690] = 0.684314 / this.aspect;
        vboData[2691] = -0.39527;
        vboData[2692] = 0.689967 / this.aspect;
        vboData[2693] = 0.242455;
        vboData[2694] = 0.68802 / this.aspect;
        vboData[2695] = 0.245271;
        vboData[2696] = 0.5199079999999999 / this.aspect;
        vboData[2697] = -0.393186;
        vboData[2698] = 0.5191079999999999 / this.aspect;
        vboData[2699] = -0.393112;
        vboData[2700] = 0.605248 / this.aspect;
        vboData[2701] = -0.39548;
        vboData[2702] = 0.6052179999999999 / this.aspect;
        vboData[2703] = -0.395319;
        vboData[2704] = 0.7256549999999999 / this.aspect;
        vboData[2705] = 0.237936;
        vboData[2706] = 0.7225929999999999 / this.aspect;
        vboData[2707] = 0.237833;
        vboData[2708] = 0.42204699999999995 / this.aspect;
        vboData[2709] = 0.36249;
        vboData[2710] = 0.4168609999999999 / this.aspect;
        vboData[2711] = 0.364802;
        vboData[2712] = 0.7652909999999999 / this.aspect;
        vboData[2713] = -0.392853;
        vboData[2714] = 0.7642929999999999 / this.aspect;
        vboData[2715] = -0.392773;
        vboData[2716] = 0.7823819999999999 / this.aspect;
        vboData[2717] = 0.226339;
        vboData[2718] = 0.78204 / this.aspect;
        vboData[2719] = 0.226489;
        vboData[2720] = 0.801509 / this.aspect;
        vboData[2721] = 0.215542;
        vboData[2722] = 0.8027449999999999 / this.aspect;
        vboData[2723] = 0.214584;
        vboData[2724] = 0.8116099999999999 / this.aspect;
        vboData[2725] = -0.390816;
        vboData[2726] = 0.811364 / this.aspect;
        vboData[2727] = -0.390814;
        vboData[2728] = 0.8066929999999999 / this.aspect;
        vboData[2729] = 0.211523;
        vboData[2730] = 0.808138 / this.aspect;
        vboData[2731] = 0.210178;
        vboData[2732] = 0.513413 / this.aspect;
        vboData[2733] = -0.063073;
        vboData[2734] = 0.5178619999999999 / this.aspect;
        vboData[2735] = -0.060014;
        vboData[2736] = 0.476278 / this.aspect;
        vboData[2737] = -0.151813;
        vboData[2738] = 0.4755959999999999 / this.aspect;
        vboData[2739] = -0.146364;
        vboData[2740] = 0.6065929999999999 / this.aspect;
        vboData[2741] = 0.10007;
        vboData[2742] = 0.606688 / this.aspect;
        vboData[2743] = 0.100485;
        vboData[2744] = 0.8730229999999999 / this.aspect;
        vboData[2745] = -0.058498;
        vboData[2746] = 0.870142 / this.aspect;
        vboData[2747] = -0.055548;
        vboData[2748] = 0.6068939999999999 / this.aspect;
        vboData[2749] = 0.082714;
        vboData[2750] = 0.606885 / this.aspect;
        vboData[2751] = 0.082705;
        vboData[2752] = 0.871294 / this.aspect;
        vboData[2753] = 0.029819;
        vboData[2754] = 0.8683839999999999 / this.aspect;
        vboData[2755] = 0.023844;
        vboData[2756] = 0.875404 / this.aspect;
        vboData[2757] = -0.333393;
        vboData[2758] = 0.877113 / this.aspect;
        vboData[2759] = -0.338757;
        vboData[2760] = 0.5064649999999999 / this.aspect;
        vboData[2761] = 0.194358;
        vboData[2762] = 0.514359 / this.aspect;
        vboData[2763] = 0.192721;
        vboData[2764] = 0.47654699999999994 / this.aspect;
        vboData[2765] = -0.159728;
        vboData[2766] = 0.47646999999999995 / this.aspect;
        vboData[2767] = -0.152537;
        vboData[2768] = 0.891573 / this.aspect;
        vboData[2769] = -0.23561;
        vboData[2770] = 0.8911149999999999 / this.aspect;
        vboData[2771] = -0.239957;
        vboData[2772] = 0.5163359999999999 / this.aspect;
        vboData[2773] = 0.311775;
        vboData[2774] = 0.5147219999999999 / this.aspect;
        vboData[2775] = 0.312555;
        vboData[2776] = 0.37949199999999994 / this.aspect;
        vboData[2777] = 0.306564;
        vboData[2778] = 0.380721 / this.aspect;
        vboData[2779] = 0.299814;
        vboData[2780] = 0.4810009999999999 / this.aspect;
        vboData[2781] = -0.108138;
        vboData[2782] = 0.48388299999999995 / this.aspect;
        vboData[2783] = -0.101082;
        vboData[2784] = 0.572333 / this.aspect;
        vboData[2785] = -0.393681;
        vboData[2786] = 0.574719 / this.aspect;
        vboData[2787] = -0.39353;
        vboData[2788] = 0.8499789999999999 / this.aspect;
        vboData[2789] = 0.160154;
        vboData[2790] = 0.84764 / this.aspect;
        vboData[2791] = 0.163729;
        vboData[2792] = 0.746202 / this.aspect;
        vboData[2793] = 0.237296;
        vboData[2794] = 0.7463549999999999 / this.aspect;
        vboData[2795] = 0.237267;
        vboData[2796] = 0.740019 / this.aspect;
        vboData[2797] = 0.237998;
        vboData[2798] = 0.738594 / this.aspect;
        vboData[2799] = 0.237926;
        vboData[2800] = 0.7652909999999999 / this.aspect;
        vboData[2801] = -0.392853;
        vboData[2802] = 0.766097 / this.aspect;
        vboData[2803] = -0.392574;
        vboData[2804] = 0.6956239999999999 / this.aspect;
        vboData[2805] = 0.23681;
        vboData[2806] = 0.6939179999999999 / this.aspect;
        vboData[2807] = 0.237929;
        vboData[2808] = 0.533404 / this.aspect;
        vboData[2809] = -0.393421;
        vboData[2810] = 0.533103 / this.aspect;
        vboData[2811] = -0.393406;
        vboData[2812] = 0.8655329999999999 / this.aspect;
        vboData[2813] = -0.38525;
        vboData[2814] = 0.8644339999999999 / this.aspect;
        vboData[2815] = -0.38531;
        vboData[2816] = 0.877477 / this.aspect;
        vboData[2817] = 0.066319;
        vboData[2818] = 0.8775059999999999 / this.aspect;
        vboData[2819] = 0.064506;
        vboData[2820] = 0.841452 / this.aspect;
        vboData[2821] = -0.387261;
        vboData[2822] = 0.8361909999999999 / this.aspect;
        vboData[2823] = -0.38965;
        vboData[2824] = 0.49982099999999996 / this.aspect;
        vboData[2825] = -0.284564;
        vboData[2826] = 0.499706 / this.aspect;
        vboData[2827] = -0.283591;
        vboData[2828] = 0.871486 / this.aspect;
        vboData[2829] = 0.116926;
        vboData[2830] = 0.873983 / this.aspect;
        vboData[2831] = 0.109646;
        vboData[2832] = 0.539767 / this.aspect;
        vboData[2833] = -0.047351;
        vboData[2834] = 0.5398879999999999 / this.aspect;
        vboData[2835] = -0.047198;
        vboData[2836] = 0.6484949999999999 / this.aspect;
        vboData[2837] = -0.396674;
        vboData[2838] = 0.6478809999999999 / this.aspect;
        vboData[2839] = -0.396628;
        vboData[2840] = 0.897181 / this.aspect;
        vboData[2841] = -0.150144;
        vboData[2842] = 0.897009 / this.aspect;
        vboData[2843] = -0.153703;
        vboData[2844] = 0.658519 / this.aspect;
        vboData[2845] = 0.301519;
        vboData[2846] = 0.659897 / this.aspect;
        vboData[2847] = 0.298232;
        vboData[2848] = 0.661751 / this.aspect;
        vboData[2849] = 0.294775;
        vboData[2850] = 0.6614899999999999 / this.aspect;
        vboData[2851] = 0.295127;
        vboData[2852] = 0.7807689999999999 / this.aspect;
        vboData[2853] = -0.391921;
        vboData[2854] = 0.784642 / this.aspect;
        vboData[2855] = -0.391658;
        vboData[2856] = 0.5801299999999999 / this.aspect;
        vboData[2857] = 0.395946;
        vboData[2858] = 0.5851609999999999 / this.aspect;
        vboData[2859] = 0.393088;
        vboData[2860] = 0.510575 / this.aspect;
        vboData[2861] = -0.307913;
        vboData[2862] = 0.510293 / this.aspect;
        vboData[2863] = -0.307031;
        vboData[2864] = 0.5939949999999999 / this.aspect;
        vboData[2865] = -0.394424;
        vboData[2866] = 0.59539 / this.aspect;
        vboData[2867] = -0.394427;
        vboData[2868] = 0.6573669999999999 / this.aspect;
        vboData[2869] = -0.396366;
        vboData[2870] = 0.654164 / this.aspect;
        vboData[2871] = -0.396381;
        vboData[2872] = 0.8668769999999999 / this.aspect;
        vboData[2873] = -0.320158;
        vboData[2874] = 0.8641079999999999 / this.aspect;
        vboData[2875] = -0.318029;
        vboData[2876] = 0.6573669999999999 / this.aspect;
        vboData[2877] = -0.396366;
        vboData[2878] = 0.660006 / this.aspect;
        vboData[2879] = -0.396137;
        vboData[2880] = 0.37787799999999994 / this.aspect;
        vboData[2881] = 0.329434;
        vboData[2882] = 0.379108 / this.aspect;
        vboData[2883] = 0.334794;
        vboData[2884] = 0.4067989999999999 / this.aspect;
        vboData[2885] = 0.246722;
        vboData[2886] = 0.40357299999999996 / this.aspect;
        vboData[2887] = 0.250807;
        vboData[2888] = 0.8361909999999999 / this.aspect;
        vboData[2889] = -0.38965;
        vboData[2890] = 0.8353459999999999 / this.aspect;
        vboData[2891] = -0.389882;
        vboData[2892] = 0.45645899999999995 / this.aspect;
        vboData[2893] = 0.340763;
        vboData[2894] = 0.4612219999999999 / this.aspect;
        vboData[2895] = 0.337214;
        vboData[2896] = 0.650134 / this.aspect;
        vboData[2897] = 0.315227;
        vboData[2898] = 0.6503089999999999 / this.aspect;
        vboData[2899] = 0.314817;
        vboData[2900] = 0.6360509999999999 / this.aspect;
        vboData[2901] = -0.396694;
        vboData[2902] = 0.6287919999999999 / this.aspect;
        vboData[2903] = -0.396634;
        vboData[2904] = 0.756418 / this.aspect;
        vboData[2905] = 0.235923;
        vboData[2906] = 0.7548819999999999 / this.aspect;
        vboData[2907] = 0.236148;
        vboData[2908] = 0.667893 / this.aspect;
        vboData[2909] = -0.395756;
        vboData[2910] = 0.6680189999999999 / this.aspect;
        vboData[2911] = -0.395745;
        vboData[2912] = 0.8407229999999999 / this.aspect;
        vboData[2913] = -0.02291;
        vboData[2914] = 0.8374189999999999 / this.aspect;
        vboData[2915] = -0.019195;
        vboData[2916] = 0.840568 / this.aspect;
        vboData[2917] = 0.174486;
        vboData[2918] = 0.845561 / this.aspect;
        vboData[2919] = 0.167388;
        vboData[2920] = 0.863575 / this.aspect;
        vboData[2921] = 0.017395;
        vboData[2922] = 0.859043 / this.aspect;
        vboData[2923] = 0.012928;
        vboData[2924] = 0.6091759999999999 / this.aspect;
        vboData[2925] = 0.158581;
        vboData[2926] = 0.6072059999999999 / this.aspect;
        vboData[2927] = 0.160943;
        vboData[2928] = 0.412829 / this.aspect;
        vboData[2929] = 0.366086;
        vboData[2930] = 0.415523 / this.aspect;
        vboData[2931] = 0.364904;
        vboData[2932] = 0.4878389999999999 / this.aspect;
        vboData[2933] = -0.247241;
        vboData[2934] = 0.48995 / this.aspect;
        vboData[2935] = -0.254797;
        vboData[2936] = 0.47646999999999995 / this.aspect;
        vboData[2937] = -0.152537;
        vboData[2938] = 0.47646999999999995 / this.aspect;
        vboData[2939] = -0.152443;
        vboData[2940] = 0.746202 / this.aspect;
        vboData[2941] = 0.237296;
        vboData[2942] = 0.746035 / this.aspect;
        vboData[2943] = 0.237309;
        vboData[2944] = 0.8928019999999999 / this.aspect;
        vboData[2945] = -0.100094;
        vboData[2946] = 0.892873 / this.aspect;
        vboData[2947] = -0.102;
        vboData[2948] = 0.48561 / this.aspect;
        vboData[2949] = 0.198514;
        vboData[2950] = 0.478313 / this.aspect;
        vboData[2951] = 0.20009;
        vboData[2952] = 0.5178339999999999 / this.aspect;
        vboData[2953] = 0.350846;
        vboData[2954] = 0.516681 / this.aspect;
        vboData[2955] = 0.357586;
        vboData[2956] = 0.864146 / this.aspect;
        vboData[2957] = -0.385341;
        vboData[2958] = 0.8643919999999999 / this.aspect;
        vboData[2959] = -0.385312;
        vboData[2960] = 0.658519 / this.aspect;
        vboData[2961] = 0.301519;
        vboData[2962] = 0.6555639999999999 / this.aspect;
        vboData[2963] = 0.306137;
        vboData[2964] = 0.8655329999999999 / this.aspect;
        vboData[2965] = -0.38525;
        vboData[2966] = 0.8660509999999999 / this.aspect;
        vboData[2967] = -0.38512;
        vboData[2968] = 0.5199079999999999 / this.aspect;
        vboData[2969] = -0.34071;
        vboData[2970] = 0.519219 / this.aspect;
        vboData[2971] = -0.342525;
        vboData[2972] = 0.756418 / this.aspect;
        vboData[2973] = 0.235923;
        vboData[2974] = 0.761873 / this.aspect;
        vboData[2975] = 0.234314;
        vboData[2976] = 0.489989 / this.aspect;
        vboData[2977] = -0.087824;
        vboData[2978] = 0.489321 / this.aspect;
        vboData[2979] = -0.089327;
        vboData[2980] = 0.753192 / this.aspect;
        vboData[2981] = -0.39422;
        vboData[2982] = 0.7475559999999999 / this.aspect;
        vboData[2983] = -0.39448;
        vboData[2984] = 0.845561 / this.aspect;
        vboData[2985] = 0.167388;
        vboData[2986] = 0.84764 / this.aspect;
        vboData[2987] = 0.163729;
        vboData[2988] = 0.45645899999999995 / this.aspect;
        vboData[2989] = 0.340763;
        vboData[2990] = 0.45236699999999996 / this.aspect;
        vboData[2991] = 0.342801;
        vboData[2992] = 0.698298 / this.aspect;
        vboData[2993] = 0.236466;
        vboData[2994] = 0.696658 / this.aspect;
        vboData[2995] = 0.236345;
        vboData[2996] = 0.883277 / this.aspect;
        vboData[2997] = -0.279706;
        vboData[2998] = 0.882922 / this.aspect;
        vboData[2999] = -0.283863;
        vboData[3000] = 0.5348109999999999 / this.aspect;
        vboData[3001] = 0.312646;
        vboData[3002] = 0.5341349999999999 / this.aspect;
        vboData[3003] = 0.314302;
        vboData[3004] = 0.53531 / this.aspect;
        vboData[3005] = -0.393786;
        vboData[3006] = 0.533404 / this.aspect;
        vboData[3007] = -0.393421;
        vboData[3008] = 0.499706 / this.aspect;
        vboData[3009] = -0.283591;
        vboData[3010] = 0.498915 / this.aspect;
        vboData[3011] = -0.278101;
        vboData[3012] = 0.857659 / this.aspect;
        vboData[3013] = 0.011683;
        vboData[3014] = 0.85852 / this.aspect;
        vboData[3015] = 0.012615;
        vboData[3016] = 0.502701 / this.aspect;
        vboData[3017] = 0.316614;
        vboData[3018] = 0.5059859999999999 / this.aspect;
        vboData[3019] = 0.315296;
        vboData[3020] = 0.502701 / this.aspect;
        vboData[3021] = 0.316614;
        vboData[3022] = 0.49971999999999994 / this.aspect;
        vboData[3023] = 0.317594;
        vboData[3024] = 0.544488 / this.aspect;
        vboData[3025] = 0.399698;
        vboData[3026] = 0.5494249999999999 / this.aspect;
        vboData[3027] = 0.400445;
        vboData[3028] = 0.554781 / this.aspect;
        vboData[3029] = 0.293478;
        vboData[3030] = 0.5548829999999999 / this.aspect;
        vboData[3031] = 0.293417;
        vboData[3032] = 0.63801 / this.aspect;
        vboData[3033] = 0.333522;
        vboData[3034] = 0.63374 / this.aspect;
        vboData[3035] = 0.338707;
        vboData[3036] = 0.868721 / this.aspect;
        vboData[3037] = 0.124254;
        vboData[3038] = 0.870678 / this.aspect;
        vboData[3039] = 0.118987;
        vboData[3040] = 0.682561 / this.aspect;
        vboData[3041] = 0.254822;
        vboData[3042] = 0.6817249999999999 / this.aspect;
        vboData[3043] = 0.256026;
        vboData[3044] = 0.677723 / this.aspect;
        vboData[3045] = -0.39543;
        vboData[3046] = 0.683631 / this.aspect;
        vboData[3047] = -0.395286;
        vboData[3048] = 0.763408 / this.aspect;
        vboData[3049] = -0.393034;
        vboData[3050] = 0.7642929999999999 / this.aspect;
        vboData[3051] = -0.392773;
        vboData[3052] = 0.763408 / this.aspect;
        vboData[3053] = -0.393034;
        vboData[3054] = 0.7540849999999999 / this.aspect;
        vboData[3055] = -0.39389;
        vboData[3056] = 0.805234 / this.aspect;
        vboData[3057] = 0.212811;
        vboData[3058] = 0.8027449999999999 / this.aspect;
        vboData[3059] = 0.214584;
        vboData[3060] = 0.810534 / this.aspect;
        vboData[3061] = 0.208006;
        vboData[3062] = 0.808138 / this.aspect;
        vboData[3063] = 0.210178;
        vboData[3064] = 0.8969119999999999 / this.aspect;
        vboData[3065] = -0.143;
        vboData[3066] = 0.896106 / this.aspect;
        vboData[3067] = -0.135856;
        vboData[3068] = 0.606791 / this.aspect;
        vboData[3069] = 0.101293;
        vboData[3070] = 0.606688 / this.aspect;
        vboData[3071] = 0.100485;
        vboData[3072] = 0.846675 / this.aspect;
        vboData[3073] = -0.029732;
        vboData[3074] = 0.8437539999999999 / this.aspect;
        vboData[3075] = -0.026527;
        vboData[3076] = 0.850938 / this.aspect;
        vboData[3077] = -0.036514;
        vboData[3078] = 0.8506589999999999 / this.aspect;
        vboData[3079] = -0.036096;
        vboData[3080] = 0.6930609999999999 / this.aspect;
        vboData[3081] = -0.395131;
        vboData[3082] = 0.694781 / this.aspect;
        vboData[3083] = -0.395089;
        vboData[3084] = 0.516605 / this.aspect;
        vboData[3085] = 0.192164;
        vboData[3086] = 0.514359 / this.aspect;
        vboData[3087] = 0.192721;
        vboData[3088] = 0.495788 / this.aspect;
        vboData[3089] = 0.196363;
        vboData[3090] = 0.48759699999999995 / this.aspect;
        vboData[3091] = 0.198309;
        vboData[3092] = 0.5377289999999999 / this.aspect;
        vboData[3093] = 0.31011;
        vboData[3094] = 0.5419649999999999 / this.aspect;
        vboData[3095] = 0.306108;
        vboData[3096] = 0.5427599999999999 / this.aspect;
        vboData[3097] = -0.393757;
        vboData[3098] = 0.5437639999999999 / this.aspect;
        vboData[3099] = -0.393753;
        vboData[3100] = 0.5199079999999999 / this.aspect;
        vboData[3101] = -0.34071;
        vboData[3102] = 0.5232669999999999 / this.aspect;
        vboData[3103] = -0.334586;
        vboData[3104] = 0.678703 / this.aspect;
        vboData[3105] = 0.26131;
        vboData[3106] = 0.681657 / this.aspect;
        vboData[3107] = 0.256124;
        vboData[3108] = 0.851131 / this.aspect;
        vboData[3109] = -0.38583;
        vboData[3110] = 0.851569 / this.aspect;
        vboData[3111] = -0.38578;
        vboData[3112] = 0.41908899999999993 / this.aspect;
        vboData[3113] = 0.234095;
        vboData[3114] = 0.42438999999999993 / this.aspect;
        vboData[3115] = 0.229104;
        vboData[3116] = 0.646917 / this.aspect;
        vboData[3117] = 0.320197;
        vboData[3118] = 0.6444669999999999 / this.aspect;
        vboData[3119] = 0.324376;
        this.sceneVBOs[i].copy(vboData);
    }

    function addRelayWallVertices(vboData, aspect) {
        vboData[0] = 1.2 / aspect;
        vboData[1] = -1.0;
        vboData[2] = 1.2 / aspect;
        vboData[3] = 1.0;
    }

    Renderer.prototype.createVBOs = function () {
        var gl = this.gl;

        this.rayVbo = new tgl.VertexBuffer();
        this.rayVbo.addAttribute("TexCoord", 3, gl.FLOAT, false);
        this.rayVbo.init(this.rayCount * 2);

        var vboData = new Float32Array(this.rayCount * 2 * 3);
        for (var i = 0; i < this.rayCount; ++i) {
            var u = ((i % this.raySize) + 0.5) / this.raySize;
            var v = (Math.floor(i / this.raySize) + 0.5) / this.raySize;
            vboData[i * 6 + 0] = vboData[i * 6 + 3] = u;
            vboData[i * 6 + 1] = vboData[i * 6 + 4] = v;
            vboData[i * 6 + 2] = 0.0;
            vboData[i * 6 + 5] = 1.0;
        }
        this.rayVbo.copy(vboData);

        this.rayVbo2 = new tgl.VertexBuffer();
        this.rayVbo2.addAttribute("TexCoord", 2, gl.FLOAT, false);
        this.rayVbo2.init(this.rayCount);

        var vboData2 = new Float32Array(this.rayCount * 2);
        for (var i = 0; i < this.rayCount; ++i) {
            var u = ((i % this.raySize) + 0.5) / this.raySize;
            var v = (Math.floor(i / this.raySize) + 0.5) / this.raySize;
            vboData2[i * 2 + 0] = u;
            vboData2[i * 2 + 1] = v;
        }
        this.rayVbo2.copy(vboData2);

        this.fbo = new tgl.RenderTarget();

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.blendFunc(gl.ONE, gl.ONE);
    }

    Renderer.prototype.setCameraModel = function (id) {
        this.isVirtualConf = (id == 0);
        this.isConvCamera = (id == 2);
        
        // Clean previous camera model times to avoid mixing different models
        if (this.nlosQueries) {
            for (var i = this.nlosQueries.length-1; i >= 0; i--) {
                var query = this.nlosQueries[i];
                let available = this.timerExt.getQueryObjectEXT(query, this.timerExt.QUERY_RESULT_AVAILABLE_EXT);
                let disjoint = this.gl.getParameter(this.timerExt.GPU_DISJOINT_EXT);

                if (available || disjoint) {
                    // Clean up the query object.
                    this.timerExt.deleteQueryEXT(query);
                }
                this.nlosQueries.pop();
            }
        }
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.setAddModules = function (addModules) {
        this.addModules = addModules;
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.replaceNumSpads = function (shaderName) {
        var pattern = new RegExp('{numSpads}');
        var shaderSource = Shaders[shaderName];
        return shaderSource.replace(pattern, this.numSpads);
    }

    Renderer.prototype.replaceNumIntervals = function (shaderName) {
        this.timeVector = new Float32Array(linspace(0.0, this.numIntervals * this.deltaT, this.numIntervals));
        this.timeVectorTex = new tgl.Texture(this.numIntervals, 1, 1, true, false, true, this.timeVector);
        var pattern = new RegExp('{numIntervals}', 'g');
        var shaderSource = Shaders[shaderName];
        return shaderSource.replace(pattern, this.numIntervals);
    }

    Renderer.prototype.changeSpadResolution = function (numSpads) {
        if (this.spadHeights === undefined || this.spadHeights.length != numSpads) {
            this.numSpads = numSpads;
            this.setSpadPositions(false);
            this.createNLOSBuffers(ModifiedAttributes.NumSpads);
            this.resetActiveBlock();
            this.reset();
        }
    }

    Renderer.prototype.setSpadBoundaries = function (low, high) {
        if (this.spadBoundaries === undefined || this.spadBoundaries[0] != low || this.spadBoundaries != high) {
            var realLow = low, realHigh = high;
            this.spadBoundaries = [realLow, realHigh];
            this.sbVbo = this.createSBVbo();
            this.setSpadPositions(true);
            this.resetActiveBlock();
            this.reset();
        }
    }

    Renderer.prototype.setSpadPos = function (spadPos) {
        this.spadPos = spadPos;
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setDeltaT = function (deltaT) {
        this.deltaT = deltaT;
        this.numIntervals = parseInt(this.maxTime / this.deltaT + 0.05);
        if (this.numIntervals > this.maxTextureSize) {
            this.numIntervals = this.maxTextureSize;
        }
        this.maxTime = this.deltaT * this.numIntervals;
        var pfConvFrag = this.replaceNumIntervals("pf-conv-frag");
        Shaders["replacedPf"] = pfConvFrag;
        this.pfProgram = new tgl.Shader(Shaders, "bp-vert", "replacedPf");
        this.createNLOSBuffers(ModifiedAttributes.NumIntervals);
        this.computePFFilter();
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setMaxTime = function (maxTime) {
        this.numIntervals = parseInt(maxTime / this.deltaT + 0.05);
        if (this.numIntervals > this.maxTextureSize) {
            this.numIntervals = this.maxTextureSize;
        }
        this.maxTime = this.deltaT * this.numIntervals;
        var pfConvFrag = this.replaceNumIntervals("pf-conv-frag");
        Shaders["replacedPf"] = pfConvFrag;
        this.pfProgram = new tgl.Shader(Shaders, "bp-vert", "replacedPf");
        this.createNLOSBuffers(ModifiedAttributes.NumIntervals);
        this.computePFFilter();
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setConfocal = function (isConf) {
        // Will have to change if we add more capture methods
        if (this.isConf != isConf) {
            this.isConf = isConf;
            if (!isConf) {
                this.laserGrid = [1.2, (this.spadBoundaries[0] + this.spadBoundaries[1]) / 2];
                this.setEmitterPos(this.emitterPos, this.scene2canvas(this.laserGrid), false);
            } else {
                this.spreadType = tcore.Renderer.SPREAD_LASER;
                this.laserGrid = [this.spadPoints[2 * this.confCounter], this.spadPoints[2 * this.confCounter + 1]];
                this.setEmitterPos(this.emitterPos, this.scene2canvas(this.laserGrid), false);
            }
            this.createNLOSBuffers(ModifiedAttributes.Confocality);
        }
        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.setUsePhase = function (usePhase) {
        this.usePhase = usePhase;
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.setInstant = function (instant) {
        this.instant = instant;
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.addInstantSlider = function (slider) {
        this.instantSlider = slider;
    }

    Renderer.prototype.updateSlider = function () {
        if (this.instantSlider != undefined && this.instantSlider != null) {
            this.instantSlider.setValue(this.instant, false);
            this.instantSlider.updateLabel();
        }
    }

    Renderer.prototype.addScene = function (fragName, vertices) {
        this.tracePrograms.push(new tgl.Shader(Shaders, "trace-vert", fragName));

        // Add vertex buffer to show the geometry
        this.sceneVBOs.push(new tgl.VertexBuffer());
        this.sceneVBOs[this.sceneVBOs.length - 1].addAttribute("Position", 2, this.gl.FLOAT, false);
        var numSegments = 0;
        vertices.forEach(vertexList => {
            numSegments += (vertexList.length / 2 - 1);
        });
        this.sceneVBOs[this.sceneVBOs.length - 1].init(numSegments * 2 + 2);
        var vboData = new Float32Array((numSegments * 2 + 2) * 2);
        addRelayWallVertices(vboData, this.aspect);
        var j = 4;
        vertices.forEach(vertexList => {
            for (var i = 0; i < vertexList.length / 2 - 1; i++) {
                vboData[j] = vertexList[2 * i] / this.aspect; j++;
                vboData[j] = vertexList[2 * i + 1]; j++;
                vboData[j] = vertexList[2 * i + 2] / this.aspect; j++;
                vboData[j] = vertexList[2 * i + 3]; j++;
            }
        });
        this.sceneVBOs[this.sceneVBOs.length - 1].copy(vboData);
    }

    Renderer.prototype.setSpadPositions = function (changedBounds = false) {
        var changeNumSpads = (this.spadHeights === undefined || this.spadHeights.length != this.numSpads);
        var changePos = (changeNumSpads || changedBounds);

        if (changePos && this.spadBoundaries != undefined && this.numSpads != undefined) {
            this.spadHeights = intermediatePositions(this.spadBoundaries[1], this.spadBoundaries[0], this.numSpads);
            this.spadPoints = [];

            this.spads = [];
            for (var i = 0; i < this.spadHeights.length; i++) {
                var h = this.spadHeights[i];
                this.spads.push(new SpadData([1.2, h], this.spadRadius, this.deltaT, this.maxTime));
                this.spadPoints.push(1.2);
                this.spadPoints.push(h);
            }

            var spadGridData = new Float32Array(this.numSpads * 4);
            for (var i = 0; i < this.numSpads; i++) {
                spadGridData[i * 4] = this.spadPoints[i * 2];
                spadGridData[i * 4 + 1] = this.spadPoints[i * 2 + 1];
                spadGridData[i * 4 + 2] = 0.0;
                spadGridData[i * 4 + 3] = 0.0;
            }
            this.spadGridTex = new tgl.Texture(this.numSpads, 1, 4, true, false, true, spadGridData);
            this.spadNormalsData = spadGridData;
            for (var i = 0; i < this.numSpads; i++) {
                this.spadNormalsData[i * 4] = -1.0;
                this.spadNormalsData[i * 4 + 1] = 0.0;
            }
            this.spadNormalsTex = new tgl.Texture(this.numSpads, 1, 4, true, false, true, this.spadNormalsData);

            var dist = Math.abs(this.spadHeights[1] - this.spadHeights[0]);
            if (this.spadRadius > dist / 2) {
                this.spadRadius = dist / 2;
            } else if (dist / 2 >= 0.0035) {
                this.spadRadius = 0.0035;
            }

            // Recompile shaders only if necessary
            if (changeNumSpads) {
                var bpFrag = this.replaceNumSpads("bp-frag");
                Shaders["replacedBp"] = bpFrag;
                this.bpProgram = new tgl.Shader(Shaders, "bp-vert", "replacedBp");
                var bpConf = this.replaceNumSpads("bp-conf-frag");
                Shaders["replacedConfBp"] = bpConf;
                this.bpConfProgram = new tgl.Shader(Shaders, "bp-vert", "replacedConfBp");
                var hVert = this.replaceNumSpads("h-vert");
                Shaders["replacedH"] = hVert;
                this.hProgram = new tgl.Shader(Shaders, "replacedH", "h-frag");
            }
        }
    }

    Renderer.prototype.setSigma = function (sigma) {
        this.sigma = sigma;
        this.computePFFilter();
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.setWavelength = function (wl) {
        this.wl = wl;
        this.computePFFilter();
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.resetActiveBlock = function () {
        this.activeBlock = 4;
    }

    Renderer.prototype.computeEmissionSpectrum = function () {
        if (!this.emissionSpectrum)
            this.emissionSpectrum = new Float32Array(tcore.Renderer.SPECTRUM_SAMPLES);

        switch (this.emissionSpectrumType) {
            case tcore.Renderer.SPECTRUM_WHITE:
                for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i)
                    this.emissionSpectrum[i] = 1.0;
                break;
            case tcore.Renderer.SPECTRUM_INCANDESCENT:
                var h = 6.626070040e-34;
                var c = 299792458.0;
                var kB = 1.3806488e-23;
                var T = this.emitterTemperature;

                for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i) {
                    var l = (LAMBDA_MIN + (LAMBDA_MAX - LAMBDA_MIN) * (i + 0.5) / tcore.Renderer.SPECTRUM_SAMPLES) * 1e-9;
                    var power = 1e-12 * (2.0 * h * c * c) / (l * l * l * l * l * (Math.exp(h * c / (l * kB * T)) - 1.0));

                    this.emissionSpectrum[i] = power;
                }
                break;
            case tcore.Renderer.SPECTRUM_GAS_DISCHARGE:
                var wavelengths = GasDischargeLines[this.emitterGas].wavelengths;
                var strengths = GasDischargeLines[this.emitterGas].strengths;

                for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i)
                    this.emissionSpectrum[i] = 0.0;

                for (var i = 0; i < wavelengths.length; ++i) {
                    var idx = Math.floor((wavelengths[i] - LAMBDA_MIN) / (LAMBDA_MAX - LAMBDA_MIN) * tcore.Renderer.SPECTRUM_SAMPLES);
                    if (idx < 0 || idx >= tcore.Renderer.SPECTRUM_SAMPLES)
                        continue;

                    this.emissionSpectrum[idx] += strengths[i];
                }
        }

        this.computeSpectrumIcdf();

        this.emission.bind(0);
        this.emission.copy(this.emissionSpectrum);
        this.reset();
    }

    Renderer.prototype.computeSpectrumIcdf = function () {
        if (!this.cdf) {
            this.cdf = new Float32Array(tcore.Renderer.SPECTRUM_SAMPLES + 1);
            this.pdf = new Float32Array(tcore.Renderer.SPECTRUM_SAMPLES);
            this.icdf = new Float32Array(tcore.Renderer.ICDF_SAMPLES);
        }

        var sum = 0.0;
        for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i)
            sum += this.emissionSpectrum[i];

        /* Mix in 10% of a uniform sample distribution to stay on the safe side.
           Especially gas emission spectra with lots of emission lines
           tend to have small peaks that fall through the cracks otherwise */
        var safetyPadding = 0.1;
        var normalization = tcore.Renderer.SPECTRUM_SAMPLES / sum;

        /* Precompute cdf and pdf (unnormalized for now) */
        this.cdf[0] = 0.0;
        for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i) {
            this.emissionSpectrum[i] *= normalization;

            /* Also take into account the observer response when distributing samples.
               Otherwise tends to prioritize peaks just barely outside the visible spectrum */
            var observerResponse = (1.0 / 3.0) * (
                Math.abs(this.spectrumTable[i * 4]) +
                Math.abs(this.spectrumTable[i * 4 + 1]) +
                Math.abs(this.spectrumTable[i * 4 + 2]));

            this.pdf[i] = observerResponse * (this.emissionSpectrum[i] + safetyPadding) / (1.0 + safetyPadding);
            this.cdf[i + 1] = this.pdf[i] + this.cdf[i];
        }

        /* All done! Time to normalize */
        var cdfSum = this.cdf[tcore.Renderer.SPECTRUM_SAMPLES];
        for (var i = 0; i < tcore.Renderer.SPECTRUM_SAMPLES; ++i) {
            this.pdf[i] *= tcore.Renderer.SPECTRUM_SAMPLES / cdfSum;
            this.cdf[i + 1] /= cdfSum;
        }
        /* Make sure we don't fall into any floating point pits */
        this.cdf[tcore.Renderer.SPECTRUM_SAMPLES] = 1.0;

        /* Precompute an inverted mapping of the cdf. This is biased!
           Unfortunately we can't really afford to do runtime bisection
           on the GPU, so this will have to do. For our purposes a small
           amount of bias is tolerable anyway. */
        var cdfIdx = 0;
        for (var i = 0; i < tcore.Renderer.ICDF_SAMPLES; ++i) {
            var target = Math.min((i + 1) / tcore.Renderer.ICDF_SAMPLES, 1.0);
            while (this.cdf[cdfIdx] < target)
                cdfIdx++;
            this.icdf[i] = (cdfIdx - 1.0) / tcore.Renderer.SPECTRUM_SAMPLES;
        }

        this.emissionIcdf.bind(0);
        this.emissionIcdf.copy(this.icdf);
        this.emissionPdf.bind(0);
        this.emissionPdf.copy(this.pdf);
    }

    Renderer.prototype.setMaxPathLength = function (length) {
        if (length != this.maxPathLength) {
            this.maxPathLength = length;
            this.reset();
        }
    }

    Renderer.prototype.setMinPathLength = function (length) {
        if (length != this.minPathLength) {
            this.minPathLength = length;
            this.reset();
        }
    }

    Renderer.prototype.setMaxSampleCount = function (count) {
        this.maxSampleCount = count;
    }

    Renderer.prototype.changeResolution = function (width, height) {
        if (this.width && this.height) {
            this.emitterPos[0] = (this.emitterPos[0] + 0.5) * width / this.width - 0.5;
            this.emitterPos[1] = (this.emitterPos[1] + 0.5) * height / this.height - 0.5;
        }

        this.width = width;
        this.height = height;
        this.aspect = this.width / this.height;

        this.screenBuffer = new tgl.Texture(this.width, this.height, 4, true, false, true, null);
        this.waveBuffer = new tgl.Texture(this.width, this.height, 4, true, false, true, null);

        this.resetActiveBlock();
        this.reset();
    }

    Renderer.prototype.changeReconstructionResolution = function (height) {
        if (this.numPixels === undefined || this.numPixels[1] != height) {
            this.numPixels = [parseInt(height * this.aspect), height];
            this.createNLOSBuffers(ModifiedAttributes.NumPixels);

            // Clear previous reconstruction time measurements
            if (this.nlosQueries) {
                for (var i = this.nlosQueries.length-1; i >= 0; i--) {
                    var query = this.nlosQueries[i];
                    let available = this.timerExt.getQueryObjectEXT(query, this.timerExt.QUERY_RESULT_AVAILABLE_EXT);
                    let disjoint = this.gl.getParameter(this.timerExt.GPU_DISJOINT_EXT);
    
                    if (available || disjoint) {
                        // Clean up the query object.
                        this.timerExt.deleteQueryEXT(query);
                    }
                    this.nlosQueries.pop();
                    this.nlosMeasures = [];
                }
            }

            if (this.finished())
                this.redraw();
        }
    }

    Renderer.prototype.changeScene = function (idx, rwallMaterial = genScene.Diffuse) {
        this.resetActiveBlock();
        this.setSpadPos([0, -0.6]);
        this.currentScene = idx;
        this.rwallMaterial = rwallMaterial;
        this.reset();
    }

    Renderer.prototype.computeBackprojection = function (inputTex, outputBuffer) {
        var gl = this.gl;

        // Clear previous result
        gl.viewport(0, 0, this.numPixels[0], this.numPixels[1]);
        this.fbo.attachTexture(outputBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        if (this.isConvCamera) gl.enable(gl.BLEND);

        var instant = (this.isConvCamera) ? 0 : this.instant;
        var n = (this.isConvCamera) ? this.numIntervals : 1;

        if (this.nlosQueries) {
            var q = this.nlosQueries.length;
            this.nlosQueries.push(this.timerExt.createQueryEXT());
            this.timerExt.beginQueryEXT(this.timerExt.TIME_ELAPSED_EXT, this.nlosQueries[q]);
        }
        for (var i = 0; i < n; i++) {
            if (this.isConf) {
                // Confocal data
                this.bpConfProgram.bind();
                inputTex.bind(0);
                this.spadGridTex.bind(1);
                this.planeGridTex.bind(2);
                this.bpConfProgram.uniformF("tmax", this.maxTime);
                this.bpConfProgram.uniformF("instant", instant * this.deltaT);
                this.bpConfProgram.uniformF("isConfocalModel", this.isVirtualConf);
                this.bpConfProgram.uniformI("useAbsolute", this.isConvCamera && this.addModules);
                this.bpConfProgram.uniformTexture("radiance", inputTex);
                this.bpConfProgram.uniform2F("laserPos", this.laserPos[0], this.laserPos[1]);
                this.bpConfProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
                this.bpConfProgram.uniformTexture("wallGrid", this.spadGridTex);
                this.bpConfProgram.uniformTexture("planeGrid", this.planeGridTex);
                this.quadVbo.draw(this.bpConfProgram, gl.TRIANGLE_FAN);
            } else {
                // Non-confocal data
                this.bpProgram.bind();
                inputTex.bind(0);
                this.spadGridTex.bind(1);
                this.planeGridTex.bind(2);
                this.bpProgram.uniformF("tmax", this.maxTime);
                this.bpProgram.uniformF("instant", instant * this.deltaT);
                this.bpProgram.uniformF("lightIsLaser", this.spreadType == tcore.Renderer.SPREAD_LASER);
                this.bpProgram.uniformF("isConfocalModel", this.isVirtualConf);
                this.bpProgram.uniformI("useAbsolute", this.isConvCamera && this.addModules);
                this.bpProgram.uniformTexture("radiance", inputTex);
                this.bpProgram.uniform2F("laserPos", this.laserPos[0], this.laserPos[1]);
                this.bpProgram.uniform2F("laserGrid", this.laserGrid[0], this.laserGrid[1]);
                this.bpProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
                this.bpProgram.uniformTexture("spadGrid", this.spadGridTex);
                this.bpProgram.uniformTexture("planeGrid", this.planeGridTex);
                this.quadVbo.draw(this.bpProgram, gl.TRIANGLE_FAN);
            }
            instant++;
        }
        if (this.nlosQueries) this.timerExt.endQueryEXT(this.timerExt.TIME_ELAPSED_EXT);
        gl.disable(gl.BLEND);
    }

    Renderer.prototype.findMax = function (inputTex, isComplex = false) {
        // Find maximum value, dividing the area by 4 in each pass
        var width = inputTex.width;
        var height = inputTex.height;
        var maxBuffers = [inputTex];

        var gl = this.gl;
        this.fbo.bind();
        var current = 0;
        var useSameChannel = true;
        while (width > 1) {
            var numPixels = [width, height];
            width = parseInt(width / 2);
            height = (height > 1) ? parseInt(height / 2) : height;
            var next = 1 - current;
            maxBuffers[next] = new tgl.Texture(width, height, 4, true, false, true, null);

            gl.viewport(0, 0, width, height);
            this.fbo.attachTexture(maxBuffers[next], 0);
            gl.clear(gl.COLOR_BUFFER_BIT);

            this.maxProgram.bind();
            maxBuffers[current].bind(0);
            this.maxProgram.uniform2F("numPixels", numPixels[0], numPixels[1]);
            this.maxProgram.uniformI("useSameChannel", useSameChannel);
            // Only complex in the first pass, after that it's just modules
            // When using the conventional camera, we are using modules
            this.maxProgram.uniformI("isComplex", useSameChannel && isComplex);
            this.maxProgram.uniformTexture("tex", maxBuffers[current]);
            this.quadVbo.draw(this.maxProgram, gl.TRIANGLE_FAN);

            current = next;
            useSameChannel = false;
        }

        return maxBuffers[current];
    }

    Renderer.prototype.filterLap = function () {
        var gl = this.gl;

        this.fbo.attachTexture(this.filteredBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Filter the reconstruction with Laplacian
        this.lapProgram.bind();
        this.unfilteredBuffer.bind(0);
        this.lapProgram.uniformF("Aspect", this.aspect);
        this.lapProgram.uniform2F("numPixels", this.numPixels[0], this.numPixels[1]);
        this.lapProgram.uniformFV("kernel", this.lapKernel);
        this.lapProgram.uniformTexture("radiance", this.unfilteredBuffer);
        this.quadVbo.draw(this.lapProgram, gl.TRIANGLE_FAN);
    }

    Renderer.prototype.filterLoG = function () {
        var gl = this.gl;

        this.fbo.attachTexture(this.filteredBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Filter the reconstruction with LoG (Laplacian of Gaussian)
        this.logProgram.bind();
        this.unfilteredBuffer.bind(0);
        this.logKernelTex.bind(1);
        this.logProgram.uniform2F("u_textureSize", this.numPixels[0], this.numPixels[1]);
        this.logProgram.uniformTexture("u_kernel", this.logKernelTex);
        this.logProgram.uniformTexture("u_image", this.unfilteredBuffer);
        this.quadVbo.draw(this.logProgram, gl.TRIANGLE_FAN);
    }

    Renderer.prototype.computePFFilter = function () {
        var gl = this.gl;

        this.fbo.bind();
        this.fbo.drawBuffers(1);

        gl.viewport(0, 0, this.numIntervals, 1);
        this.fbo.attachTexture(this.filterBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Create the phasor fields filter
        this.pfKernelProgram.bind();
        this.timeVectorTex.bind(0);
        this.pfKernelProgram.uniformI("numIntervals", this.numIntervals);
        this.pfKernelProgram.uniformF("deltaT", this.deltaT);
        this.pfKernelProgram.uniformF("wl", this.wl);
        this.pfKernelProgram.uniformF("sigma", this.sigma);
        this.pfKernelProgram.uniformTexture("timeTex", this.timeVectorTex);
        this.quadVbo.bind();
        this.quadVbo.draw(this.pfKernelProgram, gl.TRIANGLE_FAN);

        this.pfFilterValues = this.filterBuffer.getArray(this.numIntervals);
        this.fbo.unbind();

        gl = this.glFilter;
        var values = [];
        var j = 0;
        for (var i = Math.floor(7 * this.numIntervals / 16); i < Math.floor(9 * this.numIntervals / 16); i++) {
            values[2 * j] = (j + 0.5) / this.numIntervals * 16 - 1;
            values[2 * j + 1] = this.pfFilterValues[4 * i];
            j++;
        }

        var vbo = new pgl.VertexBuffer();
        vbo.addAttribute("Position", 2, gl.FLOAT, false);
        vbo.init(values.length / 2);
        vbo.copy(new Float32Array(values));

        gl.viewport(0, 0, this.filterCanvas.width, this.filterCanvas.height);
        gl.clear(gl.COLOR_BUFFER_BIT);

        this.plotProgram.bind();
        vbo.bind();
        vbo.draw(this.plotProgram, gl.LINE_STRIP);
    }

    Renderer.prototype.filterPF = function () {
        var gl = this.gl;

        gl.viewport(0, 0, this.numIntervals, this.numSpads);
        this.fbo.attachTexture(this.interFiltBuffer, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Convolute the filter with the captured signal
        this.pfProgram.bind();
        this.capturedBuffer.bind(0);
        this.filterBuffer.bind(1);
        this.pfProgram.uniformTexture("u_image", this.capturedBuffer);
        this.pfProgram.uniformTexture("u_kernel", this.filterBuffer);
        this.quadVbo.draw(this.pfProgram, gl.TRIANGLE_FAN);
    }

    const ModifiedAttributes = {
        All: 0,
        NumPixels: 1,
        NumSpads: 2,
        BboxCorners: 3,
        NumIntervals: 4,
        Confocality: 5,
        FilterType: 6,
    }

    Renderer.prototype.createNLOSBuffers = function (modifiedAttr) {
        if ((modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumPixels) && this.numPixels != undefined) {
            var w = this.numPixels[0] * this.numPixels[1];
            var h = 1;
            while (w > this.maxTextureSize) {
                w /= 2;
                h *= 2;
            }
            this.numRows = h;
        }
        // Common buffers for NLOS reconstruction
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumPixels || modifiedAttr == ModifiedAttributes.FilterType) {
            if (this.numPixels != undefined) {
                this.unfilteredBuffer = new tgl.Texture(this.numPixels[0], this.numPixels[1], 4, true, false, true, null);
                if (this.filterType === 'none')
                    this.filteredBuffer = this.unfilteredBuffer;
                else
                    this.filteredBuffer = new tgl.Texture(this.numPixels[0], this.numPixels[1], 4, true, false, true, null);
            }
        }
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumIntervals || modifiedAttr == ModifiedAttributes.NumSpads)
            if (this.numIntervals != undefined && this.numSpads != undefined) {
                this.capturedBuffer = new tgl.Texture(this.numIntervals, this.numSpads, 4, true, false, true, null);
            }
        // PF buffers
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumIntervals || modifiedAttr == ModifiedAttributes.NumSpads)
            if (this.numIntervals != undefined && this.numSpads != undefined) {
                this.interFiltBuffer = new tgl.Texture(this.numIntervals, this.numSpads, 4, true, false, true, null);
            }
        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumIntervals)
            if (this.numIntervals != undefined)
                this.filterBuffer = new tgl.Texture(this.numIntervals, 1, 4, true, false, true, null);

        if (modifiedAttr == ModifiedAttributes.All || modifiedAttr == ModifiedAttributes.NumPixels || modifiedAttr == ModifiedAttributes.BboxCorners) {
            if (this.numPixels != undefined && this.bboxCorners != undefined) {
                var xValues = linspace(this.bboxCorners[0], this.bboxCorners[2], this.numPixels[0]);
                var yValues = linspace(this.bboxCorners[1], this.bboxCorners[3], this.numPixels[1]);
                xv = xValues;
                yv = yValues;
                var planeGridData = new Float32Array(this.numPixels[0] * this.numPixels[1] * 4);
                var k = 0;
                for (var i = 0; i < this.numPixels[1]; i++) {
                    for (var j = 0; j < this.numPixels[0]; j++) {
                        planeGridData[k] = xValues[j];
                        planeGridData[k + 1] = yValues[i];
                        planeGridData[k + 2] = 0.0;
                        planeGridData[k + 3] = 0.0;
                        k += 4;
                    }
                }
                var w = this.numPixels[0] * this.numPixels[1] / this.numRows;
                var h = this.numRows;
                this.planeGridTex = new tgl.Texture(this.numPixels[0], this.numPixels[1], 4, true, false, true, planeGridData);
                this.planeGridData = planeGridData;
            }
        }
    }

    Renderer.prototype.reset = function () {
        if (!this.needsReset)
            return;
        this.needsReset = false;
        this.wavesTraced = 0;
        this.raysTraced = 0;
        this.samplesTraced = 0;
        this.pathLength = 0;
        this.elapsedTimes = [];
        this.videoElapsedTimes = [];
        this.instant = 0;
        this.msPerFrame = 1000 / 100;
        this.currentCall = 0;
        this.nlosElapsedTimes = [];
        this.frameTimestamps = [];
        this.totalFPS = 0;

        if (this.renderQueries) {
            for (var i = this.renderQueries.length-1; i >= 0; i--) {
                var query = this.renderQueries[i];
                let available = this.timerExt.getQueryObjectEXT(query, this.timerExt.QUERY_RESULT_AVAILABLE_EXT);
                let disjoint = this.gl.getParameter(this.timerExt.GPU_DISJOINT_EXT);

                if (available || disjoint) {
                    // Clean up the query object.
                    this.timerExt.deleteQueryEXT(query);
                }
                this.renderQueries.pop();
            }
            this.renderMeasures = [];
        }
        if (this.nlosQueries) {
            for (var i = this.nlosQueries.length-1; i >= 0; i--) {
                var query = this.nlosQueries[i];
                let available = this.timerExt.getQueryObjectEXT(query, this.timerExt.QUERY_RESULT_AVAILABLE_EXT);
                let disjoint = this.gl.getParameter(this.timerExt.GPU_DISJOINT_EXT);

                if (available || disjoint) {
                    // Clean up the query object.
                    this.timerExt.deleteQueryEXT(query);
                }
                this.nlosQueries.pop();
            }
            this.nlosMeasures = [];
        }

        this.confCounter = 0;
        if (this.isConf) {
            this.laserGrid = [this.spadPoints[0], this.spadPoints[1]];
            this.setEmitterPos(this.emitterPos, this.scene2canvas(this.laserGrid), false);
        }
        if (this.h != undefined) {
            for (var i = 0; i < this.h.length; i++) {
                this.h[i] = 0;
                this.hFilt[2 * i] = 0;
                this.hFilt[2 * i + 1] = 0;
            }
        }

        if (this.fbo != undefined) {
            this.fbo.bind();
            this.fbo.drawBuffers(1);
            // Scene buffers
            if (this.screenBuffer != undefined) {
                this.fbo.attachTexture(this.screenBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            if (this.capturedBuffer != undefined) {
                this.fbo.attachTexture(this.capturedBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            // Reconstruction buffers
            if (this.unfilteredBuffer != undefined) {
                this.fbo.attachTexture(this.unfilteredBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            if (this.interFiltBuffer != undefined) {
                this.fbo.attachTexture(this.interFiltBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            if (this.filteredBuffer != undefined) {
                this.fbo.attachTexture(this.filteredBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            this.fbo.unbind();
        }
        this.updateSlider();
    }

    Renderer.prototype.setSpreadType = function (type) {
        this.resetActiveBlock();
        this.spreadType = type;
        this.computeSpread();
        this.reset();
    }

    Renderer.prototype.setNormalizedEmitterPos = function (posA, posB) {
        this.setEmitterPos(
            [posA[0] * this.width, posA[1] * this.height],
            [posB[0] * this.width, posB[1] * this.height]
        );
    }

    // Compute intersection point between a ray (origin, dir) and a segment from a to b
    function intersect(origin, dir, a, b) {
        var ba = (b[0] - a[0]) / (b[1] - a[1]);
        var t = (ba * (origin[1] - a[1]) - origin[0] + a[0]) / (dir[0] - ba * dir[1]);
        if (t >= 0) { // Intersects line
            var t2 = (origin[1] + t * dir[1] - a[1]) / (b[1] - a[1]);
            if (t2 >= 0 && t2 <= 1) { // Intersection inside the segment
                return [origin[0] + t * dir[0], origin[1] + t * dir[1]];
            }
        }
        return [];
    }

    Array.prototype.norm = function () {
        return Math.sqrt(this[0] * this[0] + this[1] * this[1])
    }

    Renderer.prototype.setEmitterPos = function (posA, posB, reset = true) {
        if (posA[0] < 0 || posA[0] >= this.width || posA[1] < 0 || posA[1] >= this.height) {
            // Light cannot be set outside the scene
            return;
        }
        this.emitterPos = posA;
        this.emitterAngle = this.spreadType == tcore.Renderer.SPREAD_POINT ? 0.0 : Math.atan2(posB[1] - posA[1], posB[0] - posA[0]);
        this.computeSpread();

        this.laserPos = [((this.emitterPos[0] / this.width) * 2.0 - 1.0) * this.aspect, 1.0 - (this.emitterPos[1] / this.height) * 2.0];
        this.laserFocus = [((posB[0] / this.width) * 2.0 - 1.0) * this.aspect, 1.0 - (posB[1] / this.height) * 2.0];
        var dir = [this.laserFocus[0] - this.laserPos[0], this.laserFocus[1] - this.laserPos[1]];
        var mod = dir.norm();
        if (mod == 0) {
            dir = [1, 0];
            mod = 1;
        }
        dir = [dir[0] / mod, dir[1] / mod];
        this.laserGrid = intersect(this.laserPos, dir, [1.2, 1.0], [1.2, -1.0]);

        if (this.laserGrid.length == 0) {
            console.log("The light is not reaching the relay wall");
            this.laserGrid = [1.78, 0];
        }

        if (this.spreadType === tcore.Renderer.SPREAD_LASER && reset) {
            this.setSpadPos(this.laserPos);
        }

        if (reset)
            this.reset();
    }

    Renderer.prototype.setFilterType = function (type) {
        var prev = this.filterType;
        this.filterType = type;
        if (prev === 'none' || type === 'none') {
            this.createNLOSBuffers(ModifiedAttributes.FilterType);
        }
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.setToneMapper = function (type) {
        if (type === 'none') {
            this.showProgram = new tgl.Shader(Shaders, "show-vert", "show-frag");
        } else {
            var pattern = new RegExp('{func}', 'g');
            var shaderSource = Shaders["show-func-frag"];
            Shaders["show-replaced-frag"] = shaderSource.replace(pattern, type);
            this.showProgram = new tgl.Shader(Shaders, "show-vert", "show-replaced-frag");
        }
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.computeSpread = function () {
        switch (this.spreadType) {
            case tcore.Renderer.SPREAD_POINT:
                this.emitterPower = 0.1;
                this.spatialSpread = 0.0;
                this.angularSpread = [0.0, Math.PI * 2.0];
                break;
            case tcore.Renderer.SPREAD_CONE:
                this.emitterPower = 0.03;
                this.spatialSpread = 0.0;
                this.angularSpread = [this.emitterAngle, Math.PI * 0.3];
                break;
            case tcore.Renderer.SPREAD_BEAM:
                this.emitterPower = 0.03;
                this.spatialSpread = 0.4;
                this.angularSpread = [this.emitterAngle, 0.0];
                break;
            case tcore.Renderer.SPREAD_LASER:
                this.emitterPower = 0.05;
                this.spatialSpread = 0.0;
                this.angularSpread = [this.emitterAngle, 0.0];
                break;
            case tcore.Renderer.SPREAD_AREA:
                this.emitterPower = 0.1;
                this.spatialSpread = 0.4;
                this.angularSpread = [this.emitterAngle, Math.PI];
                break;
        }
    }

    Renderer.prototype.createQuadVbo = function () {
        var vbo = new tgl.VertexBuffer();
        vbo.addAttribute("Position", 3, this.gl.FLOAT, false);
        vbo.addAttribute("TexCoord", 2, this.gl.FLOAT, false);
        vbo.init(4);
        vbo.copy(new Float32Array([
            1.0, 1.0, 0.0, 1.0, 1.0,
            -1.0, 1.0, 0.0, 0.0, 1.0,
            -1.0, -1.0, 0.0, 0.0, 0.0,
            1.0, -1.0, 0.0, 1.0, 0.0
        ]));

        return vbo;
    }

    Renderer.prototype.createSBVbo = function () {
        var vbo = new tgl.VertexBuffer();
        vbo.addAttribute("Position", 2, this.gl.FLOAT, false);
        vbo.init(2);
        vbo.copy(new Float32Array([
            1.2 / this.aspect, this.spadBoundaries[0],
            1.2 / this.aspect, this.spadBoundaries[1]
        ]));
        return vbo;
    }

    Renderer.prototype.totalRaysTraced = function () {
        return this.raysTraced;
    }

    Renderer.prototype.maxRayCount = function () {
        return this.maxPathLength * this.maxSampleCount;
    }

    Renderer.prototype.totalSamplesTraced = function () {
        return this.samplesTraced;
    }

    Renderer.prototype.progress = function () {
        return Math.min(this.totalRaysTraced() / this.maxRayCount(), 1.0);
    }

    Renderer.prototype.finished = function () {
        if (!this.isConf)
            return this.totalSamplesTraced() >= this.maxSampleCount;
        else {
            if (this.confCounter >= this.numSpads)
                return true;
            if (this.totalSamplesTraced() >= this.maxSampleCount) {
                this.confCounter++;
                if (this.confCounter >= this.numSpads)
                    return true;
                this.laserGrid = [this.spadPoints[2 * this.confCounter], this.spadPoints[2 * this.confCounter + 1]];
                this.setEmitterPos(this.emitterPos, this.scene2canvas(this.laserGrid), false);
                this.partialReset();
            }
            return false;
        }
    }

    Renderer.prototype.videoFinished = function () {
        if (this.playing) {
            return this.instant >= this.numIntervals - 1;
        } else {
            return true;
        }
    }

    Renderer.prototype.getETA = function () {
        var elapsedTime = this.nlosElapsedTimes[this.nlosElapsedTimes.length-1] - this.nlosElapsedTimes[0];
        var completed = this.confCounter + this.progress();
        if (this.isConf) completed /= this.numSpads;
        return Math.max((1 - completed) * elapsedTime / completed / 1000, 0);
    }

    Renderer.prototype.partialReset = function () {
        this.wavesTraced = 0;
        this.raysTraced = 0;
        this.samplesTraced = 0;
        this.pathLength = 0;
        this.elapsedTimes = [];
        this.videoElapsedTimes = [];
        this.playing = false;
        this.instant = 0;

        if (this.fbo != undefined) {
            this.fbo.bind();
            this.fbo.drawBuffers(1);
            // Scene buffers
            if (this.screenBuffer != undefined) {
                this.fbo.attachTexture(this.screenBuffer, 0);
                this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            }
            this.fbo.unbind();
        }
        this.updateSlider();
    }

    Renderer.prototype.composite = function (count = this.activeBlock) {
        this.screenBuffer.bind(0);
        { // disable this to not see fluence and see only the geometry
        this.compositeProgram.bind();
        this.compositeProgram.uniformTexture("Frame", this.screenBuffer);
        this.compositeProgram.uniformF("Exposure", this.width / (Math.max(this.samplesTraced, this.raySize * count)));
        this.quadVbo.bind();
        this.quadVbo.draw(this.compositeProgram, this.gl.TRIANGLE_FAN);
        }
        this.gl.enable(this.gl.BLEND);
        if (this.showGeometry) {
            this.geometryProgram.bind();
            this.geometryProgram.uniform4F("uColor", 1.0, 1.0, 1.0, 1.0);
            this.sceneVBOs[this.currentScene].bind();
            this.sceneVBOs[this.currentScene].draw(this.geometryProgram, this.gl.LINES);
        } //else {
        //     this.compositeProgram.bind();
        //     this.compositeProgram.uniformTexture("Frame", this.screenBuffer);
        //     this.compositeProgram.uniformF("Exposure", this.width / (Math.max(this.samplesTraced, this.raySize * count)));
        //     this.quadVbo.bind();
        //     this.quadVbo.draw(this.compositeProgram, this.gl.TRIANGLE_FAN);
        // }
        this.sensorProgram.bind();
        this.sensorProgram.uniform4F("uColor", 0.16796875, 0.5, 1.0, 1.0);
        this.sensorProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
        var relayCenter = [1.2, (this.spadBoundaries[0]+this.spadBoundaries[1]) / 2];
        var angle = Math.atan2(relayCenter[1]-this.spadPos[1], relayCenter[0]-this.spadPos[0]);
        this.sensorProgram.uniformF("angle", angle);
        this.sensorProgram.uniformF("aspect", this.aspect);
        this.cameraVBO.bind();
        this.cameraVBO.draw(this.sensorProgram, this.gl.LINE_LOOP);


        this.rwallProgram.bind();
        this.rwallProgram.uniformF("numSpads", this.numSpads);
        // TODO: this.spadRadius sometimes goes down to zero and doesn't grow back
        // TODO: allow the user to define the radius
        this.rwallProgram.uniformF("spadRadius", 0.007); // It's not this.spadRadius because it is small and difficult to see
        this.rwallProgram.uniformF("aspect", this.aspect);
        this.rwallProgram.uniform2F("firstSpad", this.spadPoints[0], this.spadPoints[1]);
        this.rwallProgram.uniform2F("lastSpad", this.spadPoints[2*this.numSpads-2], this.spadPoints[2*this.numSpads-1]);
        this.rwallProgram.uniform4F("uColor", 0.16796875, 0.5, 1.0, 1.0);
        this.quadVbo.bind();
        this.quadVbo.draw(this.rwallProgram, this.gl.TRIANGLE_FAN);
        this.gl.disable(this.gl.BLEND);
    }

    Renderer.prototype.redraw = function () {
        var gl = this.gl;

        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.viewport(0, 0, this.width, this.height);
        gl.scissor(0, 0, this.width, this.height);
        this.composite();

        gl.enable(gl.SCISSOR_TEST);
        gl.scissor(this.width, 0, this.separationWidth, this.height);
        gl.clearColor(1.0, 1.0, 1.0, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.disable(gl.SCISSOR_TEST);
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        this.renderNLOS();
    }

    Renderer.prototype.setShowGeometry = function (showGeometry) {
        this.showGeometry = showGeometry;
        if (this.finished())
            this.redraw();
    }

    Renderer.prototype.render = function (timestamp) {
        this.needsReset = true;
        this.elapsedTimes.push(timestamp);
        this.frameTimestamps.push(timestamp * 1e-3);
        if (this.nlosElapsedTimes.length == 0) {
            this.nlosElapsedTimes.push(timestamp);
        }

        var n = this.frameTimestamps.length - 1;
        var deltaTime = this.frameTimestamps[n] - ((n > 0) ? this.frameTimestamps[n-1] : 0);
        var fps = 1 / deltaTime;
        this.totalFPS += fps;

        var current = this.currentState;
        var next = 1 - current;

        this.fbo.bind();

        var gl = this.gl;
        gl.viewport(0, 0, this.raySize, this.raySize);
        gl.scissor(0, 0, this.raySize, this.activeBlock);
        gl.enable(gl.SCISSOR_TEST);
        this.fbo.drawBuffers(4);
        this.rayStates[next].attach(this.fbo);
        this.quadVbo.bind();

        if (this.renderQueries) {
            var q = this.renderQueries.length;
            this.renderQueries.push(this.timerExt.createQueryEXT());
            this.timerExt.beginQueryEXT(this.timerExt.TIME_ELAPSED_EXT, this.renderQueries[q]);
        }

        if (this.pathLength == 0) {
            this.initProgram.bind();
            this.rayStates[current].rngTex.bind(0);
            this.spectrum.bind(1);
            this.emission.bind(2);
            this.emissionIcdf.bind(3);
            this.emissionPdf.bind(4);
            this.initProgram.uniformTexture("RngData", this.rayStates[current].rngTex);
            this.initProgram.uniformTexture("Spectrum", this.spectrum);
            this.initProgram.uniformTexture("Emission", this.emission);
            this.initProgram.uniformTexture("ICDF", this.emissionIcdf);
            this.initProgram.uniformTexture("PDF", this.emissionPdf);
            this.initProgram.uniform2F("EmitterPos", ((this.emitterPos[0] / this.width) * 2.0 - 1.0) * this.aspect, 1.0 - (this.emitterPos[1] / this.height) * 2.0);
            this.initProgram.uniform2F("EmitterDir", Math.cos(this.angularSpread[0]), -Math.sin(this.angularSpread[0]));
            this.initProgram.uniformF("EmitterPower", this.emitterPower);
            this.initProgram.uniformF("SpatialSpread", this.spatialSpread);
            this.initProgram.uniform2F("AngularSpread", -this.angularSpread[0], this.angularSpread[1]);
            this.quadVbo.draw(this.initProgram, gl.TRIANGLE_FAN);

            current = 1 - current;
            next = 1 - next;

            this.rayStates[next].attach(this.fbo);
        }

        if (this.tracePrograms[this.currentScene] == null)
            this.tracePrograms[this.currentScene] = new tgl.Shader(Shaders, "trace-vert", this.scenes[this.currentScene]);
        var traceProgram = this.tracePrograms[this.currentScene];
        traceProgram.bind();
        this.rayStates[current].bind(traceProgram);
        this.quadVbo.draw(traceProgram, gl.TRIANGLE_FAN);

        this.rayStates[next].detach(this.fbo);

        gl.disable(gl.SCISSOR_TEST);
        gl.viewport(0, 0, this.width, this.height);
        gl.scissor(0, 0, this.width, this.height);

        this.fbo.drawBuffers(1);
        this.fbo.attachTexture(this.waveBuffer, 0);

        if (this.pathLength == 0 || this.wavesTraced == 0)
            gl.clear(gl.COLOR_BUFFER_BIT);

        gl.enable(gl.BLEND);

        this.rayProgram.bind();
        this.rayStates[current].posTex.bind(0);
        this.rayStates[next].posTex.bind(1);
        this.rayStates[current].rgbTex.bind(2);
        this.rayStates[current].timeTex.bind(3);
        this.rayStates[next].timeTex.bind(4);
        this.rayProgram.uniformTexture("PosDataA", this.rayStates[current].posTex);
        this.rayProgram.uniformTexture("PosDataB", this.rayStates[next].posTex);
        this.rayProgram.uniformTexture("RgbData", this.rayStates[current].rgbTex);
        this.rayProgram.uniformTexture("TimeDataA", this.rayStates[current].timeTex);
        this.rayProgram.uniformTexture("TimeDataB", this.rayStates[next].timeTex);
        this.rayProgram.uniformF("Aspect", this.aspect);
        this.rayVbo.bind();
        this.rayVbo.draw(this.rayProgram, gl.LINES, this.raySize * this.activeBlock * 2);

        this.raysTraced += this.raySize * this.activeBlock;
        if (this.pathLength >= this.minPathLength)
            this.computeSpadValues(current, next);
        this.pathLength += 1;

        this.quadVbo.bind();

        if (this.pathLength == this.maxPathLength || this.wavesTraced == 0) {
            this.fbo.attachTexture(this.screenBuffer, 0);

            this.waveBuffer.bind(0);
            this.passProgram.bind();
            this.passProgram.uniformTexture("Frame", this.waveBuffer);
            this.quadVbo.draw(this.passProgram, gl.TRIANGLE_FAN);

            if (this.pathLength == this.maxPathLength) {
                this.samplesTraced += this.raySize * this.activeBlock
                this.wavesTraced += 1;
                this.pathLength = 0;

                if (this.elapsedTimes.length > 5) {
                    var avgTime = 0;
                    for (var i = 1; i < this.elapsedTimes.length; ++i)
                        avgTime += this.elapsedTimes[i] - this.elapsedTimes[i - 1];
                    avgTime /= this.elapsedTimes.length - 1;

                    /* Let's try to stay at reasonable frame times. Targeting 16ms is
                       a bit tricky because there's a lot of variability in how often
                       the browser executes this loop and 16ms might well not be
                       reachable, but 24ms seems to do ok */
                    if (avgTime > 24.0)
                        this.activeBlock = Math.max(4, this.activeBlock - 4);
                    else
                        this.activeBlock = Math.min(512, this.activeBlock + 4);

                    this.elapsedTimes = [this.elapsedTimes[this.elapsedTimes.length - 1]];
                }

                this.elapsedTimes = [];
            }
        }
        if (this.renderQueries) this.timerExt.endQueryEXT(this.timerExt.TIME_ELAPSED_EXT);

        gl.disable(gl.BLEND);

        this.fbo.unbind();

        if (this.pathLength == 0) {
            gl.clear(gl.COLOR_BUFFER_BIT);
            gl.viewport(0, 0, this.width, this.height);
            gl.scissor(0, 0, this.width, this.height);
            this.composite();

            gl.enable(gl.SCISSOR_TEST);
            gl.scissor(this.width, 0, this.separationWidth, this.height);
            gl.clearColor(1.0, 1.0, 1.0, 1.0);
            gl.clear(gl.COLOR_BUFFER_BIT);
            gl.disable(gl.SCISSOR_TEST);
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            this.renderNLOS();

            this.nlosElapsedTimes.push(timestamp);
        }

        this.currentState = next;
        this.currentCall++;
    }

    Renderer.prototype.renderNLOS = function () {
        var gl = this.gl;

        this.fbo.bind();
        this.fbo.drawBuffers(1);
        this.quadVbo.bind();

        if (this.filterType === 'pf') {
            this.filterPF();
            this.computeBackprojection(this.interFiltBuffer, this.filteredBuffer);
        } else {
            this.computeBackprojection(this.capturedBuffer, this.unfilteredBuffer);
            if (this.filterType === 'log')
                this.filterLoG();
            else if (this.filterType === 'lap')
                this.filterLap();
            // else filterType === 'none', and this.filteredBuffer == this.unfilteredBuffer
        }

        var maxValueTex = this.findMax(this.filteredBuffer, this.filterType === 'pf' && !this.isConvCamera);

        this.fbo.unbind();

        // Render the result
        gl.viewport(this.width + this.separationWidth, 0, this.width, this.height);
        gl.scissor(this.width + this.separationWidth, 0, this.width, this.height);

        var usePhase = (this.usePhase && this.filterType === 'pf' && !this.isConvCamera);

        this.showProgram.bind();
        if (usePhase)
            this.colormapSeismicTex.bind(0);
        else
            this.colormapHotTex.bind(0);
        this.filteredBuffer.bind(1);
        maxValueTex.bind(2);
        this.showProgram.uniformF("Aspect", this.aspect);
        this.showProgram.uniformI("numSpads", this.numSpads);
        this.showProgram.uniformI("isComplex", this.filterType === 'pf' && !this.isConvCamera);
        this.showProgram.uniformI("usePhase", usePhase);
        if (usePhase)
            this.showProgram.uniformTexture("colormap", this.colormapSeismicTex);
        else
            this.showProgram.uniformTexture("colormap", this.colormapHotTex);
        this.showProgram.uniformTexture("radiance", this.filteredBuffer);
        this.showProgram.uniformTexture("maxValue", maxValueTex);
        this.quadVbo.bind();
        this.quadVbo.draw(this.showProgram, gl.TRIANGLE_FAN);

        gl.enable(gl.BLEND);
        this.geometryProgram.bind();
        if (this.showGeometry) {
            this.geometryProgram.uniform4F("uColor", 1.0, 1.0, 1.0, 1.0);
            this.sceneVBOs[this.currentScene].bind();
            this.sceneVBOs[this.currentScene].draw(this.geometryProgram, this.gl.LINES);
        }

        this.rwallProgram.bind();
        this.rwallProgram.uniformF("numSpads", this.numSpads);
        // TODO: this.spadRadius sometimes goes down to zero and doesn't grow back
        // TODO: allow the user to define the radius
        this.rwallProgram.uniformF("spadRadius", 0.007); // It's not this.spadRadius because it is small and difficult to see
        this.rwallProgram.uniformF("aspect", this.aspect);
        this.rwallProgram.uniform2F("firstSpad", this.spadPoints[0], this.spadPoints[1]);
        this.rwallProgram.uniform2F("lastSpad", this.spadPoints[2*this.numSpads-2], this.spadPoints[2*this.numSpads-1]);
        this.rwallProgram.uniform4F("uColor", 0.16796875, 0.5, 1.0, 1.0);
        this.quadVbo.bind();
        this.quadVbo.draw(this.rwallProgram, this.gl.TRIANGLE_FAN);
        gl.disable(gl.BLEND);
    }

    Renderer.prototype.play = function (timestamp) {
        if (!this.playing) {
            this.playing = true;
            this.videoElapsedTimes = [];
            if (this.instant >= this.numIntervals - 1) {
                this.instant = -1;
            }
        }

        if (this.videoElapsedTimes.length == 0 || (timestamp - this.videoElapsedTimes[this.videoElapsedTimes.length - 1]) > this.msPerFrame) {
            this.videoElapsedTimes.push(timestamp);
            this.instant++;
            this.redraw();
            this.updateSlider();
            if (this.instant >= this.numIntervals - 1)
                this.playing = false;
        }
    }

    Renderer.prototype.pause = function () {
        this.playing = false;
        this.videoElapsedTimes = [];
    }

    Renderer.prototype.computeSpadValues = function (current, next) {
        var gl = this.gl;

        gl.viewport(0, 0, this.numIntervals, this.numSpads);
        this.fbo.attachTexture(this.capturedBuffer, 0);
        if (!this.isConf) {
            this.hProgram.bind();
            this.rayStates[current].posTex.bind(0);
            this.rayStates[next].posTex.bind(1);
            this.rayStates[current].rgbTex.bind(2);
            this.rayStates[current].timeTex.bind(3);
            this.rayStates[next].timeTex.bind(4);
            this.spadGridTex.bind(5);
            this.spadNormalsTex.bind(6);
            this.hProgram.uniformI("matId", this.rwallMaterial);
            this.hProgram.uniformF("tmax", this.maxTime);
            this.hProgram.uniformF("spadRadius", this.spadRadius);
            this.hProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
            this.hProgram.uniformTexture("PosDataA", this.rayStates[current].posTex);
            this.hProgram.uniformTexture("PosDataB", this.rayStates[next].posTex);
            this.hProgram.uniformTexture("RgbData", this.rayStates[current].rgbTex);
            this.hProgram.uniformTexture("TimeDataA", this.rayStates[current].timeTex);
            this.hProgram.uniformTexture("SpadGrid", this.spadGridTex);
            this.hProgram.uniformTexture("SpadNormals", this.spadNormalsTex);
            this.rayVbo2.bind();
            this.rayVbo2.draw(this.hProgram, gl.POINTS, this.raySize * this.activeBlock);
        } else {
            this.hConfProgram.bind();
            this.rayStates[current].posTex.bind(0);
            this.rayStates[next].posTex.bind(1);
            this.rayStates[current].rgbTex.bind(2);
            this.rayStates[current].timeTex.bind(3);
            this.rayStates[next].timeTex.bind(4);
            this.spadNormalsTex.bind(6);
            this.hConfProgram.uniformI("matId", this.rwallMaterial);
            this.hConfProgram.uniformF("tmax", this.maxTime);
            this.hConfProgram.uniformF("yNorm", (this.confCounter + 0.5) / this.numSpads);
            this.hConfProgram.uniformF("spadRadius", this.spadRadius);
            this.hConfProgram.uniform2F("spadPos", this.spadPos[0], this.spadPos[1]);
            this.hConfProgram.uniform2F("SpadGrid", this.laserGrid[0], this.laserGrid[1]);
            this.hConfProgram.uniform2F("SpadNormal", this.spadNormalsData[4 * this.confCounter], this.spadNormalsData[4 * this.confCounter + 1]);
            this.hConfProgram.uniformTexture("PosDataA", this.rayStates[current].posTex);
            this.hConfProgram.uniformTexture("PosDataB", this.rayStates[next].posTex);
            this.hConfProgram.uniformTexture("RgbData", this.rayStates[current].rgbTex);
            this.hConfProgram.uniformTexture("TimeDataA", this.rayStates[current].timeTex);
            this.hConfProgram.bind();
            this.rayVbo2.bind();
            this.rayVbo2.draw(this.hConfProgram, gl.POINTS, this.raySize * this.activeBlock);
        }
        // Restore previous viewport
        gl.viewport(0, 0, this.width, this.height);
    }

    Renderer.prototype.getReconstructionValues = function () {
        return this.filteredBuffer.getArray(this.numPixels[0] * this.numPixels[1]);
    }

    Renderer.prototype.getTransientValues = function () {
        var h = this.capturedBuffer.getArray(this.numSpads * this.numIntervals);
        var result = [];
        for (let i = 0; i < h.length; i += 4) {
            result.push(h[i]);
        }
        return result;
    }

    Renderer.prototype.getRenderTime = function () {
        if (this.renderQueries) { // Check separate time only if the timer extension is available
            var i = 0;
            while (i < this.renderQueries.length) {
                query = this.renderQueries[i];
                if (query) {
                    let available = this.timerExt.getQueryObjectEXT(query, this.timerExt.QUERY_RESULT_AVAILABLE_EXT);
                    let disjoint = this.gl.getParameter(t.renderer.timerExt.GPU_DISJOINT_EXT);
                    if (available && !disjoint) {
                        // See how much time the rendering of the object took in nanoseconds.
                        let timeElapsed = this.timerExt.getQueryObjectEXT(query, this.timerExt.QUERY_RESULT_EXT);
                        this.renderMeasures.push(timeElapsed);
                        
                        // Clean up the query object.
                        this.timerExt.deleteQueryEXT(query);

                        this.nlosQueries.splice(i, 1);
                    } else {
                        // console.log('Unable to read a query, exiting loop');
                        i++;
                        // console.log(`unable to read the query: ${i}`);
                    }
                }
            }

            var mean = 0;
            var std = 0;
            var total = 0;
            var n = this.renderMeasures.length;
            this.renderMeasures.forEach(x => {
                mean += x;
                total += x;
            });
            if (n > 0) mean /= n;
            if (n < 2) std = undefined;
            else {
                for (var i = 0; i < n; i++) std += (this.renderMeasures[i] - mean) * (this.renderMeasures[i] - mean);
                std = 1e-6 * Math.sqrt(std / (n - 1));
            }
        }
        var numFrames = this.frameTimestamps.length;
        var meanFPS = this.totalFPS / numFrames;
        return [1e-6 * total, 1e-6 * mean, std, meanFPS, numFrames];
    }

    Renderer.prototype.getReconstructionTime = function () {
        if (this.nlosQueries) { // Check separate time only if the timer extension is available
            var i = 0;
            while (i < this.nlosQueries.length) {
                query = this.nlosQueries[i];
                if (query) {
                    let available = this.timerExt.getQueryObjectEXT(query, this.timerExt.QUERY_RESULT_AVAILABLE_EXT);
                    let disjoint = this.gl.getParameter(t.renderer.timerExt.GPU_DISJOINT_EXT);
                    if (available && !disjoint) {
                        // See how much time the rendering of the object took in nanoseconds.
                        let timeElapsed = this.timerExt.getQueryObjectEXT(query, this.timerExt.QUERY_RESULT_EXT);
                        this.nlosMeasures.push(timeElapsed);
                        
                        // Clean up the query object.
                        this.timerExt.deleteQueryEXT(query);

                        this.nlosQueries.splice(i, 1);
                    } else {
                        // console.log('Unable to read a query, exiting loop');
                        i++;
                    }
                }
            }

            // console.log(`Total time reconstructing: ${1e-6 * total} ms`);
            // console.log(`Mean time reconstructing: ${1e-6 * total / count} ms`);
            
            var mean = 0;
            var std = 0;
            var total = 0;
            var n = this.nlosMeasures.length;
            this.nlosMeasures.forEach(x => {
                mean += x;
                total += x;
            });
            if (n > 0) mean /= n;
            if (n < 2) std = undefined;
            else {
                for (var i = 0; i < n; i++) std += (this.nlosMeasures[i] - mean) * (this.nlosMeasures[i] - mean);
                std = 1e-6 * Math.sqrt(std / (n - 1));
            }
        }
        return [1e-6 * total, 1e-6 * mean, std];
    }

    exports.Renderer = Renderer;
})(window.transientcore = window.transientcore || {});