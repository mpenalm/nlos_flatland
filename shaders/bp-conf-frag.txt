#include "preamble"

uniform float tmax;

uniform sampler2D fluence; // x time, y spad

uniform float numPixels;
uniform vec2 laserPos;
uniform vec2 spadPos;
uniform vec2 wallPos; // laser and spad grid

uniform sampler2D planeGrid; // Plane to reconstruct
        // positions of the considered pixels, on a row

varying vec2 mPos; // Pixel coordinates [0,1]

void main() {
    float x = floor(mPos.x * numPixels); // [0, numPixels)
    float y = floor(mPos.y * numPixels); // [0, numPixels)
    gl_FragColor = vec4(x > 0.5, y > 0.5, (x > 0.5) && (y > 0.5), true);
    /*float pos = x + numPixels * (numPixels - 1.0 - y); // [0, numPixels^2-1)
    pos = (pos + 0.5) / (numPixels * numPixels); // (0, 1)

    vec2 pixelPos = texture2D(planeGrid, vec2(pos, 0.5)).xy;
    float dlp = distance(wallPos, laserPos); // distance laser device to captured (illuminated) point
    float dsp = distance(wallPos, spadPos); // distance spad device to captured point
    float ds  = distance(wallPos, pixelPos); // distance captured (illuminated) point to reconstructed point
    float dt = 2.0 * ds + dsp + dlp;

    float t = dt / tmax;
    gl_FragColor = texture2D(fluence, vec2(t, mPos.y));*/
    gl_FragColor = vec4(x, y, 0.0, 1.0);
}
