#include "preamble"

// Inspired from https://github.com/regl-project/regl/blob/gh-pages/example/reduction.js

uniform sampler2D tex;
uniform int useSameChannel;
uniform int isComplex;
uniform vec2 numPixels; // Original width and height
varying vec2 mPos;

void main () {
	vec2 intervalSize = 1.0 / numPixels; // Width and height of each pixel in tex
	float result;
	float result2;
	vec2 np = floor(numPixels / 2.0);
	float x = floor(mPos.x * np.x);
    float y = floor(mPos.y * np.y);
	bool oddX = (numPixels.x > 1.0) && (floor(numPixels.x / 2.0) < (numPixels.x / 2.0));
	bool oddY = (numPixels.y > 1.0) && (floor(numPixels.y / 2.0) < (numPixels.y / 2.0));

	if (isComplex == 0) {
			// Not a complex number
		// mPos are the coordinates of the center of the new pixel
		// this is also the shared vertex of the old pixels we want to compare
		// => access the center of those pixels
		float a = texture2D(tex, mPos + intervalSize * vec2(-0.5)).x;
		float b = texture2D(tex, mPos + intervalSize * vec2(0.5)).x;
		float c = texture2D(tex, mPos + intervalSize * vec2(-0.5, 0.5)).x;
		float d = texture2D(tex, mPos + intervalSize * vec2(0.5, -0.5)).x;
		result = max(max(a, b), max(c, d));
		result2 = min(min(a, b), min(c, d)) * float(useSameChannel);

		a = texture2D(tex, mPos + intervalSize * vec2(-0.5)).y;
		b = texture2D(tex, mPos + intervalSize * vec2(0.5)).y;
		c = texture2D(tex, mPos + intervalSize * vec2(-0.5, 0.5)).y;
		d = texture2D(tex, mPos + intervalSize * vec2(0.5, -0.5)).y;
		result2 += min(min(a, b), min(c, d)) * abs(float(1-useSameChannel));

		if (oddX) {
			// Odd number of pixels in X dimension, add the last one to the last result
			if (x == np.x - 1.0) {
				a = texture2D(tex, mPos + intervalSize * vec2(1.5, 0.5)).x;
				b = texture2D(tex, mPos + intervalSize * vec2(1.5, -0.5)).x;
				c = texture2D(tex, mPos + intervalSize * vec2(1.5, 0.5)).y;
				d = texture2D(tex, mPos + intervalSize * vec2(1.5, -0.5)).y;
				result = max(result, max(a, b));
				result2 = min(result2, min(a, b)) * float(useSameChannel) + min(result2, min(c, d)) * abs(float(1-useSameChannel));
			}
		}

		if (oddY) {
			// Odd number of pixels in Y dimension, add the last one to the last result
			if (y == np.y - 1.0) {
				a = texture2D(tex, mPos + intervalSize * vec2(0.5, 1.5)).x;
				b = texture2D(tex, mPos + intervalSize * vec2(-0.5, 1.5)).x;
				c = texture2D(tex, mPos + intervalSize * vec2(0.5, 1.5)).y;
				d = texture2D(tex, mPos + intervalSize * vec2(-0.5, 1.5)).y;
				result = max(result, max(a, b));
				result2 = min(result2, min(a, b)) * float(useSameChannel) + min(result2, min(c, d)) * abs(float(1-useSameChannel));
			}
		}

		if (oddX && oddY) {
			// Odd number of pixels in both dimensions, add the original corner to the new corner 
				if ((x == np.x - 1.0) && (y == np.y - 1.0)) {
				a = texture2D(tex, mPos + intervalSize * vec2(1.5)).x;
				b = texture2D(tex, mPos + intervalSize * vec2(1.5)).y;
				result = max(result, a);
				result2 = min(result2, a) * float(useSameChannel) + min(result2, b) * abs(float(1-useSameChannel));
			}
		}
	} else {
			// Complex number, we are looking for the max module (length)
		// mPos are the coordinates of the center of the new pixel
		// this is also the shared vertex of the old pixels we want to compare
		// => access the center of those pixels
		float a = length(texture2D(tex, mPos + intervalSize * vec2(-0.5)).xy);
		float b = length(texture2D(tex, mPos + intervalSize * vec2(0.5)).xy);
		float c = length(texture2D(tex, mPos + intervalSize * vec2(-0.5, 0.5)).xy);
		float d = length(texture2D(tex, mPos + intervalSize * vec2(0.5, -0.5)).xy);
		result = max(max(a, b), max(c, d));
		result2 = min(min(a, b), min(c, d));

		if (oddX) {
			// Odd number of pixels in X dimension, add the last one to the last result
			if (x == np.x - 1.0) {
				a = length(texture2D(tex, mPos + intervalSize * vec2(1.5, 0.5)).xy);
				b = length(texture2D(tex, mPos + intervalSize * vec2(1.5, -0.5)).xy);
				result = max(result, max(a, b));
				result2 = min(result2, min(a, b));
			}
		}

		if (oddY) {
			// Odd number of pixels in Y dimension, add the last one to the last result
			if (y == np.y - 1.0) {
				a = length(texture2D(tex, mPos + intervalSize * vec2(0.5, 1.5)).xy);
				b = length(texture2D(tex, mPos + intervalSize * vec2(-0.5, 1.5)).xy);
				result = max(result, max(a, b));
				result2 = min(result2, min(a, b));
			}
		}

		if (oddX && oddY) {
			// Odd number of pixels in both dimensions, add the original corner to the new corner 
				if ((x == np.x - 1.0) && (y == np.y - 1.0)) {
				a = length(texture2D(tex, mPos + intervalSize * vec2(1.5)).xy);
				result = max(result, a);
				result2 = min(result2, a);
			}
		}
	}
	
	gl_FragColor = vec4(result, result2, oddY && (y == np.y - 1.0), 1.0);
}