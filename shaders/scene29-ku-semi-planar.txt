#include "trace-frag"

#include "bsdf"
#include "intersect"

void intersect(Ray ray, inout Intersection isect) {
    bboxIntersect(ray, vec2(0.0), vec2(1.79, 1.0), 3.0, isect);

    // relay wall
    lineIntersect(ray, vec2(1.2, -1.0), vec2(1.2, -0.2), 0.0, isect);

    // first hidden wall (mirror wall)
    lineIntersect(ray, vec2(0.41, -0.4), vec2(0.39, -0.38), 0.0, isect);
    lineIntersect(ray, vec2(0.39, -0.38), vec2(0.41, -0.36), 0.0, isect);
    lineIntersect(ray, vec2(0.41, -0.36), vec2(0.39, -0.34), 0.0, isect);
    lineIntersect(ray, vec2(0.39, -0.34), vec2(0.41, -0.32), 0.0, isect);
    lineIntersect(ray, vec2(0.41, -0.32), vec2(0.39, -0.30), 0.0, isect);
    lineIntersect(ray, vec2(0.39, -0.30), vec2(0.41, -0.28), 0.0, isect);
    lineIntersect(ray, vec2(0.41, -0.28), vec2(0.39, -0.26), 0.0, isect);
    lineIntersect(ray, vec2(0.39, -0.26), vec2(0.41, -0.24), 0.0, isect);
    lineIntersect(ray, vec2(0.41, -0.24), vec2(0.39, -0.22), 0.0, isect);
    lineIntersect(ray, vec2(0.39, -0.22), vec2(0.41, -0.20), 0.0, isect);
    lineIntersect(ray, vec2(0.41, -0.20), vec2(0.39, -0.18), 0.0, isect);
    lineIntersect(ray, vec2(0.39, -0.18), vec2(0.41, -0.16), 0.0, isect);
    lineIntersect(ray, vec2(0.41, -0.16), vec2(0.39, -0.14), 0.0, isect);
    lineIntersect(ray, vec2(0.39, -0.14), vec2(0.41, -0.12), 0.0, isect);
    lineIntersect(ray, vec2(0.41, -0.12), vec2(0.39, -0.10), 0.0, isect);
    lineIntersect(ray, vec2(0.39, -0.10), vec2(0.41, -0.08), 0.0, isect);
    lineIntersect(ray, vec2(0.41, -0.08), vec2(0.39, -0.06), 0.0, isect);
    lineIntersect(ray, vec2(0.39, -0.06), vec2(0.41, -0.04), 0.0, isect);
    lineIntersect(ray, vec2(0.41, -0.04), vec2(0.39, -0.02), 0.0, isect);
    lineIntersect(ray, vec2(0.39, -0.02), vec2(0.41, 0.0), 0.0, isect);
    lineIntersect(ray, vec2(0.41, 0.0), vec2(0.39, 0.02), 0.0, isect);
    lineIntersect(ray, vec2(0.39, 0.02), vec2(0.41, 0.04), 0.0, isect);
    lineIntersect(ray, vec2(0.41, 0.04), vec2(0.39, 0.06), 0.0, isect);
    lineIntersect(ray, vec2(0.39, 0.06), vec2(0.41, 0.08), 0.0, isect);
    lineIntersect(ray, vec2(0.41, 0.08), vec2(0.39, 0.10), 0.0, isect);
    lineIntersect(ray, vec2(0.39, 0.10), vec2(0.41, 0.12), 0.0, isect);
    lineIntersect(ray, vec2(0.41, 0.12), vec2(0.39, 0.14), 0.0, isect);
    lineIntersect(ray, vec2(0.39, 0.14), vec2(0.41, 0.16), 0.0, isect);
    lineIntersect(ray, vec2(0.41, 0.16), vec2(0.39, 0.18), 0.0, isect);
    lineIntersect(ray, vec2(0.39, 0.18), vec2(0.41, 0.20), 0.0, isect);
    lineIntersect(ray, vec2(0.41, 0.20), vec2(0.39, 0.22), 0.0, isect);
    lineIntersect(ray, vec2(0.39, 0.22), vec2(0.41, 0.24), 0.0, isect);
    lineIntersect(ray, vec2(0.41, 0.24), vec2(0.39, 0.26), 0.0, isect);
    lineIntersect(ray, vec2(0.39, 0.26), vec2(0.41, 0.28), 0.0, isect);
    lineIntersect(ray, vec2(0.41, 0.28), vec2(0.39, 0.30), 0.0, isect);
    lineIntersect(ray, vec2(0.39, 0.30), vec2(0.41, 0.32), 0.0, isect);
    lineIntersect(ray, vec2(0.41, 0.32), vec2(0.39, 0.34), 0.0, isect);
    lineIntersect(ray, vec2(0.39, 0.34), vec2(0.41, 0.36), 0.0, isect);
    lineIntersect(ray, vec2(0.41, 0.36), vec2(0.39, 0.38), 0.0, isect);
    lineIntersect(ray, vec2(0.39, 0.38), vec2(0.41, 0.40), 0.0, isect);

    // doubly-hidden wall
    lineIntersect(ray, vec2(1.20, 0.0), vec2(1.20, 1.00), 0.0, isect);
}

vec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput, out float tMult) {
    tMult = 1.0;
    if (isect.mat == 1.0) {
        return sampleRoughMirror(state, wiLocal, throughput, 0.5);
        float ior = sqrt(sellmeierIor(vec3(1.0396, 0.2318, 1.0105), vec3(0.0060, 0.0200, 103.56), lambda));
        if (wiLocal.y < 0.0) {
            // The ray comes from inside the dielectric material - it will take longer times
            tMult = ior;
        }
        return sampleDielectric(state, wiLocal, ior);
    } else if (isect.mat == 2.0) {
        return sampleMirror(wiLocal);
    } else if (isect.mat == 3.0) {
        throughput *= vec3(0.0);
        return sampleDiffuse(state, wiLocal);
    } else {
        throughput *= vec3(0.5);
        return sampleDiffuse(state, wiLocal);
    }
}