#include "preamble"
#include "bsdf-rwall"

uniform sampler2D PosDataA;
uniform sampler2D PosDataB;
uniform sampler2D RgbData;
uniform sampler2D TimeDataA;
uniform sampler2D SpadGrid;
uniform sampler2D SpadNormals;

uniform float tmax;
uniform float spadRadius;
uniform vec2 spadPos;   // Position of the physical spad device
uniform int matId;      // Id of the relay wall bsdf, 2 = diffuse, 5 = roughmirror, no others should be used

attribute vec2 TexCoord;

varying vec3 vColor;

const int numSpads = {numSpads};

void main() {
    gl_Position = vec4(vec3(-1.0), 1.0);

    vec2 posA = texture2D(PosDataA, TexCoord.xy).xy;
    vec2 posB = texture2D(PosDataB, TexCoord.xy).xy;
    vec2 dir = posB - posA;
    float t0 = texture2D(TimeDataA, TexCoord.xy).x;
    float biasCorrection = clamp(length(dir)/max(abs(dir.x), abs(dir.y)), 1.0, 1.414214);

    vec2 spadPoint;
    for (int i = 0; i < numSpads; i++) {
        float y = (float(i) + 0.5) / float(numSpads);
        spadPoint = texture2D(SpadGrid, vec2(y, 0.5)).xy;

        if (distance(posA, spadPoint) <= spadRadius) {
            float t = t0 + distance(posA, spadPos); // Time needed to reach the sensor, assuming vacuum and no occlusions
            float x = t / tmax * 2.0 - 1.0;
            y = 2.0 * y - 1.0;

            vec2 n = texture2D(SpadNormals, vec2(y, 0.5)).xy;
            vec2 dir = normalize(spadPos - posA);
            float cosine = dot(n, dir);
            float p = pdf(matId, cosine, 0.5);

            gl_PointSize = 1.0;
            gl_Position = vec4(x, y, 0.0, 1.0);
            vColor = max(vec3(0.0), p * texture2D(RgbData, TexCoord.xy).rgb*biasCorrection / vec3(2.0 * spadRadius));
            break;
        }
    }
}
