#include "trace-frag"

#include "bsdf"
#include "intersect"

void intersect(Ray ray, inout Intersection isect) {
    bboxIntersect(ray, vec2(0.0), vec2(1.79, 1.0), 0.0, isect);
    lineIntersect(ray, vec2(1.2, -1.0), vec2(1.2, -0.1), 1.0, isect);
    lineIntersect(ray, vec2(1.2, 0.0), vec2(1.2, 1.0), 1.0, isect);
    
    lineIntersect(ray, vec2(0.41055555555555556, 1.0), vec2(0.3894444444444445, 0.9788888888888889), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.9788888888888889), vec2(0.41055555555555556, 0.9577777777777778), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.9577777777777778), vec2(0.3894444444444445, 0.9366666666666668), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.9366666666666668), vec2(0.41055555555555556, 0.9155555555555557), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.9155555555555557), vec2(0.3894444444444445, 0.8944444444444446), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.8944444444444446), vec2(0.41055555555555556, 0.8733333333333335), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.8733333333333335), vec2(0.3894444444444445, 0.8522222222222224), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.8522222222222224), vec2(0.41055555555555556, 0.8311111111111114), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.8311111111111114), vec2(0.3894444444444445, 0.8100000000000003), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.8100000000000003), vec2(0.41055555555555556, 0.7888888888888892), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.7888888888888892), vec2(0.3894444444444445, 0.7677777777777781), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.7677777777777781), vec2(0.41055555555555556, 0.746666666666667), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.746666666666667), vec2(0.3894444444444445, 0.725555555555556), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.725555555555556), vec2(0.41055555555555556, 0.7044444444444449), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.7044444444444449), vec2(0.3894444444444445, 0.6833333333333338), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.6833333333333338), vec2(0.41055555555555556, 0.6622222222222227), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.6622222222222227), vec2(0.3894444444444445, 0.6411111111111116), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.6411111111111116), vec2(0.41055555555555556, 0.6200000000000006), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.6200000000000006), vec2(0.3894444444444445, 0.5988888888888895), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.5988888888888895), vec2(0.41055555555555556, 0.5777777777777784), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.5777777777777784), vec2(0.3894444444444445, 0.5566666666666673), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.5566666666666673), vec2(0.41055555555555556, 0.5355555555555562), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.5355555555555562), vec2(0.3894444444444445, 0.5144444444444451), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.5144444444444451), vec2(0.41055555555555556, 0.493333333333334), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.493333333333334), vec2(0.3894444444444445, 0.4722222222222229), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.4722222222222229), vec2(0.41055555555555556, 0.45111111111111174), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.45111111111111174), vec2(0.3894444444444445, 0.4300000000000006), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.4300000000000006), vec2(0.41055555555555556, 0.40888888888888947), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.40888888888888947), vec2(0.3894444444444445, 0.38777777777777833), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.38777777777777833), vec2(0.41055555555555556, 0.3666666666666672), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.3666666666666672), vec2(0.3894444444444445, 0.34555555555555606), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.34555555555555606), vec2(0.41055555555555556, 0.3244444444444449), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.3244444444444449), vec2(0.3894444444444445, 0.3033333333333338), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.3033333333333338), vec2(0.41055555555555556, 0.28222222222222265), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.28222222222222265), vec2(0.3894444444444445, 0.2611111111111115), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.2611111111111115), vec2(0.41055555555555556, 0.2400000000000004), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.2400000000000004), vec2(0.3894444444444445, 0.2188888888888893), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.2188888888888893), vec2(0.41055555555555556, 0.1977777777777782), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.1977777777777782), vec2(0.3894444444444445, 0.17666666666666708), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.17666666666666708), vec2(0.41055555555555556, 0.15555555555555597), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.15555555555555597), vec2(0.3894444444444445, 0.13444444444444487), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.13444444444444487), vec2(0.41055555555555556, 0.11333333333333376), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.11333333333333376), vec2(0.3894444444444445, 0.09222222222222265), 2.0, isect);
lineIntersect(ray, vec2(0.3894444444444445, 0.09222222222222265), vec2(0.41055555555555556, 0.07111111111111154), 2.0, isect);
lineIntersect(ray, vec2(0.41055555555555556, 0.07111111111111154), vec2(0.3894444444444445, 0.05000000000000043), 2.0, isect);
}

vec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput, out float tMult) {
    tMult = 1.0;
    if (isect.mat == 0.0) {
        // Bounding box
        throughput = vec3(0.0);
        return sampleDiffuse(state, wiLocal);
    } else if (isect.mat == 1.0) {
        // Relay wall
throughput *= vec3(0.5);
return sampleDiffuse(state, wiLocal);
        throughput *= vec3(0.5);
        return sampleDiffuse(state, wiLocal);
    } else {
        throughput *= vec3(0.5);
return sampleDiffuse(state, wiLocal);
    }
}
