#include "trace-frag"

#include "bsdf"
#include "intersect"

void intersect(Ray ray, inout Intersection isect) {
    bboxIntersect(ray, vec2(0.0), vec2(1.79, 1.0), 5.0, isect);
    lineIntersect(ray, vec2(1.2, -1.0), vec2(1.2, -0.2), 1.0, isect);

    // First hidden wall
    lineIntersect(ray, vec2(0.41440, 0.09037), vec2(0.38560, 0.15963), 0.0, isect);
    lineIntersect(ray, vec2(0.37746, 0.14503), vec2(0.42254, 0.20497), 0.0, isect);
    lineIntersect(ray, vec2(0.40306, 0.18763), vec2(0.39694, 0.26237), 0.0, isect);
    lineIntersect(ray, vec2(0.43196, 0.25539), vec2(0.36804, 0.29461), 0.0, isect);
    lineIntersect(ray, vec2(0.41139, 0.28927), vec2(0.38861, 0.36073), 0.0, isect);
    lineIntersect(ray, vec2(0.43158, 0.35478), vec2(0.36842, 0.39522), 0.0, isect);
    lineIntersect(ray, vec2(0.42705, 0.39903), vec2(0.37295, 0.45097), 0.0, isect);
    lineIntersect(ray, vec2(0.39562, 0.43776), vec2(0.40438, 0.51224), 0.0, isect);
    lineIntersect(ray, vec2(0.40653, 0.48807), vec2(0.39347, 0.56193), 0.0, isect);
    lineIntersect(ray, vec2(0.36833, 0.55492), vec2(0.43167, 0.59508), 0.0, isect);
    lineIntersect(ray, vec2(0.39866, 0.58752), vec2(0.40134, 0.66248), 0.0, isect);
    lineIntersect(ray, vec2(0.42432, 0.64646), vec2(0.37568, 0.70354), 0.0, isect);
    lineIntersect(ray, vec2(0.38194, 0.69213), vec2(0.41806, 0.75787), 0.0, isect);
    lineIntersect(ray, vec2(0.39912, 0.73751), vec2(0.40088, 0.81249), 0.0, isect);
    lineIntersect(ray, vec2(0.38828, 0.78938), vec2(0.41172, 0.86062), 0.0, isect);
    lineIntersect(ray, vec2(0.37962, 0.84352), vec2(0.42038, 0.90648), 0.0, isect);

    // Second hidden wall
    circleIntersect(ray, vec2(1.2, 0.7), 0.07, 0.0, isect);
    circleIntersect(ray, vec2(1.2, 0.3), 0.07, 0.0, isect);

    // Occluder
    bboxIntersect(ray, vec2(1.2, 0.0), vec2(0.1, 0.05), 5.0, isect);
}

vec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput, out float tMult) {
    tMult = 1.0;
    if (isect.mat == 5.0) {
        // Bounding box
        throughput = vec3(0.0);
        return sampleDiffuse(state, wiLocal);
    } else if (isect.mat == 1.0) {
        // Relay wall
        throughput *= vec3(0.5);
        return sampleDiffuse(state, wiLocal);
    } else {
        throughput *= vec3(0.5);
        return sampleDiffuse(state, wiLocal);
    }
}
