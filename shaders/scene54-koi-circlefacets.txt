#include "trace-frag"

#include "bsdf"
#include "intersect"

void intersect(Ray ray, inout Intersection isect) {
    bboxIntersect(ray, vec2(0.0), vec2(1.79, 1.0), 5.0, isect);
    lineIntersect(ray, vec2(1.2, -1.0), vec2(1.2, -0.2), 1.0, isect);

    // First hidden wall
    circleIntersect(ray, vec2(0.40, 0.125), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.175), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.225), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.275), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.325), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.375), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.425), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.475), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.525), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.575), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.625), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.675), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.725), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.775), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.825), 0.025, 0.0, isect);
    circleIntersect(ray, vec2(0.40, 0.875), 0.025, 0.0, isect);

    // Second hidden wall
    lineIntersect(ray, vec2(1.2, 0.1), vec2(1.2, 0.9), 0.0, isect);
}

vec2 sample(inout vec4 state, Intersection isect, float lambda, vec2 wiLocal, inout vec3 throughput, out float tMult) {
    tMult = 1.0;
    if (isect.mat == 5.0) {
        // Bounding box
        throughput = vec3(0.0);
        return sampleDiffuse(state, wiLocal);
    } else if (isect.mat == 1.0) {
        // Relay wall
        throughput *= vec3(0.5);
        return sampleDiffuse(state, wiLocal);
    } else {
        throughput *= vec3(0.5);
        return sampleDiffuse(state, wiLocal);
    }
}
