#include "preamble"

uniform float tmax;

uniform sampler2D radiance; // x time, y spad

uniform float instant;
uniform vec2 laserPos;
uniform vec2 laserGrid; // could be more than one, actually
uniform vec2 spadPos;
uniform sampler2D spadGrid;

uniform sampler2D planeGrid; // Plane to reconstruct
        // positions of the considered pixels, on a row

varying vec2 mPos; // Pixel coordinates [0,1]

const int numSpads = {numSpads};

void main() {
    float spadDist = 1.0 / float(numSpads);
    float xSpad = spadDist / 2.0;

    vec2 pixelPos = texture2D(planeGrid, mPos).xy;

    vec2 radianceAccum = vec2(0.0);
    for (int i = 0; i < numSpads; i++) {
        vec2 wallSpad = texture2D(spadGrid, vec2(xSpad, 0.5)).xy;
        float dlp = distance(laserGrid, laserPos);
        float dl  = distance(laserGrid, pixelPos);
        float dsp = distance(wallSpad, spadPos); // distance spad device to captured points
        float ds  = distance(wallSpad, pixelPos);
        float dt = ds + dsp + dl + dlp + instant;

        float t = dt / tmax;
        radianceAccum += texture2D(radiance, vec2(t, xSpad)).xy * vec2(t <= 1.0);
        xSpad += spadDist;
    }
    gl_FragColor = vec4(radianceAccum, 0.0, 1.0);
    
    gl_FragColor = vec4(pixelPos, 0.0, 1.0);
}
