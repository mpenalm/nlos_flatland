#include "preamble"

// our texture
uniform sampler2D u_impulse;
uniform sampler2D u_kernel;

#define KERNEL_SIZE {numIntervals}
#define KERNEL_INTERVAL 1.0 / {numIntervals}.0
#define KERNEL_START_IDX 0.5 + KERNEL_INTERVAL / 2.0

varying vec2 mPos; // Pixel coordinates [0,1]

void main() {
	vec4 meanColor = vec4(0);
	float j = floor(mPos.x * float(KERNEL_SIZE)) + float(KERNEL_SIZE / 2);
	for (int i = 0; i < KERNEL_SIZE; i++) {
        float impIdx = (float(i) + 0.5) * KERNEL_INTERVAL;
		float knlIdx = ((j - float(i)) + 0.5) * KERNEL_INTERVAL;
		float impulsePixel = texture2D(u_impulse, vec2(impIdx, mPos.y)).x;
		meanColor += vec4(impulsePixel, impulsePixel, 0.0, 1.0) *
            texture2D(u_kernel, vec2(knlIdx, 0.5)) * vec4(knlIdx > 0.0 && knlIdx < 1.0);
	}
/*
	vec2 onePixel = vec2(KERNEL_INTERVAL, 0.0);
	int ms = KERNEL_SIZE / 2;
	for (int i = 0; i < KERNEL_SIZE; i++) {
		vec2 coordImpulse = mPos + onePixel*vec2(i-ms);
		bool inx = coordImpulse.x > 0.0 && coordImpulse.x < 1.0;
		float impulsePixel = texture2D(u_impulse, coordImpulse).x;

		vec2 coordKernel = onePixel*vec2(i) + vec2(0.5*KERNEL_INTERVAL, 0.5);
		meanColor += vec4(impulsePixel, impulsePixel, 0.0, 1.0) *
			texture2D(u_kernel, coordKernel) * vec4(inx);
	}*/

	gl_FragColor = meanColor;
}