#include "preamble"

uniform float tmax;

uniform sampler2D radiance; // x time, y spad

uniform float instant;
uniform vec2 laserPos;
uniform vec2 spadPos;
uniform sampler2D wallGrid; // laser and spad grid

uniform sampler2D planeGrid; // Plane to reconstruct
        // positions of the considered pixels, on a row

varying vec2 mPos; // Pixel coordinates [0,1]

const int numSpads = {numSpads};

void main() {
    float spadDist = 1.0 / float(numSpads);
    float xSpad = spadDist / 2.0;

    vec2 pixelPos = texture2D(planeGrid, vec2(mPos.x, 1.0 - mPos.y)).xy;
    vec2 radianceAccum = vec2(0.0);
    for (int i = 0; i < numSpads; i++) {
        vec2 wallPos = texture2D(wallGrid, vec2(xSpad, 0.5)).xy;
        float dlp = distance(wallPos, laserPos); // distance laser device to captured (illuminated) point
        float dsp = distance(wallPos, spadPos); // distance spad device to captured points
        float ds  = distance(wallPos, pixelPos); // distance captured (illuminated) point to reconstructed point
        float dt = ds + dsp + dlp + instant;

        float t = dt / tmax;
        radianceAccum += texture2D(radiance, vec2(t, xSpad)).xy * vec2(t <= 1.0);
        xSpad += spadDist;
    }
    gl_FragColor = vec4(radianceAccum, 0.0, 1.0);
}
